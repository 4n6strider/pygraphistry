!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Grapher=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
"use strict";

var Q = _dereq_('q');
var glMatrix = _dereq_('gl-matrix');
var events = _dereq_('./SimpleEvents.js');
var _ = _dereq_('underscore');
var debug = _dereq_("debug")("N-body:main");

var STEP_NUMBER_ON_CHANGE = 30;
var elementsPerPoint = 2;


/**
 * Create a new N-body graph and return a promise for the graph object
 *
 * @param simulator - the module of the simulator backend to use
 * @param renderer - the module of the rendering backend to use
 * @param document - parent document DOM
 * @param canvas - the canvas DOM element to draw the graph in
 * @param bgColor - [0--255,0--255,0--255,0--1]
 * @param [dimensions=\[1,1\]] - a two element array [width,height] used for internal posituin calculations.
 */
function create(simulator, renderer, document, canvas, bgColor, dimensions, numSplits) {
    dimensions = dimensions || [1,1];
    numSplits = numSplits || 0;

    return renderer
        .create(document, canvas, bgColor, dimensions)
        .then(function(rend) {
            debug("Created renderer");

            return simulator
                .create(rend, dimensions, numSplits)
                .then(function(sim) {
                    debug("Created simulator");

                    var graph = {
                        "renderer": rend,
                        "simulator": sim
                    };
                    graph.setPoints = setPoints.bind(this, graph);
                    graph.setEdges = setEdges.bind(this, graph);
                    graph.setPhysics = setPhysics.bind(this, graph);
                    graph.setVisible = setVisible.bind(this, graph);
                    graph.setLocked = setLocked.bind(this, graph);
                    graph.setColorMap = setColorMap.bind(this, graph);
                    graph.tick = tick.bind(this, graph);
                    graph.stepNumber = 0;
                    graph.dimensions = dimensions;
                    graph.numSplits = numSplits;

                    return graph;
                });
        });
}


function setPoints(graph, points, pointSizes, pointColors) {
    // FIXME: If there is already data loaded, we should to free it before loading new data
    if(!(points instanceof Float32Array)) {
        points = _toTypedArray(points, Float32Array);
    }

    graph.__pointsHostBuffer = points;

    graph.stepNumber = 0;
    return graph.simulator.setPoints(points, pointSizes, pointColors)
    .then(function() {
        return graph;
    });
}


var setEdges = Q.promised(function(graph, edges, edgeColors) {

    if (edges.length < 1)
        return Q.fcall(function() { return graph; });

    if (!(edges instanceof Uint32Array)) {
        edges = _toTypedArray(edges, Uint32Array);
    }

    debug("Number of edges: %d", edges.length / 2)

    var edgesFlipped = new Uint32Array(edges.length);
    for (var i = 0; i < edges.length; i++)
        edgesFlipped[i] = edges[edges.length - 1 - i];


    //FIXME THIS SHOULD WORK BUT CRASHES SAFARI
    var encapsulate = function (edges) {

        //[[src idx, dest idx]]
        var edgeList = new Array(edges.length / 2);
        for (var i = 0; i < edges.length/2; i++)
            edgeList[i] = [edges[2 * i], edges[2 * i + 1]];

        //sort by src idx
        edgeList.sort(function(a, b) {
            return a[0] < b[0] ? -1
                : a[0] > b[0] ? 1
                : a[1] - b[1];
        });

        //[ [first edge number from src idx, numEdges from source idx, source idx], ... ]
        var workItems = [ [0, 1, edgeList[0][0]] ];
        var sourceHasEdge = {};
        edgeList.forEach(function (edge, i) {
            sourceHasEdge[edge[0]] = true;
        });
        edgeList.forEach(function (edge, i) {
            if (i == 0) return;
            var prev = workItems[workItems.length - 1];
            if(edge[0] == prev[2]) {
                prev[1]++;
            } else {
                workItems.push([i, 1, edge[0]])
            }
        });

        var degreesFlattened = new Uint32Array(graph.__pointsHostBuffer.length);
        workItems.forEach(function (edgeList) {
            degreesFlattened[edgeList[2]] = edgeList[1];
        });

        //Cheesey load balancing: sort by size
        //TODO benchmark
        workItems.sort(function (edgeList1, edgeList2) {
            return edgeList1[1] - edgeList2[1];
        });

        //Uint32Array [first edge number from src idx, number of edges from src idx]
        //fetch edge to find src and dst idx (all src same)
        //num edges > 0
        var workItemsFlattened =
            new Uint32Array(
                _.flatten(workItems.map(function (o) { return [o[0], o[1]]})));

        var edgesFlattened = new Uint32Array(_.flatten(edgeList));

        return {
            degreesTyped: degreesFlattened,
            edgesTyped: edgesFlattened,
            numWorkItems: workItemsFlattened.length,
            workItemsTyped: new Uint32Array(workItemsFlattened)
        };
    }

    var forwardEdges = encapsulate(edges);
    var backwardsEdges = encapsulate(edgesFlipped);

    var nDim = graph.dimensions.length;
    var midPoints = new Float32Array((edges.length / 2) * graph.numSplits * nDim || 1);
    if (graph.numSplits) {
        for (var i = 0; i < edges.length; i+=2) {
            var src = edges[i];
            var dst = edges[i + 1];
            for (var d = 0; d < nDim; d++) {
                var start = graph.__pointsHostBuffer[src * nDim + d];
                var end = graph.__pointsHostBuffer[dst * nDim + d];
                var step = (end - start) / (graph.numSplits + 1);
                for (var q = 0; q < graph.numSplits; q++) {
                    midPoints[(i * graph.numSplits + q) * nDim + d] = start + step * (q + 1);
                }
            }
        }
    }
    debug("Number of control points, splits: %d, %d", edges.length * graph.numSplits, graph.numSplits);

    return graph.simulator.setEdges(forwardEdges, backwardsEdges, midPoints, edgeColors)
    .then(function() { return graph; });
});


function setPhysics(graph, opts) {
    graph.stepNumber = STEP_NUMBER_ON_CHANGE;
    graph.simulator.setPhysics(opts);
}


function setVisible(graph, opts) {
    graph.renderer.setVisible(opts);
}


function setLocked(graph, opts) {
    //TODO reset step number?
    graph.simulator.setLocked(opts);
}


function setColorMap(graph, imageURL, maybeClusters) {
    return graph.renderer.setColorMap(imageURL, maybeClusters)
        .then(_.constant(graph));
}


// Turns an array of vec3's into a Float32Array with elementsPerPoint values for each element in
// the input array.
function _toTypedArray(array, cons) {
    var floats = new cons(array.length * elementsPerPoint);

    for(var i = 0; i < array.length; i++) {
        var ii = i * elementsPerPoint;
        floats[ii + 0] = array[i][0];
        floats[ii + 1] = array[i][1];
    }

    return floats;
}


function tick(graph) {
    events.fire("tickBegin");
    events.fire("simulateBegin");

    return graph.simulator.tick(graph.stepNumber++)
    .then(function() {
        events.fire("simulateEnd");
        events.fire("renderBegin");

        return graph.renderer.render();
    })
    .then(function() {
        events.fire("renderEnd");
        events.fire("tickEnd");

        return graph;
    });
}


module.exports = {
    "elementsPerPoint": elementsPerPoint,
    "create": create,
    "setPoints": setPoints,
    "setEdges": setEdges,
    "setColorMap": setColorMap,
    "tick": tick
};

},{"./SimpleEvents.js":4,"debug":17,"gl-matrix":20,"q":22,"underscore":23}],2:[function(_dereq_,module,exports){
"use strict";

var Q = _dereq_('q');
var glMatrix = _dereq_('gl-matrix');
var util = _dereq_('./util.js');
var debug = _dereq_("debug")("N-body:RenderGL");


var create = Q.promised(function(document, canvas, bgColor, dimensions, visible) {
    visible = visible || {};

    var renderer = {document: document, canvas: canvas};

    // The dimensions of a canvas, by default, do not accurately reflect its size on screen (as
    // set in the HTML/CSS/etc.) This changes the canvas size to match its size on screen.
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    var gl = canvas.getContext("webgl", {antialias: true, premultipliedAlpha: false});
    if(gl === null) {
        throw new Error("Could not initialize WebGL");
    }

    // Set up WebGL settings
    gl.enable(gl.BLEND);
    // gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
    gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
    gl.depthFunc(gl.LEQUAL);
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.GL_POINT_SPRITE | 0x8861); //34913
    gl.enable(gl.VERTEX_PROGRAM_POINT_SIZE | 0x8642);
    gl.enable(gl.POINT_SMOOTH | 0x0B10);
    gl.clearColor.apply(gl, bgColor);
    // Lines should be 1px wide
    gl.lineWidth(1);

    // Populate the renderer object with default values, empty containers, etc.
    renderer.gl = gl;
    renderer.canvas = canvas;
    renderer.buffers = {
        curPoints: null,
        pointSizes: null,
        pointColors: null,
        springs: null,
        curMidPoints: null,
        midSprings: null,
        midSpringsColorCoord: null
    };
    Object.seal(renderer.buffers);
    renderer.programs = {
        points: null,
        edges: null,
        midpoints: null,
        midedges: null,
        midedgestextured: null
    };
    Object.seal(renderer.programs);
    renderer.elementsPerPoint = 2;
    renderer.numPoints = 0;
    renderer.numEdges = 0;
    renderer.numMidPoints = 0;
    renderer.numMidEdges = 0;
    renderer.colorTexture = null;

    // For each module function that takes a renderer as the first argument, bind a version
    // to this renderer object, with the renderer argument curried in.
    renderer.setCamera2d = setCamera2d.bind(this, renderer);
    renderer.createBuffer = createBuffer.bind(this, renderer);
    renderer.render = render.bind(this, renderer);
    renderer.createProgram = createProgram.bind(this, renderer);
    renderer.setVisible = setVisible.bind(this, renderer);
    renderer.isVisible = isVisible.bind(this, renderer);
    renderer.setColorMap = setColorMap.bind(this, renderer);

    renderer.visible = {points: true, edges: true, midpoints: false, midedges: false};
    renderer.setVisible(visible);


    return Q.all(
        ['point', 'edge', 'midpoint', 'midedge', 'midedge-textured'].map(function (name) {
            return renderer.createProgram(name + '.vertex', name + '.fragment');
    }))
    .spread(function (pointProgram, edgeProgram, midpointProgram, midedgeProgram, midedgeTexturedProgram) {
        renderer.programs["points"] = pointProgram;
        renderer.programs["edges"] = edgeProgram;
        renderer.programs["midpoints"] = midpointProgram;
        renderer.programs["midedges"] = midedgeProgram;
        renderer.programs["midedgestextured"] = midedgeTexturedProgram;

        // TODO: Enlarge the camera by the (size of gl points / 2) so that points are fully
        // on screen even if they're at the edge of the graph.
        return renderer.setCamera2d(-0.01, dimensions[0] + 0.01, -0.01, dimensions[1] + 0.01);
    })
    .then(function(renderer) {
        Object.seal(renderer);
        return renderer;
    });
});


function createProgram(renderer, vertexShaderID, fragmentShaderID) {
    var gl = renderer.gl;

    var pragObj = {};

    pragObj.renderer = renderer;
    pragObj.glProgram = gl.createProgram();
    pragObj.bindVertexAttrib = bindVertexAttrib.bind(this, pragObj);
    pragObj.use = function() {
        gl.useProgram(pragObj.glProgram);
    }
    pragObj.attributes = {};

    return Q.all([
        util.getSource(vertexShaderID + ".glsl"),
        util.getSource(fragmentShaderID + ".glsl")
    ])
    .spread(function(vertShaderSource, fragShaderSource) {

        function compileShader(program, shaderSource, shaderType) {

            var sanitizedShaderSource =
                (typeof(window) == 'undefined' ? '#version 120\n' : '')
                + shaderSource.replace(/(precision [a-z]* float;)/g,"#ifdef GL_ES\n$1\n#endif\n");

            var shader = renderer.gl.createShader(shaderType);
            renderer.gl.shaderSource(shader, sanitizedShaderSource);
            renderer.gl.compileShader(shader);
            if(!renderer.gl.getShaderParameter(shader, renderer.gl.COMPILE_STATUS)) {
                console.error(renderer.gl.getShaderInfoLog(shader));
                throw new Error("Error compiling WebGL shader (shader type: " + shaderType + ")");
            }
            if(!renderer.gl.isShader(shader)) {
                throw new Error("After compiling shader, WebGL is reporting it is not valid");
            }
            renderer.gl.attachShader(program.glProgram, shader);

            return shader;
        }

        pragObj.vertexShader   = compileShader(pragObj, vertShaderSource, gl.VERTEX_SHADER);
        pragObj.fragmentShader = compileShader(pragObj, fragShaderSource, gl.FRAGMENT_SHADER);

        gl.linkProgram(pragObj.glProgram);
        return pragObj;
    });
}


var setCamera2d = Q.promised(function(renderer, left, right, bottom, top) {
    renderer.gl.viewport(0, 0, renderer.canvas.width, renderer.canvas.height);

    var lr = 1 / (left - right),
        bt = 1 / (bottom - top);

    var mvpMatrix = glMatrix.mat2d.create();
    glMatrix.mat2d.scale(mvpMatrix, mvpMatrix, glMatrix.vec2.fromValues(-2 * lr, -2 * bt));
    glMatrix.mat2d.translate(mvpMatrix, mvpMatrix, glMatrix.vec2.fromValues((left+right)*lr, (top+bottom)*bt));

    var mvpMat3 = glMatrix.mat3.create();
    glMatrix.mat3.fromMat2d(mvpMat3, mvpMatrix);

    ['points', 'edges', 'midpoints', 'midedges', 'midedgestextured'].forEach(function (name) {
        var program = renderer.programs[name].glProgram;
        renderer.gl.useProgram(program);
        var mvpLocation = renderer.gl.getUniformLocation(program, "mvp");
        renderer.gl.uniformMatrix3fv(mvpLocation, false, mvpMat3);
    })

    return renderer;
});



var colorMaps =
    [
      [[0,0,0]], //1
      [[255,0,0],[0,0,255]], //2
      [[141,211,199],[255,255,179],[190,186,218]],
      [[141,211,199],[255,255,179],[190,186,218], [251,128,114]],
      [[228,26,28], [55,126,184], [77,175,74], [152,78,163], [255,127,0]],
      [[228,26,28], [55,126,184], [77,175,74], [152,78,163], [255,127,0], [255,255,51]],
      [[228,26,28], [55,126,184], [77,175,74], [152,78,163], [255,127,0], [255,255,51], [166,86,40]],
      [[228,26,28], [55,126,184], [77,175,74], [152,78,163], [255,127,0], [255,255,51], [166,86,40], [247,129,191]],
      [[228,26,28], [55,126,184], [77,175,74], [152,78,163], [255,127,0], [255,255,51], [166,86,40], [247,129,191], [153,153,153]],
      [[166,206,227], [31,120,180], [178,223,138], [51,160,44], [251,154,153], [227,26,28], [253,191,111], [255,127,0], [202,178,214], [106,61,154]],
      [[166,206,227], [31,120,180], [178,223,138], [51,160,44], [251,154,153], [227,26,28], [253,191,111], [255,127,0], [202,178,214], [106,61,154], [255,255,153]],
      [[166,206,227], [31,120,180], [178,223,138], [51,160,44], [251,154,153], [227,26,28], [253,191,111], [255,127,0], [202,178,214], [106,61,154], [255,255,153], [177,89,40]]
    ];




/**
 * Fetch the image at the given URL and use it when coloring edges in the graph.
 */
var setColorMap = Q.promised(function(renderer, imageURL, maybeClusters) {


    // TODO: Allow a user to clear the color map by passing in a null here or something
    var gl = renderer.gl;

    return util.getImage(imageURL)
    .then(function(texImg) {

        var imageData;
        try {
        if (typeof(window) == 'undefined') {
            debug("FIXME: no fancy setColorMap in node");
        } else if (maybeClusters) {

            debug("Clustering colors");

            var canvas = renderer.document.createElement("canvas");
            canvas.width = texImg.width;
            canvas.height = texImg.height;

            var ctx = canvas.getContext("2d");
            if (ctx.createImageData) {
                imageData = ctx.createImageData(texImg.width, texImg.height);
            } else {
                imageData = {
                    data: new Uint8Array(texImg.width * texImg.height * 4)
                }
            }

            //default to white/transparent
            for (var x = 0; x < texImg.width; x++) {
                for (var y = 0; y < texImg.height; y++) {
                    var i = 4 * (y * texImg.width + x);
                    imageData.data[i] = 255;
                    imageData.data[i+1] = 255;
                    imageData.data[i+2] = 255;
                    imageData.data[i+3] = 0;
                }
            }

            //point box around each start point to its cluster
            //FIXME: unsafe in case of overplotting; better to have a labeled edgelist..
            var colors = colorMaps[maybeClusters.clusters.centers.length - 1];
            maybeClusters.edges.forEach(function (pair, i) {
                var clusterIdx = maybeClusters.clusters.labeling[i];
                var cluster = maybeClusters.clusters.centers[clusterIdx];
                var startPoint = maybeClusters.points[pair[0]];

                var color = colors[clusterIdx];

                var col = startPoint[0] * texImg.width;
                var row = startPoint[1] * texImg.height;

                var range = 3;

                for (var a = -range; a < range; a++) {
                    for (var b = -range; b < range; b++) {

                        var idx = (Math.floor(row + a) * texImg.width + Math.floor(col+b)) * 4;
                        idx = Math.max(0, Math.min(texImg.width * texImg.height * 4, idx)); //clamp

                        imageData.data[idx] = color[0];
                        imageData.data[idx+1] = color[1];
                        imageData.data[idx+2] = color[2];
                        imageData.data[idx+3] = 255;
                    }
                }
            });
        }else {
            debug("Using preset colors from %s", imageURL);
        }
        } catch (e) {
            console.error('bad cluster load', e, e.stack);
            throw e;
        }



        renderer.colorTexture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, renderer.colorTexture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, imageData ? imageData : texImg);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
        gl.generateMipmap(gl.TEXTURE_2D);
        gl.bindTexture(gl.TEXTURE_2D, null);


        debug("Finished setting colormap");
    });
});


//async (may trigger a write)
var createBuffer = Q.promised(function(renderer, data) {
    debug("Creating gl buffer of type %s. Constructor: %o", typeof(data), data.constructor);

    var buffer = renderer.gl.createBuffer();
    var bufObj = {
        "buffer": buffer,
        "gl": renderer.gl,
        "len": (typeof data === 'number') ? data : data.byteLength
    };

    bufObj.delete = Q.promised(function() {
        renderer.gl.deleteBuffer(buffer);
        return renderer;
    })
    bufObj.write = write.bind(this, bufObj);

    if(data) {
        return bufObj.write(data);
    } else {
        return bufObj;
    }
});


var write = Q.promised(function(buffer, data) {
    buffer.gl.bindBuffer(buffer.gl.ARRAY_BUFFER, buffer.buffer);
    buffer.gl.bufferData(buffer.gl.ARRAY_BUFFER, data, buffer.gl.DYNAMIC_DRAW);
    buffer.gl.finish();
    return buffer;
});


/**
 * Shortcut method to find the location of an attribute, bind a buffer, and then set the
 * attribute to the buffer
 *
 * @param program - the program object with the attribute you want to bind to the buffer
 * @param buffer - the buffer you want to bind to the attribute
 * @param {string} attribute - the name of the attribute you wish to bind
 * @param {number} elementsPerItem - the number of elements to use for each rendered item (e.g.,
 * use two floats per point). Passed directly to gl.vertexAttribPointer() as 'size' argument.
 * @param glType - the WebGL type of the array (e.g., gl.FLOAT)
 * @param {boolean} normalize - should the data be normalized before being processed by shaders
 * @param {number} stride - the number of bytes between item elements (normally
 * elementsPerItem * sizeof(type))
 * @param {number} offset - the number of bytes from the start of the buffer to begin reading
 */
function bindVertexAttrib(program, buffer, attribute, elementsPerItem, glType, normalize, stride, offset) {
    var gl = program.renderer.gl;
    // TODO: cache this, because getAttribLocation is a CPU/GPU synchronization
    var location = gl.getAttribLocation(program.glProgram, attribute);

    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer);
    gl.enableVertexAttribArray(location);
    gl.vertexAttribPointer(location, elementsPerItem, glType, normalize, stride, offset);

    return program;
}



/**
 * Enable or disable the drawing of elements in the scene. Elements are one of: points, edges,
 * midpoints, midedges.
 *
 * @param renderer - the renderer object created with GLRunner.create()
 * @param {Object} visible - An object with keys for 0 or more objects to set the visibility
 * for. Each value should be true or false.
 * @returns the renderer object passed in, with visibility options updated
 */
function setVisible(renderer, visible) {
    util.extend(renderer.visible, visible);

    return renderer;
}


/**
 * Determines if the element passed in should be visible in image
 *
 * @param renderer - the renderer object created with GLRunner.create()
 * @param element - the name of the element to check visibility for
 *
 * @returns a boolean value determining if the object should be visible (false by default)
 */
function isVisible(renderer, element) {
    // TODO: check the length of the associated buffer to see if it's >0; return false if not.
    return (renderer.visible[element] || false);
}


var render = Q.promised(function(renderer) {
    var gl = renderer.gl;

    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    // If there are no points in the graph, don't render anything
    if(renderer.numPoints < 1) {
        return renderer;
    }


    if(renderer.numEdges > 0) {
        if (renderer.isVisible("edges")) {
            renderer.programs["edges"].use();
            renderer.programs["edges"].bindVertexAttrib(renderer.buffers.springs, "curPos",
                renderer.elementsPerPoint, gl.FLOAT, false,
                renderer.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 0);
            gl.drawArrays(gl.LINES, 0, renderer.numEdges * 2);
        }

        if (renderer.isVisible("midedges")) {
            if(renderer.colorTexture === null) {
                renderer.programs["midedges"].use();
                renderer.programs["midedges"].bindVertexAttrib(renderer.buffers.midSprings, "curPos",
                    renderer.elementsPerPoint, gl.FLOAT, false,
                    renderer.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 0);
                gl.drawArrays(gl.LINES, 0, renderer.numMidEdges * 2);
            } else {
                renderer.programs["midedgestextured"].use();
                renderer.programs["midedgestextured"].bindVertexAttrib(renderer.buffers.midSprings, "curPos",
                    renderer.elementsPerPoint, gl.FLOAT, false,
                    renderer.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 0);
                renderer.programs["midedgestextured"].bindVertexAttrib(renderer.buffers.midSpringsColorCoord, "aColorCoord",
                    renderer.elementsPerPoint, gl.FLOAT, false,
                    renderer.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 0);
                gl.activeTexture(gl.TEXTURE0);
                gl.bindTexture(gl.TEXTURE_2D, renderer.colorTexture);
                gl.uniform1i(gl.getUniformLocation(renderer.programs["midedgestextured"].glProgram, "uSampler"), 0);
                gl.drawArrays(gl.LINES, 0, renderer.numMidEdges * 2);
            }

        }
    }

    if (renderer.isVisible("points")) {
        renderer.programs["points"].use();
        renderer.programs["points"].bindVertexAttrib(renderer.buffers.curPoints, "curPos",
            renderer.elementsPerPoint, gl.FLOAT, false,
            renderer.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 0)
        renderer.programs["points"].bindVertexAttrib(renderer.buffers.pointSizes, "pointSize",
            1, gl.UNSIGNED_BYTE, false, 0, 0);
        renderer.programs["points"].bindVertexAttrib(renderer.buffers.pointColors, "pointColor",
            4, gl.UNSIGNED_BYTE, true, Uint32Array.BYTES_PER_ELEMENT, 0);
        gl.drawArrays(gl.POINTS, 0, renderer.numPoints);
    }

    if (renderer.isVisible("midpoints")) {
        renderer.programs["midpoints"].use();
        renderer.programs["midpoints"].bindVertexAttrib(renderer.buffers.curMidPoints, "curPos",
            renderer.elementsPerPoint, gl.FLOAT, false,
            renderer.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 0);
        gl.drawArrays(gl.POINTS, 0, renderer.numMidPoints);
    }

    gl.finish();

    return renderer;
});


module.exports = {
    "create": create,
    "createProgram": createProgram,
    "setColorMap": setColorMap,
    "setCamera2d": setCamera2d,
    "createBuffer": createBuffer,
    "write": write,
    "bindVertexAttrib": bindVertexAttrib,
    "setVisible": setVisible,
    "isVisible": isVisible,
    "render": render
};

},{"./util.js":16,"debug":17,"gl-matrix":20,"q":22}],3:[function(_dereq_,module,exports){
"use strict";

var Q = _dereq_('q');
var util = _dereq_('./util.js');
var cljs = _dereq_('./cl.js');
var _ = _dereq_('underscore');
var debug = _dereq_("debug")("N-body:SimCL");


var forceAtlas = _dereq_('./forceatlas.js'),
    gaussSeidel = _dereq_('./gaussseidel.js'),
    edgeBundling = _dereq_('./edgebundling.js');


var layoutAlgorithms = [forceAtlas, gaussSeidel, edgeBundling];


if (typeof(window) == 'undefined') {
    var webcl = _dereq_('node-webcl');
} else if (typeof(webcl) == 'undefined') {
    var webcl = window.webcl;
}


Q.longStackSupport = true;
var randLength = 73;

function create(renderer, dimensions, numSplits, locked) {
    return cljs.create(renderer.gl)
    .then(function(cl) {
        debug("Creating CL object with GL context");

        var kernelNames =
            _.chain(layoutAlgorithms)
                .pluck('kernelNames')
                .flatten()
                .value();

        // Compile the WebCL kernels
        return util.getSource("apply-forces.cl")
        .then(function(source) {
            debug("CL kernel source retrieved");
            return cl.compile(source, kernelNames);
        })
        .then(function(kernels) {
            debug("Compiled kernel source");
            var simObj = {
                renderer: renderer,
                cl: cl,
                elementsPerPoint: 2,
                kernels: kernels
            };
            simObj.tick = tick.bind(this, simObj);
            simObj.setPoints = setPoints.bind(this, simObj);
            simObj.setEdges = setEdges.bind(this, simObj);
            simObj.setLocked = setLocked.bind(this, simObj);
            simObj.setPhysics = setPhysics.bind(this, simObj);
            simObj.resetBuffers = resetBuffers.bind(this, simObj);

            simObj.dimensions = dimensions;
            simObj.numSplits = numSplits;
            simObj.numPoints = 0;
            simObj.numEdges = 0;
            simObj.numForwardsWorkItems = 0;
            simObj.numBackwardsWorkItems = 0;
            simObj.numMidPoints = 0;
            simObj.numMidEdges = 0;
            simObj.locked = util.extend(
                {lockPoints: false, lockMidpoints: true, lockEdges: false, lockMidedges: true},
                (locked || {})
            );
            simObj.physics = {};

            simObj.buffers = {
                nextPoints: null,
                randValues: null,
                curPoints: null,
                forwardsEdges: null,
                forwardsDegrees: null,
                forwardsWorkItems: null,
                backwardsEdges: null,
                backwardsDegrees: null,
                backwardsWorkItems: null,
                springsPos: null,
                midSpringsPos: null,
                midSpringsColorCoord: null,
                nextMidPoints: null,
                curMidPoints: null
            };
            //constant
            simObj.buffersLocal = {
                pointSizes: null,
                pointColors: null
            };
            Object.seal(simObj.buffers);

            debug("WebCL simulator created");
            Object.seal(simObj);
            return simObj
        }, function (err) {
            console.error('Could not compile sim', err)
        });
    })

}


/**
 * Given an array of (potentially null) buffers, delete the non-null buffers and set their
 * variable in the simulator buffer object to null.
 * NOTE: erase from host immediately, though device may take longer (unobservable)
 */
var resetBuffers = function(simulator, buffers) {
    var validBuffers = buffers.filter(function(val) { return !(!val); });
    if(validBuffers.length == 0) {
        return Q(null);
    }

    // Search for the buffer in the simulator's buffer object, and set it to null there
    validBuffers.forEach(function(buffToDelete) {
        for(var buff in simulator.buffers) {
            if(simulator.buffers.hasOwnProperty(buff) && simulator.buffers[buff] == buffToDelete) {
                simulator.buffers[buff] = null;
            }
        }
    });

    validBuffers.forEach(function(buffToDelete) {
        buffToDelete.delete();
    });
};


/**
 * Set the initial positions of the points in the NBody simulation (curPoints)
 * @param simulator - the simulator object created by SimCL.create()
 * @param {Float32Array} points - a typed array containing two elements for every point, the x
 * position, proceeded by the y position
 *
 * @returns a promise fulfilled by with the given simulator object
 */
function setPoints(simulator, points, pointSizes, pointColors) {
    if(points.length < 1) {
        throw new Error("The points buffer is empty");
    }
    if(points.length % simulator.elementsPerPoint !== 0) {
        throw new Error("The points buffer is an invalid size (must be a multiple of " + simulator.elementsPerPoint + ")");
    }

    if (!pointSizes) {
        pointSizes = new Uint8Array(points.length/simulator.elementsPerPoint);
        for (var i = 0; i < points.length/simulator.elementsPerPoint; i++) {
            pointSizes[i] = 4;
        }
    }

    if (!pointColors) {
        pointColors = new Uint32Array(points.length/simulator.elementsPerPoint);
        for (var i = 0; i < points.length/simulator.elementsPerPoint; i++) {
            pointColors[i] = (255 << 24) | (102 << 16) | (102 << 8) | 255;
        }
    }

    simulator.buffersLocal.pointSizes = pointSizes;
    simulator.buffersLocal.pointColors = pointColors;

    simulator.resetBuffers([
        simulator.buffers.nextPoints,
        simulator.buffers.randValues,
        simulator.buffers.curPoints,
        simulator.buffers.pointSizes,
        simulator.buffers.pointColors])

    simulator.numPoints = points.length / simulator.elementsPerPoint;
    simulator.renderer.numPoints = simulator.numPoints;

    debug("Number of points in simulation: %d", simulator.renderer.numPoints);

    // Create buffers and write initial data to them, then set
    return Q.all([
        simulator.renderer.createBuffer(points, 'curPoints'),
        simulator.renderer.createBuffer(pointSizes, 'pointSizes'),
        simulator.renderer.createBuffer(pointColors, 'pointColors'),
        simulator.cl.createBuffer(points.byteLength, 'nextPoints'),
        simulator.cl.createBuffer(randLength * simulator.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT,
            'randValues')])
    .spread(function(pointsVBO, pointSizesVBO, pointColorsVBO, nextPointsBuffer, randBuffer) {
        debug('Created most of the points');
        simulator.buffers.nextPoints = nextPointsBuffer;

        simulator.renderer.buffers.curPoints = pointsVBO;
        simulator.renderer.buffers.pointSizes = pointSizesVBO;
        simulator.renderer.buffers.pointColors = pointColorsVBO;

        // Generate an array of random values we will write to the randValues buffer
        simulator.buffers.randValues = randBuffer;
        var rands = new Float32Array(randLength * simulator.elementsPerPoint);
        for(var i = 0; i < rands.length; i++) {
            rands[i] = Math.random();
        }

        return Q.all([
            simulator.cl.createBufferGL(pointsVBO, 'curPoints'),
            simulator.buffers.randValues.write(rands)]);
    })
    .spread(function(pointsBuf, randValues) {
        simulator.buffers.curPoints = pointsBuf;
    })
    .then(gaussSeidel.setPoints.bind('', simulator))
    .then(forceAtlas.setPoints.bind('', simulator))
    .then(edgeBundling.setPoints.bind('', simulator))
    .then(function () {
        return simulator;
    });
}


/**
 * Sets the edge list for the graph
 *
 * @param simulator - the simulator object to set the edges for
 * @param {edgesTyped: {Uint32Array}, numWorkItems: uint, workItemsTyped: {Uint32Array} } forwardsEdges -
 *        Edge list as represented in input graph.
 *        edgesTyped is buffer where every two items contain the index of the source
 *        node for an edge, and the index of the target node of the edge.
 *        workItems is a buffer where every two items encode information needed by
 *         one thread: the index of the first edge it should process, and the number of
 *         consecutive edges it should process in total.
 * @param {edgesTyped: {Uint32Array}, numWorkItems: uint, workItemsTypes: {Uint32Array} } backwardsEdges -
 *        Same as forwardsEdges, except reverse edge src/dst and redefine workItems/numWorkItems corresondingly.
 * @param {Float32Array} midPoints - dense array of control points (packed sequence of nDim structs)
 * @param {Uint32Array} edgeColors - dense array of edge start and end colors
 * @returns {Q.promise} a promise for the simulator object
 */
function setEdges(simulator, forwardsEdges, backwardsEdges, midPoints, edgeColors) {
    //edges, workItems
    var elementsPerEdge = 2; // The number of elements in the edges buffer per spring
    var elementsPerWorkItem = 2;

    if(forwardsEdges.edgesTyped.length < 1) {
        throw new Error("The edge buffer is empty");
    }
    if(forwardsEdges.edgesTyped.length % elementsPerEdge !== 0) {
        throw new Error("The edge buffer size is invalid (must be a multiple of " + elementsPerEdge + ")");
    }
    if(forwardsEdges.workItemsTyped.length < 1) {
        throw new Error("The work items buffer is empty");
    }
    if(forwardsEdges.workItemsTyped.length % elementsPerWorkItem !== 0) {
        throw new Error("The work item buffer size is invalid (must be a multiple of " + elementsPerWorkItem + ")");
    }

    if (!edgeColors) {
        edgeColors = new Uint32Array(forwardsEdges.edgesTyped.length);
        for (var i = 0; i < edgeColors.length; i++) {
            var nodeIdx = forwardsEdges.edgesTyped[i];
            edgeColors[i] = simulator.buffersLocal.pointColors[nodeIdx];
        }
    }
    simulator.buffersLocal.edgeColors = edgeColors;

    simulator.resetBuffers([
        simulator.buffers.forwardsEdges,
        simulator.buffers.forwardsDegrees,
        simulator.buffers.forwardsWorkItems,
        simulator.buffers.backwardsEdges,
        simulator.buffers.backwardsDegrees,
        simulator.buffers.backwardsWorkItems,
        simulator.buffers.springsPos,
        simulator.buffers.midSpringsPos,
        simulator.buffers.midSpringsColorCoord]);

    return Q().then(function() {
        // Init constant
        simulator.numEdges = forwardsEdges.edgesTyped.length / elementsPerEdge;
        debug("Number of edges in simulation: %d", simulator.numEdges);

        simulator.renderer.numEdges = simulator.numEdges;
        simulator.numForwardsWorkItems = forwardsEdges.workItemsTyped.length / elementsPerWorkItem;
        simulator.numBackwardsWorkItems = backwardsEdges.workItemsTyped.length / elementsPerWorkItem;

        simulator.numMidPoints = midPoints.length / simulator.elementsPerPoint;
        simulator.renderer.numMidPoints = simulator.numMidPoints;
        simulator.numMidEdges = simulator.numMidPoints + simulator.numEdges;
        simulator.renderer.numMidEdges = simulator.numMidEdges;

        // Create buffers
        return Q.all([
            simulator.cl.createBuffer(forwardsEdges.edgesTyped.byteLength, 'forwardsEdges'),
            simulator.cl.createBuffer(forwardsEdges.degreesTyped.byteLength, 'forwardsDegrees'),
            simulator.cl.createBuffer(forwardsEdges.workItemsTyped.byteLength, 'forwardsWorkItems'),
            simulator.cl.createBuffer(backwardsEdges.edgesTyped.byteLength, 'backwardsEdges'),
            simulator.cl.createBuffer(backwardsEdges.degreesTyped.byteLength, 'backwardsDegrees'),
            simulator.cl.createBuffer(backwardsEdges.workItemsTyped.byteLength, 'backwardsWorkItems'),
            simulator.cl.createBuffer(midPoints.byteLength, 'nextMidPoints'),
            simulator.renderer.createBuffer(simulator.numEdges * elementsPerEdge * simulator.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 'springs'),
            simulator.renderer.createBuffer(midPoints, 'curMidPoints'),
            simulator.renderer.createBuffer(simulator.numMidEdges * elementsPerEdge * simulator.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 'midSprings'),
            simulator.renderer.createBuffer(simulator.numMidEdges * elementsPerEdge * simulator.elementsPerPoint * Float32Array.BYTES_PER_ELEMENT, 'midSpringsColorCoord')]);
    })
    .spread(function(forwardsEdgesBuffer, forwardsDegreesBuffer, forwardsWorkItemsBuffer,
                     backwardsEdgesBuffer, backwardsDegreesBuffer, backwardsWorkItemsBuffer,
                     nextMidPointsBuffer, springsVBO,
                     midPointsVBO, midSpringsVBO, midSpringsColorCoordVBO) {
        // Bind buffers
        simulator.buffers.forwardsEdges = forwardsEdgesBuffer;
        simulator.buffers.forwardsDegrees = forwardsDegreesBuffer;
        simulator.buffers.forwardsWorkItems = forwardsWorkItemsBuffer;
        simulator.buffers.backwardsEdges = backwardsEdgesBuffer;
        simulator.buffers.backwardsDegrees = backwardsDegreesBuffer;
        simulator.buffers.backwardsWorkItems = backwardsWorkItemsBuffer;
        simulator.buffers.nextMidPoints = nextMidPointsBuffer;

        simulator.renderer.buffers.springs = springsVBO;
        simulator.renderer.buffers.curMidPoints = midPointsVBO;
        simulator.renderer.buffers.midSprings = midSpringsVBO;
        simulator.renderer.buffers.midSpringsColorCoord = midSpringsColorCoordVBO;

        return Q.all([
            simulator.cl.createBufferGL(springsVBO, 'springsPos'),
            simulator.cl.createBufferGL(midPointsVBO, 'curMidPoints'),
            simulator.cl.createBufferGL(midSpringsVBO, 'midSpringsPos'),
            simulator.cl.createBufferGL(midSpringsColorCoordVBO, 'midSpringsColorCoord'),
            simulator.buffers.forwardsEdges.write(forwardsEdges.edgesTyped),
            simulator.buffers.forwardsDegrees.write(forwardsEdges.degreesTyped),
            simulator.buffers.forwardsWorkItems.write(forwardsEdges.workItemsTyped),
            simulator.buffers.backwardsEdges.write(backwardsEdges.edgesTyped),
            simulator.buffers.backwardsDegrees.write(backwardsEdges.degreesTyped),
            simulator.buffers.backwardsWorkItems.write(backwardsEdges.workItemsTyped),
        ]);
    })
    .spread(function(springsBuffer, midPointsBuf, midSpringsBuffer, midSpringsColorCoordBuffer) {
        simulator.buffers.springsPos = springsBuffer;
        simulator.buffers.midSpringsPos = midSpringsBuffer;
        simulator.buffers.curMidPoints = midPointsBuf;
        simulator.buffers.midSpringsColorCoord = midSpringsColorCoordBuffer;
    })
    .then(function () {
        return Q.all(
            layoutAlgorithms
                .map(function (alg) {
                    return alg.setEdges(simulator);
                }));
    })
    .then(function () {
        return simulator;
    })
    .then(_.identity, function (err) {
        console.error('bad set edges', err);
        console.error(err.stack);
    });
}


function setLocked(simulator, cfg) {
    cfg = cfg || {};
    util.extend(simulator.locked, cfg);
}



function setPhysics(simulator, cfg) {
    // TODO: Instead of setting these kernel args immediately, we should make the physics values
    // properties of the simulator object, and just change those properties. Then, when we run
    // the kernels, we set the arg using the object property (the same way we set stepNumber.)

    cfg = cfg || {};
    for (var i in cfg) {
        simulator.physics[i] = cfg[i];
    }

    debug("Updating simulation physics to %o (new: %o)", simulator.physics, cfg);

    layoutAlgorithms.forEach(function (algorithm) {
        algorithm.setPhysics(simulator, cfg);
    });
}


//input positions: curPoints
//output positions: nextPoints
function tick(simulator, stepNumber) {

    // If there are no points in the graph, don't run the simulation
    if(simulator.numPoints < 1) {
        return Q(simulator);
    }

    //run each algorithm to completion before calling next
    var tickAllHelper = function (remainingAlgorithms) {
        if (!remainingAlgorithms.length) return;
        var algorithm = remainingAlgorithms.shift();
        return Q()
            .then(function () {
                return algorithm.tick(simulator, stepNumber);
            })
            .then(function () {
                return tickAllHelper(remainingAlgorithms);
            });
    };

    var res = Q()
    .then(function () { return tickAllHelper(layoutAlgorithms.slice(0)); })
    .then(function() {
        simulator.cl.queue.finish();
        simulator.renderer.gl.finish();
    });

    res.then(function () {}, function (err) {
        console.error('tick fail!', err, (err||{}).stack);
    })

    return res;
}


module.exports = {
    "create": create,
    "setLocked": setLocked,
    "setPoints": setPoints,
    "setEdges": setEdges,
    "tick": tick
};

},{"./cl.js":5,"./edgebundling.js":7,"./forceatlas.js":8,"./gaussseidel.js":9,"./util.js":16,"debug":17,"node-webcl":"fWqvvE","q":22,"underscore":23}],4:[function(_dereq_,module,exports){
"use strict";
var exports = {};

// A module-level list of all the event listeners
var listeners = {};


exports.listen = function(event, callback) {
    var eventListeners = listeners[event] || [];
    eventListeners.push(callback);
    listeners[event] = eventListeners;
};


// TODO: add 'remove' function


exports.fire = function(event, args) {
    var eventListeners = listeners[event] || [];

    for(var i in eventListeners) {
        eventListeners[i].call(this, args);
    }
};


module.exports = exports;

},{}],5:[function(_dereq_,module,exports){
"use strict";

var Q = _dereq_('q');
var events = _dereq_('./SimpleEvents.js');
var _ = _dereq_('underscore');
var debug = _dereq_("debug")("N-body:cl");
var util = _dereq_('util');

if (typeof(window) == 'undefined') {
    var webcl = _dereq_('node-webcl');
    console.debug = console.log;
} else if (typeof(webcl) == 'undefined') {
    var webcl = window.webcl;
}

var DEVICE_TYPE = webcl.DEVICE_TYPE_GPU;


var getClContext;
if (typeof(window) == 'undefined') {
    debug("Initializing node-webcl flavored cl.js functions");


    var createContext = function(webcl, gl, platform, devices) {
        return webcl.createContext({
            devices: devices,
            shareGroup: gl,
            platform: platform
        });
    };


    var createCL = function(webcl, gl) {
        if (typeof webcl === "undefined") {
            throw new Error("WebCL does not appear to be supported in your browser");
        } else if (webcl === null) {
            throw new Error("Can't access WebCL object");
        }

        var platforms = webcl.getPlatforms();
        if (platforms.length === 0) {
            throw new Error("Can't find any WebCL platforms");
        }
        debug("Found %d OpenCL platforms; using first", platforms.length);
        var platform = platforms[0];

        debug("Devices found on platform: %d", platform.getDevices(DEVICE_TYPE).length);
        var devices = platform.getDevices(DEVICE_TYPE).map(function(d) {
            debug("Found device %s", util.inspect(d, {depth: null, showHidden: true, colors: true}));
            var workItems = d.getInfo(webcl.DEVICE_MAX_WORK_ITEM_SIZES);
            return {
                device: d,
                computeUnits: workItems.reduce(function(a, b) {
                    return a * b;
                })
            };
        });
        devices.sort(function(a, b) {
            var nameA = a.device.getInfo(webcl.DEVICE_VENDOR);
            var nameB = b.device.getInfo(webcl.DEVICE_VENDOR);
            var vendor = "NVIDIA";
            if (nameA.indexOf(vendor) != -1 && nameB.indexOf(vendor) == -1) {
                return -1;
            } else if (nameB.indexOf(vendor) != -1 && nameA.indexOf(vendor) == -1) {
                return 1;
            } else {
                return b.computeUnits - a.computeUnits;
            }
        });
        var deviceWrapper;
        var err = devices.length ? null : new Error("No WebCL devices of specified type (" + DEVICE_TYPE + ") found");
        for (var i = 0; i < devices.length; i++) {
            var wrapped = devices[i];
            try {
                if (wrapped.device.getInfo(webcl.DEVICE_EXTENSIONS).search(/gl.sharing/i) == -1) {
                    debug("Skipping device %d due to no sharing. %o", i, wrapped);
                    continue;
                }
                wrapped.context = createContext(webcl, gl, platform, [ wrapped.device ]);
                if (wrapped.context === null) {
                    throw new Error("Error creating WebCL context");
                }
                wrapped.queue = wrapped.context.createCommandQueue(wrapped.device, 0);
            } catch (e) {
                debug("Skipping device %d due to error %o. %o", i, e, wrapped);
                err = e;
                continue;
            }
            deviceWrapper = wrapped;
            break;
        }
        if (!deviceWrapper) {
            throw err;
        }
        debug("Device set. Vendor: %s. Device: %o", deviceWrapper.device.getInfo(webcl.DEVICE_VENDOR), deviceWrapper);

        var res = {
            gl: gl,
            cl: webcl,
            context: deviceWrapper.context,
            device: deviceWrapper.device,
            queue: deviceWrapper.queue,
            maxThreads: deviceWrapper.device.getInfo(webcl.DEVICE_MAX_WORK_GROUP_SIZE),
            numCores: deviceWrapper.device.getInfo(webcl.DEVICE_MAX_COMPUTE_UNITS)
        };

        //FIXME ??
        res.compile = compile.bind(this, res);
        res.createBuffer = createBuffer.bind(this, res);
        res.createBufferGL = createBufferGL.bind(this, res);

        return res;

    };
    getClContext = function (gl) {
        return createCL(webcl, gl);
    };
} else {
    getClContext = function (gl) {
        if (typeof(webcl) === "undefined") {
            throw new Error("WebCL does not appear to be supported in your browser");
        }

        var cl = webcl;
        if (cl === null) {
            throw new Error("Can't access WebCL object");
        }

        var platforms = cl.getPlatforms();
        if (platforms.length === 0) {
            throw new Error("Can't find any WebCL platforms");
        }
        var platform = platforms[0];

        //sort by number of compute units and use first non-failing device
        var devices = platform.getDevices(DEVICE_TYPE).map(function (d) {

            function typeToString (v) {
                return v === 2 ? 'CPU'
                    : v === 4 ? 'GPU'
                    : v === 8 ? 'ACCELERATOR'
                    : ('unknown type: ' + v);
            }

            var workItems = d.getInfo(cl.DEVICE_MAX_WORK_ITEM_SIZES);

            return {
                device: d,
                DEVICE_TYPE: typeToString(d.getInfo(cl.DEVICE_TYPE)),
                DEVICE_MAX_WORK_ITEM_SIZES: workItems,
                computeUnits: [].slice.call(workItems, 0).reduce(function (a, b) { return a * b; })
            };
        });
        devices.sort(function (a, b) { return b.computeUnits - a.computeUnits; });

        var deviceWrapper;
        var err = devices.length ?
            null : new Error("No WebCL devices of specified type (" + DEVICE_TYPE + ") found");
        for (var i = 0; i < devices.length; i++) {
            var wrapped = devices[i];
            try {
                wrapped.context = _createContext(cl, gl, platform, [wrapped.device]);
                if (wrapped.context === null) {
                    throw new Error("Error creating WebCL context");
                }
                wrapped.device.enableExtension("KHR_gl_sharing");
                wrapped.queue = wrapped.context.createCommandQueue(wrapped.device);
            } catch (e) {
                debug("Skipping device %d due to error %o. %o", i, e, wrapped);
                err = e;
                continue;
            }
            deviceWrapper = wrapped;
            break;
        }
        if (!deviceWrapper) {
            throw err;
        }

        debug("Device set. Device: %o", deviceWrapper);

        var clObj = {
            "gl": gl,
            "cl": cl,
            "context": deviceWrapper.context,
            "device": deviceWrapper.device,
            "queue": deviceWrapper.queue,
            "maxThreads": deviceWrapper.device.getInfo(cl.DEVICE_MAX_WORK_GROUP_SIZE),
            "numCores": deviceWrapper.device.getInfo(cl.DEVICE_MAX_COMPUTE_UNITS)
        };

        clObj.compile = compile.bind(this, clObj);
        clObj.createBuffer = createBuffer.bind(this, clObj);
        clObj.createBufferGL = createBufferGL.bind(this, clObj);

        return clObj;
    };
}






// TODO: in call() and setargs(), we currently requires a `argTypes` argument becuase older WebCL
// versions require us to pass in the type of kernel args. However, current versions do not. We want
// to keep this API as close to the current WebCL spec as possible. Therefore, we should not require
// that argument, even on old versions. Instead, we should query the kernel for the types of each
// argument and fill in that information automatically, when required by old WebCL versions.

var create = Q.promised(getClContext);


// This is a separate function from create() in order to allow polyfill() to override it on
// older WebCL platforms, which have a different way of creating a context and enabling CL-GL
// sharing.
var _createContext = function(cl, gl, platform, devices) {
    cl.enableExtension("KHR_gl_sharing");
    return cl.createContext(gl, devices);
};

/**
 * Compile the WebCL program source and return the kernel(s) requested
 *
 * @param cl - the cljs instance object
 * @param {string} source - the source code of the WebCL program you wish to compile
 * @param {(string|string[])} kernels - the kernel name(s) you wish to get from the compiled program
 *
 * @returns {(kernel|Object.<string, kernel>)} If kernels was a single kernel name, returns a
 *          single kernel. If kernels was an array of kernel names, returns an object with each
 *          kernel name mapped to its kernel object.
 */
var compile = Q.promised(function (cl, source, kernels) {
    var t0 = new Date().getTime();
    debug("Compiling kernels");

    try {
        var program = cl.context.createProgram("#define NODECL\n\n" + source);
        program.build([cl.device]);

        if (typeof kernels === "string") {

            debug('    Compiling unknown kernel');

            var kernelObj = {};
            kernelObj.name = undefined;
            kernelObj.kernel = program.createKernel(kernels);
            kernelObj.cl = cl;
            kernelObj.call = call.bind(this, kernelObj);
            kernelObj.setArgs = setArgs.bind(this, kernelObj);

            return kernelObj;
        } else {
            var kernelObjs = {};

            for(var i = 0; i < kernels.length; i++) {
                var kernelName = kernels[i];
                var kernelObj = {};

                debug('    Compiling ', kernelName);


                kernelObj.name = kernelName;
                kernelObj.kernel = program.createKernel(kernelName);
                kernelObj.cl = cl;
                kernelObj.call = call.bind(this, kernelObj);
                kernelObj.setArgs = setArgs.bind(this, kernelObj);

                kernelObjs[kernelName] = kernelObj;
            }

            debug('  Compiled kernels in %d ms.', new Date().getTime() - t0);

            return kernelObjs;
        }
    } catch (e) {
        console.error('Kernel compilation error:', e.stack);
        console.error(kernels);
        throw e;
    }
});



var acquire = function (buffers) {
    return Q.all(
        (buffers||[]).map(function (buffer) {
            return buffer.acquire();
        }));
};

var release = function (buffers) {
    return Q.all(
        (buffers||[]).map(function (buffer) {
            return buffer.release();
        }));
};

// Executes the specified kernel, with `threads` number of threads, acquiring/releasing any needed resources
var call = Q.promised(function (kernel, threads, buffers) {
    return acquire(buffers)
        .then(function () {
            var workgroupSize = new Int32Array([threads]);
            kernel.cl.queue.enqueueNDRangeKernel(
                kernel.kernel,
                workgroupSize.length,
                [],
                workgroupSize,
                []);
        })
        .then(release.bind('', buffers))
        .then(function () {
            kernel.cl.queue.finish();
        }).then(_.constant(kernel));
});


var setArgs = function (kernel, args, argTypes) {
    var t0 = new Date().getTime();
    for (var i = 0; i < args.length; i++) {
        if(args[i] !== null) {
            kernel.kernel.setArg(i, args[i]);
        }
    }
    debug('Set kernel args (%d ms)', new Date().getTime() - t0);
    return kernel;
};


var createBuffer = Q.promised(function createBuffer(cl, size, name) {
    debug("Creating buffer %s", name);

    var buffer = cl.context.createBuffer(cl.cl.MEM_READ_WRITE, size);
    if (buffer === null) {
        throw new Error("Could not create the WebCL buffer");
    } else {
        var bufObj = {
            "name": name,
            "buffer": buffer,
            "cl": cl,
            "size": size,
            "acquire": function() {
                return Q(); },
            "release": function() {
                return Q(); }
        };
        bufObj.delete = Q.promised(function() {
            buffer.release();
            bufObj.size = 0;
            return null;
        });
        bufObj.write = write.bind(this, bufObj);
        bufObj.read = read.bind(this, bufObj);
        bufObj.copyInto = copyBuffer.bind(this, cl, bufObj);
        return bufObj;
    }
});


// TODO: If we call buffer.acquire() twice without calling buffer.release(), it should have no
// effect.
var createBufferGL = Q.promised(function (cl, vbo, name) {

    var t0 = new Date().getTime();

    debug("Creating buffer %s from GL buffer", name);

    var buffer = cl.context.createFromGLBuffer(cl.cl.MEM_READ_WRITE, vbo.buffer);
    if (buffer === null) {
        throw new Error("Could not create WebCL buffer from WebGL buffer");
    } else {
        if (!buffer.getInfo) {
            debug("WARNING: no getInfo() available on buffer %s", name);
        }
        var bufObj = {
            "name": name,
            "buffer": buffer,
            "cl": cl,
            "size": buffer.getInfo ? buffer.getInfo(cl.cl.MEM_SIZE) : vbo.len,
            "acquire": Q.promised(function() {
                cl.gl.finish();
                cl.queue.enqueueAcquireGLObjects([buffer]);

            }),
            "release": Q.promised(function() {
                cl.queue.enqueueReleaseGLObjects([buffer]);
                cl.queue.finish();
                cl.gl.finish();
            })
        };
        bufObj.delete = Q.promised(function() {
            return bufObj.release()
            .then(function() {
                bufObj.release();
                bufObj.size = 0;
                return null;
            });
        });
        bufObj.write = write.bind(this, bufObj);
        bufObj.read = read.bind(this, bufObj);
        bufObj.copyInto = copyBuffer.bind(this, cl, bufObj);

        debug("  Created buffer in %d ms", new Date().getTime() - t0);

        return bufObj;
    }
});


var copyBuffer = Q.promised(function (cl, source, destination) {
    debug("Copying buffer. Source: %s (%d bytes), destination %s (%d bytes)",
        source.name, source.size, destination.name, destination.size);
    return acquire([source, destination])
        .then(function () {
            cl.queue.enqueueCopyBuffer(source.buffer, destination.buffer, 0, 0, Math.min(source.size, destination.size));
        })
        .then(function () {
            cl.queue.finish();
        })
        .then(release.bind(null, [source, destination]));
});


var write = Q.promised(function write(buffer, data) {
    debug("Writing to buffer %s", buffer.name);
    var t0 = new Date().getTime();
    return buffer.acquire()
        .then(function () {
            buffer.cl.queue.enqueueWriteBuffer(buffer.buffer, true, 0, data.byteLength, data);
            return buffer.release();
        })
        .then(function() {
            buffer.cl.queue.finish();
            debug("  Finished buffer %s write in %d ms", buffer.name, new Date().getTime() - t0);
            return buffer;
        });
});


var read = Q.promised(function (buffer, target) {
    return buffer.acquire()
        .then(function() {
            var copySize = Math.min(buffer.size, target.length * target.BYTES_PER_ELEMENT);
            buffer.cl.queue.enqueueReadBuffer(buffer.buffer, true, 0, copySize, target);
            return buffer.release();
        })
        .then(function() {
            return buffer;
        },
        function(err) {
            console.error("Read error for buffer " + buffer.name + ":", err);
        });
});


// Detects the WebCL platform we're running on, and modifies this module as needed.
// Returns true if the the platform is out-of-date and needed to be polyfilled, and false if
// the platform is up-to-date and no modification was needed.
function polyfill() {
    // Detect if we're running on a current WebCL version
    if(typeof(window) != 'undefined' && typeof webcl.enableExtension == "function") {
        // If so, don't do anything
        return false;
    }

    debug("Detected old WebCL platform. Modifying functions to support it.");


    _createContext = function(cl, gl, platform, devices) {
        if (webcl.type) {
            return webcl.createContext({
                devices: devices,
                shareGroup: gl,
                platform: platform});
        } else {
            var extension = cl.getExtension("KHR_GL_SHARING");
            if (extension === null) {
                throw new Error("Could not create a shared CL/GL context using the WebCL extension system");
            }
            return extension.createContext({
                platform: platform,
                devices: devices,
                deviceType: DEVICE_TYPE,
                sharedContext: null
            });
        }

    }


    call = Q.promised(function (kernel, threads, buffers) {
        //kernel.cl.queue.finish();

        return acquire(buffers)
            .then(function () {

                var workgroupSize = typeof(window) == 'undefined' ? [threads] : new Int32Array([threads]);
                if (webcl.type) {
                    kernel.cl.queue.enqueueNDRangeKernel(kernel.kernel, null, [threads], null);
                } else {
                    kernel.cl.queue.enqueueNDRangeKernel(kernel.kernel, null, workgroupSize, null);
                }
                return release(buffers);
            })
            .then(function () {
                kernel.cl.queue.finish();
                return kernel;
            });
    });

    setArgs = function (kernel, args, argTypes) {
        argTypes = argTypes || [];
        var t0 = new Date().getTime();
        try {
            for (var i = 0; i < args.length; i++) {
                if (args[i]) {
                    kernel.kernel.setArg(i, args[i].length ? args[i][0] : args[i], argTypes[i] || undefined);
                }
            }
        } catch (e) {
            console.error('Error setting kernel args (in polyfilled setArgs())::', kernel.name, '::', e, e.stack);
            throw new Error(e);
        }
        return kernel;
    };

    if (typeof WebCLKernelArgumentTypes == 'undefined') {
        var WebCLKernelArgumentTypes = webcl.type;
    }

    types = {
        char_t: WebCLKernelArgumentTypes.CHAR,
        double_t: WebCLKernelArgumentTypes.DOUBLE,
        float_t: WebCLKernelArgumentTypes.FLOAT,
        half_t: WebCLKernelArgumentTypes.HALF,
        int_t: WebCLKernelArgumentTypes.INT,
        local_t: WebCLKernelArgumentTypes.LOCAL_MEMORY_SIZE,
        long_t: WebCLKernelArgumentTypes.LONG,
        short_t: WebCLKernelArgumentTypes.SHORT,
        uchar_t: WebCLKernelArgumentTypes.UCHAR,
        uint_t: WebCLKernelArgumentTypes.UINT,
        ulong_t: WebCLKernelArgumentTypes.ULONG,
        ushort_t: WebCLKernelArgumentTypes.USHORT,
        float2_t: WebCLKernelArgumentTypes.VEC2,
        float3_t: WebCLKernelArgumentTypes.VEC3,
        float4_t: WebCLKernelArgumentTypes.VEC4,
        float8_t: WebCLKernelArgumentTypes.VEC8,
        float16_t: WebCLKernelArgumentTypes.VEC16
    };

    return true;
}
var types = {};
var CURRENT_CL = !polyfill();



module.exports = {
    "acquire": acquire,
    "call": call,
    "compile": compile,
    "create": create,
    "createBuffer": createBuffer,
    "createBufferGL": createBufferGL,
    "release": release,
    "setArgs": setArgs,
    "types": types,
    "write": write,
    "CURRENT_CL": CURRENT_CL
};

},{"./SimpleEvents.js":4,"debug":17,"node-webcl":"fWqvvE","q":22,"underscore":23,"util":31}],6:[function(_dereq_,module,exports){
"use strict";

var debug = _dereq_("debug")("StreamGL:data");

var _ = _dereq_('underscore');

var MatrixLoader = _dereq_('./libs/load.js'),
    kmeans = _dereq_('./libs/kmeans.js'),
    GmlLoader = _dereq_('./loadgml.js');


// Generates `amount` number of random points
function createPoints(amount, dim) {
    // Allocate 2 elements for each point (x, y)
    var points = [];

    for(var i = 0; i < amount; i++) {
        points.push([Math.random() * dim[0], Math.random() * dim[1]]);
    }

    return points;
}


function createEdges(amount, numNodes) {
    var edges = [];
    // This may create duplicate edges. Oh well, for now.
    for(var i = 0; i < amount; i++) {
        var source = (i % numNodes),
            target = (i + 1) % numNodes;

        edges.push([source, target]);
    }

    return edges;
}

function loadRectangle(rows, columns, graph) {
    debug("Loading rectangle", rows, columns);

    var points =
        _.flatten(
            _.range(0, rows)
                .map(function (row) {
                    return _.range(0, columns)
                        .map(function (column) {
                            return [column, row];
                        });
                }),
            true);
    return graph.setPoints(new Float32Array(_.flatten(points)))
        .then(function () {
            return graph.setEdges(new Uint32Array([0,1]));
        });
}

function loadSocioPLT(graph) {
    debug("Loading SocioPLT");

    var data = _dereq_('../../socioplt/generateGraph.js');


    var nodesPerRow = Math.floor(Math.sqrt(data.nodes.length));
    var points =
        data.nodes.map(
            function (_, i) {
                return [i % nodesPerRow, Math.floor(i / nodesPerRow)];
            });
    var pointSizes = new Uint8Array(_.pluck(data.nodes, 'size'));
    var pointColors = new Uint32Array(_.pluck(data.nodes, 'color'));

    //data.edges = [{src: 0, dst: 1}];

    var edges = _.flatten(data.edges.map(function (edge) {
            return [edge.src, edge.dst];
        }));
    var edgeColors = _.flatten(data.edges.map(function (edge) {
            return [edge.color, edge.color];
        }));

        //graph.setVisible({edgeStrength: -10});
        //physicsControls.gravity     ( 0.020083175556898723);
        //physicsControls.edgeStrength( 4.292198241799153);
        //physicsControls.edgeDistance( 0.0000158);



    return graph.setPoints(new Float32Array(_.flatten(points)), pointSizes, pointColors)
        .then(function () {
            return graph.setEdges(
                new Uint32Array(edges),//new Uint32Array(_.flatten(edges).map(function (idx, i) { return idx; })),
                new Uint32Array(edgeColors));
        })
        .then(function () {


            graph.setPhysics({forceAtlas: 0});
            graph.setLocked({
                lockPoints:     false,
                lockEdges:      false,
                lockMidpoints:  true,
                lockMidedges:   true
            });

            graph.setPhysics({
                charge: -0.001,
                gravity: 0.1,
                edgeStrength: 0.001,
                edgeDistance: 0.001
            });


            return graph;
        }, function (err) {
            throw err;
        })
}


function loadGeo(graph, graphFileURI) {

    debug("Loading Geo");

    return MatrixLoader.loadGeo(graphFileURI)
    .then(function(geoData) {
        var processedData = MatrixLoader.processGeo(geoData, 0.3);

        debug("Processed %d/%d nodes/edges", processedData.points.length, processedData.edges.length);

        return graph.setPoints(processedData.points)
            .then(_.constant(processedData))
    })
    .then(function(processedData) {

        var position = function (points, edges) {
            return edges.map(function (pair){
                var start = points[pair[0]];
                var end = points[pair[1]];
                return [start[0], start[1], end[0], end[1]];
            });
        };
        var k = 6; //need to be <= # supported colors, currently 9
        var steps =  50;
        var positions = position(processedData.points, processedData.edges);
        var clusters = kmeans(positions, k, steps); //[ [0--1]_4 ]_k

        return graph
                .setColorMap("test-colormap2.png", {clusters: clusters, points: processedData.points, edges: processedData.edges})
                .then(function () {
                    debug("Setting edges");
                    return graph.setEdges(processedData.edges);
                });
    })
    .then(function() {
        debug("Done setting geo points, edges");
        return graph;
    });
}

function loadGmlJson(graph, path) {

    debug("Loading gml: " + path);

    return GmlLoader.loadGMLJSON(path)
        .then(function (data) {
            var randomPositions = new Float32Array(data.numNodes * 2);
            for (var i = 0; i < data.numNodes * 2; i++) {
                randomPositions[i] = Math.random();
            }
            return graph.setPoints(randomPositions, data.nodes.sizes, data.nodes.colors)
                .then(_.constant(data));
        })
        .then(function (data) {
            return graph.setEdges(data.edgesFlat || data.edges);
        })
        .then(_.constant(graph));
}



/**
 * Populate the data list dropdown menu with available data, and setup actions to load the data
 * when the user selects one of the options.
 *
 * @param clGraph - the NBody graph object created by NBody.create()
 */
function loadDataList(clGraph) {
    // Given a URI of a JSON data index, return an array of objects, with keys for display name,
    // file URI, and data size
    function getDataList(listURI) {
        return MatrixLoader.ls(listURI)
        .then(function (files) {
            var listing = [];

            files.forEach(function (file, i) {
                listing.push({
                    f: file.f,
                    base: file.f.split(/\/|\./)[file.f.split(/\/|\./).length - 3],
                    KB: file.KB,
                    size: file.KB > 1000 ? (Math.round(file.KB / 1000) + " MB") : (file.KB + " KB")
                });
            });

            return listing;
        });
    }

    var dataList = [];

    return getDataList("data/geo.json")
    .then(function(geoList){
        debug("  geolist");
        geoList = geoList.map(function(fileInfo) {
            fileInfo["base"] = fileInfo.base + ".geo";
            fileInfo["loader"] = loadGeo;
            return fileInfo;
        });

        dataList = dataList.concat(geoList);
    })
    .then(function () {
        debug("  socioPLT");
        dataList.push({
            base: "socioPLT.json",
            loader: loadSocioPLT,
            f: "socioPLT.json",
            KB: "??",
            size: "??"
       });
    })
    .then(function () {
        debug("  rectangle");
        dataList.push({
            base: "rectangle",
            loader: loadRectangle.bind('', 100, 100),
            f: "??",
            KB: "??",
            size: "??"
        });
    })
    .then(function () {
        debug("  gml list");
        var gmlList =
            GmlLoader.ls()
                .map(function (path) {
                    var name = path.split('/')[path.split('/').length - 1];
                    var kb =
                        4
                        * (parseInt(name.split('_')[1].slice(1)) * 5
                            + parseInt(name.split('_')[2].slice(1)) * 2)
                        / 1000; //
                    return {
                        f: path,
                        KB: kb,
                        size: kb > 1000 ? (Math.round(kb / 1000) + " MB") : (kb + " KB"),
                        base: name,
                        loader: loadGmlJson
                    };
                });
        dataList = dataList.concat(gmlList);
    })
    .then(function () {
        return getDataList("data/matrices.binary.json");
    })
    .then(function(matrixList){
        debug("  matrixlist");
        matrixList = matrixList.map(function(fileInfo) {
            fileInfo["base"] = fileInfo.base + ".mtx";
            fileInfo["loader"] = loadMatrix;
            return fileInfo;
        });

        dataList = dataList.concat(matrixList);

        return dataList;
    });
}


/**
 * Loads the matrix data at the given URI into the NBody graph.
 */
function loadMatrix(graph, graphFileURI) {
    var graphFile;

    debug("Loading file %s", graphFileURI);

    return MatrixLoader.loadBinary(graphFileURI)
    .then(function (v) {
        graphFile = v;
        if (typeof($) != 'undefined') {
            $('#filenodes').text('Nodes: ' + v.numNodes);
            $('#fileedges').text('Edges: ' + v.numEdges);
        }

        var points = createPoints(graphFile.numNodes, graph.dimensions);

        return graph.setPoints(points);
    })
    .then(function() {
        return graph.setEdges(graphFile.edges);
    })
    .then(function() {
        return graph;
    });
}




module.exports = {
    createPoints: createPoints,
    createEdges: createEdges,
    loadGeo: loadGeo,
    loadDataList: loadDataList,
    loadRectangle: loadRectangle
};

},{"../../socioplt/generateGraph.js":24,"./libs/kmeans.js":11,"./libs/load.js":12,"./loadgml.js":14,"debug":17,"underscore":23}],7:[function(_dereq_,module,exports){

var _ = _dereq_('underscore'),
    Q = _dereq_('q');



var cljs = _dereq_('./cl.js');


if (typeof(window) == 'undefined') {
    var webcl = _dereq_('node-webcl');
} else if (typeof(webcl) == 'undefined') {
    var webcl = window.webcl;
}


module.exports = {

    kernelNames: ["gaussSeidelMidpoints", "gaussSeidelMidsprings"],

    setPhysics: function (simulator, cfg) {

        if(cfg.hasOwnProperty('charge') || cfg.hasOwnProperty('gravity')) {
            var charge = cfg.hasOwnProperty('charge') ? (webcl.type ? [cfg.charge] : new Float32Array([cfg.charge])) : null;
            var charge_t = cfg.hasOwnProperty('charge') ? cljs.types.float_t : null;

            var gravity = cfg.hasOwnProperty('gravity') ? (webcl.type ? [cfg.gravity] : new Float32Array([cfg.gravity])) : null;
            var gravity_t = cfg.hasOwnProperty('gravity') ? cljs.types.float_t : null;

            simulator.kernels.gaussSeidelMidpoints.setArgs(
                [null, null, null, null, null, null, null, charge, gravity, null, null],
                [null, null, null, null, null, null, null, charge_t, gravity_t, null, null]);

        }

        if(cfg.hasOwnProperty('edgeDistance') || cfg.hasOwnProperty('edgeStrength')) {
            var edgeDistance = cfg.hasOwnProperty('edgeDistance') ? (webcl.type ? [cfg.edgeDistance] : new Float32Array([cfg.edgeDistance])) : null;
            var edgeDistance_t = cfg.hasOwnProperty('edgeDistance') ? cljs.types.float_t : null;

            var edgeStrength = cfg.hasOwnProperty('edgeStrength') ? (webcl.type ? [cfg.edgeStrength] : new Float32Array([cfg.edgeStrength])) : null;
            var edgeStrength_t = cfg.hasOwnProperty('edgeStrength') ? cljs.types.float_t : null;

            simulator.kernels.gaussSeidelMidsprings.setArgs(
                // 0   1     2     3     4     5     6     7     8               9               10
                [null, null, null, null, null, null, null, null, edgeStrength,   edgeDistance,   null],
                [null, null, null, null, null, null, null, null, edgeStrength_t, edgeDistance_t, null]);
        }

    },

    setPoints: _.identity,

    setEdges: function (simulator) {

        var localPosSize =
            Math.min(simulator.cl.maxThreads, simulator.numMidPoints)
            * simulator.elementsPerPoint
            * Float32Array.BYTES_PER_ELEMENT;

        simulator.kernels.gaussSeidelMidpoints.setArgs(
            [
                webcl.type ? [simulator.numMidPoints] : new Uint32Array([simulator.numMidPoints]),
                webcl.type ? [simulator.numSplits] : new Uint32Array([simulator.numSplits]),
                simulator.buffers.curMidPoints.buffer,
                simulator.buffers.nextMidPoints.buffer,

                webcl.type ? [localPosSize] : new Uint32Array([localPosSize]),

                webcl.type ? [simulator.dimensions[0]] : new Float32Array([simulator.dimensions[0]]),
                webcl.type ? [simulator.dimensions[1]] : new Float32Array([simulator.dimensions[1]]),
                webcl.type ? [-0.00001] : new Float32Array([-0.00001]),
                webcl.type ? [0.2] : new Float32Array([0.2]),

                simulator.buffers.randValues.buffer,
                webcl.type ? [0] : new Uint32Array([0])],
            webcl.type ? [
                webcl.type.UINT, webcl.type.UINT, null, null,
                webcl.type.LOCAL_MEMORY_SIZE, webcl.type.FLOAT, webcl.type.FLOAT, webcl.type.FLOAT,webcl.type.FLOAT,
                null, webcl.type.UINT] : null);

        simulator.kernels.gaussSeidelMidsprings.setArgs([
            webcl.type ? [simulator.numSplits] : new Uint32Array([simulator.numSplits]),        // 0:
            simulator.buffers.forwardsEdges.buffer,        // 1: only need one direction as guaranteed to be chains
            simulator.buffers.forwardsWorkItems.buffer,    // 2:
            simulator.buffers.curPoints.buffer,            // 3:
            simulator.buffers.nextMidPoints.buffer,        // 4:
            simulator.buffers.curMidPoints.buffer,         // 5:
            simulator.buffers.midSpringsPos.buffer,        // 6:
            simulator.buffers.midSpringsColorCoord.buffer, // 7:
            webcl.type ? [1.0] : new Float32Array([1.0]),  // 8:
            webcl.type ? [0.1] : new Float32Array([0.1]),  // 9:
            null
        ],
            webcl.type ? [
                webcl.type.UINT, null, null, null, null, null, null, null,
                webcl.type.FLOAT, webcl.type.FLOAT, /*webcl.type.UINT*/null
            ] : null);
    },

    tick: function (simulator, stepNumber) {

        return Q()
        .then(function () {
            if (simulator.locked.lockMidpoints) {
                return simulator.buffers.curMidPoints.copyInto(simulator.buffers.nextMidPoints);
            } else {

                var resources = [
                    simulator.buffers.curMidPoints,
                    simulator.buffers.nextMidPoints,
                    simulator.buffers.midSpringsColorCoord];

                simulator.kernels.gaussSeidelMidpoints.setArgs(
                    [null, null, null, null, null, null, null, null, null, null, webcl.type ? [stepNumber] : new Uint32Array([stepNumber])],
                    [null, null, null, null, null, null, null, null, null, null, cljs.types.uint_t]);

                return simulator.kernels.gaussSeidelMidpoints.call(simulator.numMidPoints, resources);
            }
        })
        .then(function () {
            if (simulator.numEdges > 0 && !simulator.locked.lockMidedges) {
                var resources = [
                    simulator.buffers.forwardsEdges,
                    simulator.buffers.forwardsWorkItems,
                    simulator.buffers.curPoints,
                    simulator.buffers.nextMidPoints,
                    simulator.buffers.curMidPoints,
                    simulator.buffers.midSpringsPos,
                    simulator.buffers.midSpringsColorCoord];

                simulator.kernels.gaussSeidelMidsprings.setArgs(
                    // 0   1     2     3     4     5     6     7     8     9     10
                    [null, null, null, null, null, null, null, null, null, null, webcl.type ? [stepNumber] : new Uint32Array([stepNumber])],
                    [null, null, null, null, null, null, null, null, null, null, cljs.types.uint_t]);

                return simulator.kernels.gaussSeidelMidsprings.call(simulator.numForwardsWorkItems, resources);
            } else {
                return simulator.buffers.nextMidPoints.copyInto(simulator.buffers.curMidPoints);
            }
        });

    }

};

},{"./cl.js":5,"node-webcl":"fWqvvE","q":22,"underscore":23}],8:[function(_dereq_,module,exports){

var debug = _dereq_("debug")("N-body:SimCL:forceAtlas2"),
    _ = _dereq_('underscore');


var cljs = _dereq_('./cl.js');


if (typeof(window) == 'undefined') {
    var webcl = _dereq_('node-webcl');
} else if (typeof(webcl) == 'undefined') {
    var webcl = window.webcl;
}

//corresponds to apply-forces.cl
//webcl.type ? [1] : new Uint32Array([localPosSize]),
var graphArgs =
    webcl.type ? [[1], [1], [0], [0]]
    : [new Float32Array([1]), new Float32Array([1]), new Uint32Array([0]), new Uint32Array([0])];
var graphArgs_t = webcl.type ? [cljs.types.float_t, cljs.types.float_t, cljs.types.uint_t, cljs.types.uint_t] : null;


module.exports = {

    kernelNames: ["forceAtlasPoints", "forceAtlasEdges", "gaussSeidelSpringsGather" /* reuse */],

    setPhysics: function (simulator, cfg) {

        var vArr = [null, null, null, null];
        var tArr = [null, null, null, null];
        var anyAtlasArgsChanged = false;


        if (cfg.hasOwnProperty('scalingRatio')) {
            anyAtlasArgsChanged = true;
            var v = webcl.type ? [cfg.scalingRatio] : new Float32Array([cfg.scalingRatio]);
            var t = cljs.types.float_t;
            var idx = 0;
            vArr[idx] = v;
            tArr[idx] = t;
        }
        if (cfg.hasOwnProperty('gravity')) {
            anyAtlasArgsChanged = true;
            var v = webcl.type ? [cfg.gravity] : new Float32Array([cfg.gravity]);
            var t = cljs.types.float_t;
            var idx = 1;
            vArr[idx] = v;
            tArr[idx] = t;
        }
        if (cfg.hasOwnProperty('edgeInfluence')) {
            anyAtlasArgsChanged = true;
            var v = webcl.type ? [cfg.edgeInfluence] : new Uint32Array([cfg.edgeInfluence]);
            var t = cljs.types.uint_t;
            var idx = 2;
            vArr[idx] = v;
            tArr[idx] = t;
        }

        var flags = ['preventOverlap', 'strongGravity', 'dissuadeHubs', 'linLog'];
        var isAnyFlagToggled = flags.filter(function (flag) { return cfg.hasOwnProperty(flag); }).length;
        if (isAnyFlagToggled) {
            anyAtlasArgsChanged = true;
            var mask = 0;
            flags.forEach(function (flag, i) {
                var isOn = cfg.hasOwnProperty(flag) ? cfg[flag] : simulator.physics[flag];;
                if (isOn) {
                    mask = mask | (1 << i);
                }
            });

            var v = webcl.type ? [mask] : new Uint32Array([mask]);
            var t = cljs.types.uint_t;
            var idx = 3;
            vArr[idx] = v;
            tArr[idx] = t;
        }


        if (anyAtlasArgsChanged) {
            simulator.kernels.forceAtlasPoints.setArgs(vArr, tArr);
            simulator.kernels.forceAtlasEdges.setArgs(vArr, tArr);
        }

    },

    setPoints: _.identity,

    setEdges: function (simulator) {

        var localPosSize =
            Math.min(simulator.cl.maxThreads, simulator.numMidPoints)
            * simulator.elementsPerPoint
            * Float32Array.BYTES_PER_ELEMENT;

        //set here rather than with setPoints because need edges (for degrees)
        simulator.kernels.forceAtlasPoints.setArgs(
            graphArgs.concat([
                webcl.type ? [1] : new Uint32Array([localPosSize]),
                webcl.type ? [1] : new Uint32Array([localPosSize]),
                webcl.type ? [1] : new Uint32Array([localPosSize]),
                webcl.type ? [simulator.numPoints] : new Uint32Array([simulator.numPoints]),
                simulator.buffers.curPoints.buffer,
                webcl.type ? [simulator.dimensions[0]] : new Float32Array([simulator.dimensions[0]]),
                webcl.type ? [simulator.dimensions[1]] : new Float32Array([simulator.dimensions[1]]),
                webcl.type ? [0] : new Uint32Array([0]),
                simulator.buffers.forwardsDegrees.buffer,
                simulator.buffers.backwardsDegrees.buffer,
                simulator.buffers.nextPoints.buffer
            ]),
            webcl.type ? graphArgs_t.concat([
                webcl.type.LOCAL_MEMORY_SIZE,
                webcl.type.LOCAL_MEMORY_SIZE,
                webcl.type.LOCAL_MEMORY_SIZE,
                webcl.type.UINT,
                null,
                webcl.type.FLOAT,
                webcl.type.FLOAT,
                webcl.type.UINT,
                null,
                null,
                null
            ]) : undefined);

        simulator.kernels.forceAtlasEdges.setArgs(
            graphArgs.concat([
                null, //forwards/backwards picked dynamically
                null, //forwards/backwards picked dynamically
                null, //simulator.buffers.curPoints.buffer then simulator.buffers.nextPoints.buffer
                null,
                null
            ]),
            webcl.type ? graphArgs_t.concat([
                null, null, null,
                null, null
            ]) : null);

        simulator.kernels.gaussSeidelSpringsGather.setArgs(
            [   simulator.buffers.forwardsEdges.buffer,
                simulator.buffers.forwardsWorkItems.buffer,
                simulator.buffers.curPoints.buffer,
                simulator.buffers.springsPos.buffer],
            webcl.type ? [null, null, null, null]
                : null);
    },

    tick: function (simulator, stepNumber) {

        if (simulator.physics.forceAtlas) {

            var atlasEdgesKernelSeq = function (edges, workItems, numWorkItems, fromPoints, toPoints) {

                var resources = [edges, workItems, fromPoints, toPoints];

                simulator.kernels.forceAtlasEdges.setArgs(
                    graphArgs.map(function () { return null; })
                        .concat(
                            [edges.buffer, workItems.buffer, fromPoints.buffer, webcl.type ? [stepNumber] : new Uint32Array([stepNumber]),
                            toPoints.buffer]),
                    webcl.type ? graphArgs_t.map(function () { return null; })
                        .concat([null, null, null, cljs.types.uint_t, null])
                        : undefined);

                return simulator.kernels.forceAtlasEdges.call(numWorkItems, resources);
            };

            var resources = [
                simulator.buffers.curPoints,
                simulator.buffers.forwardsDegrees,
                simulator.buffers.backwardsDegrees,
                simulator.buffers.nextPoints,
            ];

            simulator.kernels.forceAtlasPoints.setArgs(
                graphArgs.map(function () { return null; })
                    .concat([null, null, null, null, null, null, null, webcl.type ? [stepNumber] : new Uint32Array([stepNumber])]),
                webcl.type ? graphArgs_t.map(function () { return null; })
                    .concat([null, null, null, null, null, null, null, cljs.types.uint_t])
                    : undefined);

            var appliedForces = simulator.kernels.forceAtlasPoints.call(simulator.numPoints, resources);

            return appliedForces
                .then(function () {
                    if(simulator.numEdges > 0) {
                        return atlasEdgesKernelSeq(
                                simulator.buffers.forwardsEdges, simulator.buffers.forwardsWorkItems, simulator.numForwardsWorkItems,
                                simulator.buffers.nextPoints, simulator.buffers.curPoints)
                            .then(function () {
                                 return atlasEdgesKernelSeq(
                                    simulator.buffers.backwardsEdges, simulator.buffers.backwardsWorkItems, simulator.numBackwardsWorkItems,
                                    simulator.buffers.curPoints, simulator.buffers.nextPoints);
                            })
                            .then(function () {
                                return simulator.buffers.nextPoints.copyInto(simulator.buffers.curPoints);
                            });
                    }
                })
                .then(function () {
                    if (simulator.numEdges > 0) {

                        var resources = [simulator.buffers.forwardsEdges, simulator.buffers.forwardsWorkItems,
                            simulator.buffers.curPoints, simulator.buffers.springsPos];

                        return simulator.kernels.gaussSeidelSpringsGather.call(simulator.numForwardsWorkItems, resources);
                    }
                })
        }
    }
};
},{"./cl.js":5,"debug":17,"node-webcl":"fWqvvE","underscore":23}],9:[function(_dereq_,module,exports){


var debug = _dereq_("debug")("N-body:SimCL:gaussSeidel"),
    Q = _dereq_('q');


var cljs = _dereq_('./cl.js');


if (typeof(window) == 'undefined') {
    var webcl = _dereq_('node-webcl');
} else if (typeof(webcl) == 'undefined') {
    var webcl = window.webcl;
}


module.exports = {

    kernelNames: ["gaussSeidelPoints", "gaussSeidelSprings", "gaussSeidelSpringsGather"],

    setPhysics: function (simulator, cfg) {

        if(cfg.hasOwnProperty('charge') || cfg.hasOwnProperty('gravity')) {
            var charge = cfg.hasOwnProperty('charge') ? (webcl.type ? [cfg.charge] : new Float32Array([cfg.charge])) : null;
            var charge_t = cfg.hasOwnProperty('charge') ? cljs.types.float_t : null;

            var gravity = cfg.hasOwnProperty('gravity') ? (webcl.type ? [cfg.gravity] : new Float32Array([cfg.gravity])) : null;
            var gravity_t = cfg.hasOwnProperty('gravity') ? cljs.types.float_t : null;

            simulator.kernels.gaussSeidelPoints.setArgs(
                [null, null, null, null, null, null, charge, gravity, null, null],
                [null, null, null, null, null, null, charge_t, gravity_t, null, null]);

        }

        if(cfg.hasOwnProperty('edgeDistance') || cfg.hasOwnProperty('edgeStrength')) {
            var edgeDistance = cfg.hasOwnProperty('edgeDistance') ? (webcl.type ? [cfg.edgeDistance] : new Float32Array([cfg.edgeDistance])) : null;
            var edgeDistance_t = cfg.hasOwnProperty('edgeDistance') ? cljs.types.float_t : null;

            var edgeStrength = cfg.hasOwnProperty('edgeStrength') ? (webcl.type ? [cfg.edgeStrength] : new Float32Array([cfg.edgeStrength])) : null;
            var edgeStrength_t = cfg.hasOwnProperty('edgeStrength') ? cljs.types.float_t : null;

            simulator.kernels.gaussSeidelSprings.setArgs(
                [null, null, null, null, edgeStrength, edgeDistance, null],
                [null, null, null, null, edgeStrength_t, edgeDistance_t, null]);
        }

    },

    setPoints: function (simulator) {

        var localPosSize =
            Math.min(simulator.cl.maxThreads, simulator.numPoints)
            * simulator.elementsPerPoint
            * Float32Array.BYTES_PER_ELEMENT;

        debug("Setting point 0. FIXME: dyn alloc __local, not hardcode in kernel");

        simulator.kernels.gaussSeidelPoints.setArgs([
                webcl.type ? [simulator.numPoints] : new Uint32Array([simulator.numPoints]),
                simulator.buffers.curPoints.buffer,
                simulator.buffers.nextPoints.buffer,
                webcl.type ? [1] : new Uint32Array([localPosSize]),
                webcl.type ? [simulator.dimensions[0]] : new Float32Array([simulator.dimensions[0]]),
                webcl.type ? [simulator.dimensions[1]] : new Float32Array([simulator.dimensions[1]]),
                webcl.type ? [-0.00001] : new Float32Array([-0.00001]),
                webcl.type ? [0.2] : new Float32Array([0.2]),
                simulator.buffers.randValues.buffer,
                webcl.type ? [0] : new Uint32Array([0])
            ],
            webcl.type ? [
                webcl.type.UINT,
                null, null,
                webcl.type.LOCAL_MEMORY_SIZE,
                webcl.type.FLOAT,
                webcl.type.FLOAT,
                webcl.type.FLOAT,
                webcl.type.FLOAT,
                null,
                webcl.type.UINT
            ] : undefined);
    },

    setEdges: function (simulator) {

        simulator.kernels.gaussSeidelSprings.setArgs(
            [   null, //forwards/backwards picked dynamically
                null, //forwards/backwards picked dynamically
                null, //simulator.buffers.curPoints.buffer then simulator.buffers.nextPoints.buffer
                null, //simulator.buffers.nextPoints.buffer then simulator.buffers.curPoints.buffer
                webcl.type ? [1.0] : new Float32Array([1.0]),
                webcl.type ? [0.1] : new Float32Array([0.1]),
                null],
            webcl.type ? [null, null, null, null,
                webcl.type.FLOAT, webcl.type.FLOAT]
                : null);

        simulator.kernels.gaussSeidelSpringsGather.setArgs(
            [   simulator.buffers.forwardsEdges.buffer,
                simulator.buffers.forwardsWorkItems.buffer,
                simulator.buffers.curPoints.buffer,
                simulator.buffers.springsPos.buffer],
            webcl.type ? [null, null, null, null]
                : null);
    },

    tick: function (simulator, stepNumber) {

        var edgeKernelSeq = function  (edges, workItems, numWorkItems, fromPoints, toPoints) {

            var resources = [edges, workItems, fromPoints, toPoints, simulator.buffers.springsPos];

            simulator.kernels.gaussSeidelSprings.setArgs(
                [edges.buffer, workItems.buffer, fromPoints.buffer, toPoints.buffer,
                 null, null, webcl.type ? [stepNumber] : new Uint32Array([stepNumber])],
                webcl.type ? [null, null, null, null,
                 null, null, cljs.types.uint_t] : null);

            return simulator.kernels.gaussSeidelSprings.call(numWorkItems, resources);
        };

        return Q()
        .then(function () {

            if (simulator.locked.lockPoints) {
                return;
            } else {

                var resources = [simulator.buffers.curPoints, simulator.buffers.nextPoints, simulator.buffers.randValues];

                simulator.kernels.gaussSeidelPoints.setArgs(
                    [null, null, null, null, null, null, null, null, null, webcl.type ? [stepNumber] : new Uint32Array([stepNumber])],
                    [null, null, null, null, null, null, null, null, null, cljs.types.uint_t]);

                return simulator.kernels.gaussSeidelPoints.call(simulator.numPoints, resources)
                    .then(function () {return simulator.buffers.nextPoints.copyInto(simulator.buffers.curPoints); });

            }
        }).then(function() {
            if (simulator.numEdges <= 0 || simulator.locked.lockEdges) {
                return simulator;
            }
            if(simulator.numEdges > 0) {
                return edgeKernelSeq(
                        simulator.buffers.forwardsEdges, simulator.buffers.forwardsWorkItems, simulator.numForwardsWorkItems,
                        simulator.buffers.curPoints, simulator.buffers.nextPoints)
                    .then(function () {
                         return edgeKernelSeq(
                            simulator.buffers.backwardsEdges, simulator.buffers.backwardsWorkItems, simulator.numBackwardsWorkItems,
                            simulator.buffers.nextPoints, simulator.buffers.curPoints); });
            }
        }).then(function() {
            if ((!simulator.locked.lockPoints || !simulator.locked.lockEdges)
                && simulator.numEdges > 0) {

                var resources = [simulator.buffers.forwardsEdges, simulator.buffers.forwardsWorkItems,
                    simulator.buffers.curPoints, simulator.buffers.springsPos];

                return simulator.kernels.gaussSeidelSpringsGather.call(simulator.numForwardsWorkItems, resources);

            } else {
                return simulator;
            }
        });

    }

}

},{"./cl.js":5,"debug":17,"node-webcl":"fWqvvE","q":22}],10:[function(_dereq_,module,exports){
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
 Copyright 2009 The Closure Library Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS-IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/Long.js for details
 * 
 * Long.js is based on goog.math.Long from the Closure Library.
 * Copyright 2009 The Closure Library Authors. All Rights Reserved.
 * Released under the Apache License, Version 2.0
 * see: https://code.google.com/p/closure-library/ for details
 */

/**
 * Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 */
(function(global) {

    /**
     * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
     * values as *signed* integers.  See the from* functions below for more
     * convenient ways of constructing Longs.
     *
     * The internal representation of a long is the two given signed, 32-bit values.
     * We use 32-bit pieces because these are the size of integers on which
     * Javascript performs bit-operations.  For operations like addition and
     * multiplication, we split each number into 16-bit pieces, which can easily be
     * multiplied within Javascript's floating-point representation without overflow
     * or change in sign.
     *
     * In the algorithms below, we frequently reduce the negative case to the
     * positive case by negating the input(s) and then post-processing the result.
     * Note that we must ALWAYS check specially whether those values are MIN_VALUE
     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
     * a positive number, it overflows back into a negative).  Not handling this
     * case would often result in infinite recursion.
     * 
     * @exports Long
     * @class A Long class for representing a 64-bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long.
     * @param {number} high The high (signed) 32 bits of the long.
     * @param {boolean=} unsigned Whether unsigned or not. Defaults to `false` (signed).
     * @constructor
     */
    var Long = function(low, high, unsigned) {
        
        /**
         * The low 32 bits as a signed value.
         * @type {number}
         * @expose
         */
        this.low = low | 0;

        /**
         * The high 32 bits as a signed value.
         * @type {number}
         * @expose
         */
        this.high = high | 0;

        /**
         * Whether unsigned or not.
         * @type {boolean}
         * @expose
         */
        this.unsigned = !!unsigned;
    };

    // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from* methods on which they depend.

    // NOTE: The following cache variables are used internally only and are therefore not exposed as properties of the
    // Long class.
    
    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     */
    var INT_CACHE = {};

    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     */
    var UINT_CACHE = {};

    /**
     * Returns a Long representing the given (32-bit) integer value.
     * @param {number} value The 32-bit integer in question.
     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).
     * @return {!Long} The corresponding Long value.
     * @expose
     */
    Long.fromInt = function(value, unsigned) {
        var obj, cachedObj;
        if (!unsigned) {
            value = value | 0;
            if (-128 <= value && value < 128) {
                cachedObj = INT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = new Long(value, value < 0 ? -1 : 0, false);
            if (-128 <= value && value < 128) {
                INT_CACHE[value] = obj;
            }
            return obj;
        } else {
            value = value >>> 0;
            if (0 <= value && value < 256) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);
            if (0 <= value && value < 256) {
                UINT_CACHE[value] = obj;
            }
            return obj;
        }
    };

    /**
     * Returns a Long representing the given value, provided that it is a finite
     * number.  Otherwise, zero is returned.
     * @param {number} value The number in question.
     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).
     * @return {!Long} The corresponding Long value.
     * @expose
     */
    Long.fromNumber = function(value, unsigned) {
        unsigned = !!unsigned;
        if (isNaN(value) || !isFinite(value)) {
            return Long.ZERO;
        } else if (!unsigned && value <= -TWO_PWR_63_DBL) {
            return Long.MIN_SIGNED_VALUE;
        } else if (unsigned && value <= 0) {
            return Long.MIN_UNSIGNED_VALUE;
        } else if (!unsigned && value + 1 >= TWO_PWR_63_DBL) {
            return Long.MAX_SIGNED_VALUE;
        } else if (unsigned && value >= TWO_PWR_64_DBL) {
            return Long.MAX_UNSIGNED_VALUE;
        } else if (value < 0) {
            return Long.fromNumber(-value, false).negate();
        } else {
            return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
        }
    };

    /**
     * Returns a Long representing the 64bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @param {number} lowBits The low 32 bits.
     * @param {number} highBits The high 32 bits.
     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).
     * @return {!Long} The corresponding Long value.
     * @expose
     */
    Long.fromBits = function(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    };

    /**
     * Returns a Long representing the 64bit integer that comes by concatenating the given low, middle and high bits.
     *  Each is assumed to use 28 bits.
     * @param {number} part0 The low 28 bits
     * @param {number} part1 The middle 28 bits
     * @param {number} part2 The high 28 (8) bits
     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).
     * @return {!Long}
     * @expose
     */
    Long.from28Bits = function(part0, part1, part2, unsigned) {
        // 00000000000000000000000000001111 11111111111111111111111122222222 2222222222222
        // LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
        return Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, unsigned);
    };

    /**
     * Returns a Long representation of the given string, written using the given
     * radix.
     * @param {string} str The textual representation of the Long.
     * @param {(boolean|number)=} unsigned Whether unsigned or not. Defaults to false (signed).
     * @param {number=} radix The radix in which the text is written.
     * @return {!Long} The corresponding Long value.
     * @expose
     */
    Long.fromString = function(str, unsigned, radix) {
        if (str.length == 0) {
            throw(new Error('number format error: empty string'));
        }
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") {
            return Long.ZERO;
        }
        if (typeof unsigned === 'number') { // For goog.math.Long compatibility
            radix = unsigned;
            unsigned = false;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix) {
            throw(new Error('radix out of range: ' + radix));
        }

        if (str.charAt(0) == '-') {
            return Long.fromString(str.substring(1), unsigned, radix).negate();
        } else if (str.indexOf('-') >= 0) {
            throw(new Error('number format error: interior "-" character: ' + str));
        }

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 8));

        var result = Long.ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i);
            var value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = Long.fromNumber(Math.pow(radix, size));
                result = result.multiply(power).add(Long.fromNumber(value));
            } else {
                result = result.multiply(radixToPower);
                result = result.add(Long.fromNumber(value));
            }
        }
        return result;
    };

    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.
    
    // NOTE: The following constant values are used internally only and are therefore not exposed as properties of the
    // Long class.

    /**
     * @type {number}
     */
    var TWO_PWR_16_DBL = 1 << 16;

    /**
     * @type {number}
     */
    var TWO_PWR_24_DBL = 1 << 24;

    /**
     * @type {number}
     */
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     */
    var TWO_PWR_31_DBL = TWO_PWR_32_DBL / 2;

    /**
     * @type {number}
     */
    var TWO_PWR_48_DBL = TWO_PWR_32_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     */
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

    /**
     * @type {number}
     */
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

    /**
     * @type {!Long}
     */
    var TWO_PWR_24 = Long.fromInt(1 << 24);

    /**
     * @type {!Long}
     * @expose
     */
    Long.ZERO = Long.fromInt(0);

    /**
     * @type {!Long}
     * @expose
     */
    Long.ONE = Long.fromInt(1);

    /**
     * @type {!Long}
     * @expose
     */
    Long.NEG_ONE = Long.fromInt(-1);

    /**
     * @type {!Long}
     * @expose
     */
    Long.MAX_SIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);

    /**
     * @type {!Long}
     * @expose
     */
    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);

    /**
     * Alias of {@link Long.MAX_SIGNED_VALUE} for goog.math.Long compatibility.
     * @type {!Long}
     * @expose
     */
    Long.MAX_VALUE = Long.MAX_SIGNED_VALUE;

    /**
     * @type {!Long}
     * @expose
     */
    Long.MIN_SIGNED_VALUE = Long.fromBits(0, 0x80000000 | 0, false);

    /**
     * @type {!Long}
     * @expose
     */
    Long.MIN_UNSIGNED_VALUE = Long.fromBits(0, 0, true);

    /**
     * Alias of {@link Long.MIN_SIGNED_VALUE}  for goog.math.Long compatibility.
     * @type {!Long}
     * @expose
     */
    Long.MIN_VALUE = Long.MIN_SIGNED_VALUE;

    /**
     * @return {number} The value, assuming it is a 32-bit integer.
     * @expose
     */
    Long.prototype.toInt = function() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };

    /**
     * @return {number} The closest floating-point representation to this value.
     * @expose
     */
    Long.prototype.toNumber = function() {
        if (this.unsigned) {
            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
        }
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };

    /**
     * @param {number=} radix The radix in which the text should be written.
     * @return {string} The textual representation of this value.
     * @override
     * @expose
     */
    Long.prototype.toString = function(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix) {
            throw(new Error('radix out of range: ' + radix));
        }
        if (this.isZero()) {
            return '0';
        }
        var rem;
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.equals(Long.MIN_SIGNED_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = Long.fromNumber(radix);
                var div = this.div(radixLong);
                rem = div.multiply(radixLong).subtract(this);
                return div.toString(radix) + rem.toInt().toString(radix);
            } else {
                return '-' + this.negate().toString(radix);
            }
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 6));
        rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower);
            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
            var digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) {
                return digits + result;
            } else {
                while (digits.length < 6) {
                    digits = '0' + digits;
                }
                result = '' + digits + result;
            }
        }
    };

    /**
     * @return {number} The high 32 bits as a signed value.
     * @expose
     */
    Long.prototype.getHighBits = function() {
        return this.high;
    };

    /**
     * @return {number} The high 32 bits as an unsigned value.
     * @expose
     */
    Long.prototype.getHighBitsUnsigned = function() {
        return this.high >>> 0;
    };

    /**
     * @return {number} The low 32 bits as a signed value.
     * @expose
     */
    Long.prototype.getLowBits = function() {
        return this.low;
    };

    /**
     * @return {number} The low 32 bits as an unsigned value.
     * @expose
     */
    Long.prototype.getLowBitsUnsigned = function() {
        return this.low >>> 0;
    };

    /**
     * @return {number} Returns the number of bits needed to represent the absolute
     *     value of this Long.
     * @expose
     */
    Long.prototype.getNumBitsAbs = function() {
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.equals(Long.MIN_SIGNED_VALUE)) {
                return 64;
            } else {
                return this.negate().getNumBitsAbs();
            }
        } else {
            var val = this.high != 0 ? this.high : this.low;
            for (var bit = 31; bit > 0; bit--) {
                if ((val & (1 << bit)) != 0) {
                    break;
                }
            }
            return this.high != 0 ? bit + 33 : bit + 1;
        }
    };

    /**
     * @return {boolean} Whether this value is zero.
     * @expose
     */
    Long.prototype.isZero = function() {
        return this.high == 0 && this.low == 0;
    };

    /**
     * @return {boolean} Whether this value is negative.
     * @expose
     */
    Long.prototype.isNegative = function() {
        return !this.unsigned && this.high < 0;
    };

    /**
     * @return {boolean} Whether this value is odd.
     * @expose
     */
    Long.prototype.isOdd = function() {
        return (this.low & 1) == 1;
    };

    /**
     * @return {boolean} Whether this value is even.
     */
    Long.prototype.isEven = function() {
        return (this.low & 1) == 0;
    };

    /**
     * @param {Long} other Long to compare against.
     * @return {boolean} Whether this Long equals the other.
     * @expose
     */
    Long.prototype.equals = function(other) {
        if (this.unsigned != other.unsigned && (this.high >>> 31) != (other.high >>> 31)) return false;
        return (this.high == other.high) && (this.low == other.low);
    };

    /**
     * @param {Long} other Long to compare against.
     * @return {boolean} Whether this Long does not equal the other.
     * @expose
     */
    Long.prototype.notEquals = function(other) {
        return !this.equals(other);
    };

    /**
     * @param {Long} other Long to compare against.
     * @return {boolean} Whether this Long is less than the other.
     * @expose
     */
    Long.prototype.lessThan = function(other) {
        return this.compare(other) < 0;
    };

    /**
     * @param {Long} other Long to compare against.
     * @return {boolean} Whether this Long is less than or equal to the other.
     * @expose
     */
    Long.prototype.lessThanOrEqual = function(other) {
        return this.compare(other) <= 0;
    };

    /**
     * @param {Long} other Long to compare against.
     * @return {boolean} Whether this Long is greater than the other.
     * @expose
     */
    Long.prototype.greaterThan = function(other) {
        return this.compare(other) > 0;
    };

    /**
     * @param {Long} other Long to compare against.
     * @return {boolean} Whether this Long is greater than or equal to the other.
     * @expose
     */
    Long.prototype.greaterThanOrEqual = function(other) {
        return this.compare(other) >= 0;
    };

    /**
     * Compares this Long with the given one.
     * @param {Long} other Long to compare against.
     * @return {number} 0 if they are the same, 1 if the this is greater, and -1
     *     if the given one is greater.
     * @expose
     */
    Long.prototype.compare = function(other) {
        if (this.equals(other)) {
            return 0;
        }
        var thisNeg = this.isNegative();
        var otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) return -1;
        if (!thisNeg && otherNeg) return 1;
        if (!this.unsigned) {
            // At this point the signs are the same
            return this.subtract(other).isNegative() ? -1 : 1;
        } else {
            // Both are positive if at least one is unsigned
            return (other.high >>> 0) > (this.high >>> 0) || (other.high == this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
        }
    };

    /**
     * @return {!Long} The negation of this value.
     * @expose
     */
    Long.prototype.negate = function() {
        if (!this.unsigned && this.equals(Long.MIN_SIGNED_VALUE)) {
            return Long.MIN_SIGNED_VALUE;
        }
        return this.not().add(Long.ONE);
    };

    /**
     * Returns the sum of this and the given Long.
     * @param {Long} other Long to add to this one.
     * @return {!Long} The sum of this and the given Long.
     * @expose
     */
    Long.prototype.add = function(other) {
        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
        
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = other.high >>> 16;
        var b32 = other.high & 0xFFFF;
        var b16 = other.low >>> 16;
        var b00 = other.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the difference of this and the given Long.
     * @param {Long} other Long to subtract from this.
     * @return {!Long} The difference of this and the given Long.
     * @expose
     */
    Long.prototype.subtract = function(other) {
        return this.add(other.negate());
    };

    /**
     * Returns the product of this and the given long.
     * @param {Long} other Long to multiply with this.
     * @return {!Long} The product of this and the other.
     * @expose
     */
    Long.prototype.multiply = function(other) {
        if (this.isZero()) {
            return Long.ZERO;
        } else if (other.isZero()) {
            return Long.ZERO;
        }

        if (this.equals(Long.MIN_VALUE)) {
            return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        } else if (other.equals(Long.MIN_VALUE)) {
            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        }

        if (this.isNegative()) {
            if (other.isNegative()) {
                return this.negate().multiply(other.negate());
            } else {
                return this.negate().multiply(other).negate();
            }
        } else if (other.isNegative()) {
            return this.multiply(other.negate()).negate();
        }
        // If both longs are small, use float multiplication
        if (this.lessThan(TWO_PWR_24) &&
            other.lessThan(TWO_PWR_24)) {
            return Long.fromNumber(this.toNumber() * other.toNumber(), this.unsigned);
        }

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.
        
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = other.high >>> 16;
        var b32 = other.high & 0xFFFF;
        var b16 = other.low >>> 16;
        var b00 = other.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns this Long divided by the given one.
     * @param {Long} other Long by which to divide.
     * @return {!Long} This Long divided by the given one.
     * @expose
     */
    Long.prototype.div = function(other) {
        if (other.isZero()) {
            throw(new Error('division by zero'));
        } else if (this.isZero()) {
            return Long.ZERO;
        }
        if (this.equals(Long.MIN_SIGNED_VALUE)) {
            if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {
                return min;  // recall that -MIN_VALUE == MIN_VALUE
            } else if (other.equals(Long.MIN_VALUE)) {
                return Long.ONE;
            } else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shiftRight(1);
                var approx = halfThis.div(other).shiftLeft(1);
                if (approx.equals(Long.ZERO)) {
                    return other.isNegative() ? Long.ONE : Long.NEG_ONE;
                } else {
                    var rem = this.subtract(other.multiply(approx));
                    var result = approx.add(rem.div(other));
                    return result;
                }
            }
        } else if (other.equals(Long.MIN_VALUE)) {
            return Long.ZERO;
        }
        if (this.isNegative()) {
            if (other.isNegative()) {
                return this.negate().div(other.negate());
            } else {
                return this.negate().div(other).negate();
            }
        } else if (other.isNegative()) {
            return this.div(other.negate()).negate();
        }

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        var res = Long.ZERO;
        var rem = this;
        while (rem.greaterThanOrEqual(other)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
            var approxRes = Long.fromNumber(approx, this.unsigned);
            var approxRem = approxRes.multiply(other);
            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
                approx -= delta;
                approxRes = Long.fromNumber(approx, this.unsigned);
                approxRem = approxRes.multiply(other);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero()) {
                approxRes = Long.ONE;
            }

            res = res.add(approxRes);
            rem = rem.subtract(approxRem);
        }
        return res;
    };

    /**
     * Returns this Long modulo the given one.
     * @param {Long} other Long by which to mod.
     * @return {!Long} This Long modulo the given one.
     * @expose
     */
    Long.prototype.modulo = function(other) {
        return this.subtract(this.div(other).multiply(other));
    };

    /**
     * @return {!Long} The bitwise-NOT of this value.
     * @expose
     */
    Long.prototype.not = function() {
        return Long.fromBits(~this.low, ~this.high, this.unsigned);
    };

    /**
     * Returns the bitwise-AND of this Long and the given one.
     * @param {Long} other The Long with which to AND.
     * @return {!Long} The bitwise-AND of this and the other.
     * @expose
     */
    Long.prototype.and = function(other) {
        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };

    /**
     * Returns the bitwise-OR of this Long and the given one.
     * @param {Long} other The Long with which to OR.
     * @return {!Long} The bitwise-OR of this and the other.
     * @expose
     */
    Long.prototype.or = function(other) {
        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };

    /**
     * Returns the bitwise-XOR of this Long and the given one.
     * @param {Long} other The Long with which to XOR.
     * @return {!Long} The bitwise-XOR of this and the other.
     * @expose
     */
    Long.prototype.xor = function(other) {
        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number} numBits The number of bits by which to shift.
     * @return {!Long} This shifted to the left by the given amount.
     * @expose
     */
    Long.prototype.shiftLeft = function(numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this;
        } else {
            var low = this.low;
            if (numBits < 32) {
                var high = this.high;
                return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)), this.unsigned);
            } else {
                return Long.fromBits(0, low << (numBits - 32), this.unsigned);
            }
        }
    };

    /**
     * Returns this Long with bits shifted to the right by the given amount.
     * @param {number} numBits The number of bits by which to shift.
     * @return {!Long} This shifted to the right by the given amount.
     * @expose
     */
    Long.prototype.shiftRight = function(numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this;
        } else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits, this.unsigned);
            } else {
                return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1, this.unsigned);
            }
        }
    };

    /**
     * Returns this Long with bits shifted to the right by the given amount, with
     * the new top bits matching the current sign bit.
     * @param {number} numBits The number of bits by which to shift.
     * @return {!Long} This shifted to the right by the given amount, with
     *     zeros placed into the new leading bits.
     * @expose
     */
    Long.prototype.shiftRightUnsigned = function(numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this;
        } else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            } else if (numBits == 32) {
                return Long.fromBits(high, 0, this.unsigned);
            } else {
                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);
            }
        }
    };

    /**
     * @return {!Long} Signed long
     * @expose
     */
    Long.prototype.toSigned = function() {
        var l = this.clone();
        l.unsigned = false;
        return l;
    };

    /**
     * @return {!Long} Unsigned long
     * @expose
     */
    Long.prototype.toUnsigned = function() {
        var l = this.clone();
        l.unsigned = true;
        return l;
    };
    
    /**
     * @return {Long} Cloned instance with the same low/high bits and unsigned flag.
     * @expose
     */
    Long.prototype.clone = function() {
        return new Long(this.low, this.high, this.unsigned);
    };

    // Enable module loading if available
    if (typeof module != 'undefined' && module["exports"]) { // CommonJS
        module["exports"] = Long;
    } else if (typeof define != 'undefined' && define["amd"]) { // AMD
        define("Math/Long", [], function() { return Long; });
    } else { // Shim
        if (!global["dcodeIO"]) {
            global["dcodeIO"] = {};
        }
        global["dcodeIO"]["Long"] = Long;
    }

})(this);

},{}],11:[function(_dereq_,module,exports){
//kmeans
// [ [ float ]_r ]_p * int==k * int ->
// {labeling: [ int <= k ]_p, centers: [ [ float ]_r ]_k, assignments: [ [ {row: int, dist: float}] ]_k}

function kmeans (data, k, maxSteps) {
	if (k > data.length) throw 'k must be less than rank';

	//grab k random rows
	// [ [float] ]_(m>k) * k:int -> [ [float] ]_k
	// TODO k++ initializer
	function init (data, k) {
		var opts = [];
		for (var i = 0; i < data.length; i++) opts.push(i);

		var rows = [];
		for (var i = 0; i < k; i++)
			rows.push(opts.splice(Math.round(Math.random() * opts.length),1));

		return rows.map(function (idx) { return data[idx]; });
	}

	//euclidean: sqrt of sum of squares
	// [ float ]_k * [ float ]_k -> float
	function dist (row, center) {
		var sum = 0;
		for (var i = 0; i < row.length; i++)
			sum += Math.pow(row[i] - center[i], 2);
		return Math.sqrt(sum);
	}

	//closest cluster
	// [ float ]_r * [ [ float ]_r ]_k -> int
	function assign (row, centers) {
		var center = 0;
		var score = dist(row, centers[0]);
		for (var i = 1; i < centers.length; i++) {
			var attempt = dist(row, centers[i]);
			if (attempt < score) {
				center = i;
				score = attempt;
			}
		}
		return {cluster: center, score: score};
	}

	// relabel points and return whether any changed
	// [ _ ]_p * [ [ float ]_r ]_p * [ [ float ]_r ]_k -> {anyChanged: bool, clustering: [ [{row: int, dist: float}] ]_k
	function assignAll (labeling, rows, centers) {

		var anyChanged = false;
		var assignments = [];
		for (var i = 0; i < centers.length; i++) assignments.push([]);

		for (var p = 0; p < rows.length; p++) {
			var before = labeling[p];
			var assignment = assign(rows[p], centers);
			if (assignment.cluster != before) {
				anyChanged = true;
				labeling[p] = assignment.cluster;
			}
			assignments[assignment.cluster].push({row: p, dist: assignment.score});
		}
		return {anyChanged: anyChanged, clustering: assignments}
	}

	//update cluster k
	//return whether a value changed
	// [ int <= k ]_p * [ [ float ]_r ]_k * [ [ float ]_r ]_p * int<=k -> bool
	function recenterCluster (labeling, centers, data, k) {
		var anyChanged = false;
		var numHits = 0;
		for (var i = 0; i < labeling.length; i++) {
			if (labeling[i] == k) numHits++;
		}
		if (!numHits) {
			for (var f = 0; f < centers[0].length; f++) {
				var before = centers[k][f];
				centers[k][f] = 0;
				anyChanged |= before != 0;
			}
			return anyChanged;
		} else {
			for (var f = 0; f < centers[0].length; f++) {
				var before = centers[k][f];
				var sum = 0;
				for (var p = 0; p < labeling.length; p++)
					if (labeling[p] == k)
						sum += data[p][f];
				var newCenter = sum / numHits;
				centers[k][f] = newCenter;
				anyChanged |= before == newCenter;
			}
			return anyChanged;
		}
	}

	//update clusters
	//return whether any values changed
	// [ int <= k ]_p * [ [ float ]_r ]_k * [ [ float ]_r ]_p -> bool
	function recenterClusters (labeling, centers, data) {
		var anyChanged = false;
		for (var k = 0; k < centers.length; k++)
			anyChanged |= recenterCluster(labeling, centers, data, k);
		return anyChanged;
	}

	var centers = init(data,k);
	var labeling = new Array(data.length);
	for (var i = 0; i < data.length; i++) labeling[i] = 0;

	for (var i = 0; i < maxSteps; i++) {
//		console.error('10 labels', labeling.slice(0,10));
//		console.error('3 centers', [].concat.apply([],centers.slice(0,3).map(function (row) { return row.slice(0,2); })));
		var assignments = assignAll(labeling, data, centers);
//		console.error(assignments.clustering.slice(0,3));
		var assignChange = assignments.anyChanged;
		var clusterChange = recenterClusters(labeling, centers, data);
		var anyChanged = assignChange || clusterChange;
//		console.error('change', i, assignChange, clusterChange);
		if (!anyChanged) {
			break;
		}
	}

	var assignments = assignAll(labeling, data, centers); //under most recent clustering
	return {labeling: labeling, centers: centers, assignments: assignments.clustering};
}

module.exports = kmeans;
},{}],12:[function(_dereq_,module,exports){
"use strict";

var $ = _dereq_('jquery');
var Q = _dereq_('q');
var Long = _dereq_('./Long.js');
var debug = _dereq_("debug")("N-body:load");

var exports = {
    ls: function (matrixJson) {
        //FIXME do not do as eval

        var parts = matrixJson.split('/');
        parts.pop();
        var base = parts.join('/') + '/';

        var file = typeof window == 'undefined' ?
                Q.denodeify(_dereq_('fs').readFile)(matrixJson, {encoding: 'utf8'})
            :   Q($.ajax(matrixJson, {dataType: "text"}));

        return file
            .then(eval)
            .then(function (lst) {
                return lst.map(function (f) {
                    return {KB: f.KB, 'f': base + f.f};
                });
            });
    },


    loadBinary: function (file) { // -> Promise Binary
        debug("Loading binary file %s", file);

        var t0 = new Date().getTime();

        function Binary (buf) {
            return {
                edges: buf.subarray(4),
                min: buf[0],
                max: buf[1],
                numNodes: buf[2],
                numEdges: buf[3]
            };
        }

        if (typeof window == 'undefined') {
            var file = Q.denodeify(_dereq_('fs').readFile)(file)

            return file
                .then(function (nodeBuffer) {
                    return Binary(new Uint32Array((new Uint8Array(nodeBuffer)).buffer));
                });
        } else {
            var res = Q.defer();

            var xhr = new XMLHttpRequest();
            xhr.open('GET', file, true);
            xhr.responseType = 'arraybuffer';
            xhr.onload = function(e) {
                res.resolve(Binary(new Uint32Array(this.response)));
            };
            xhr.send();

            return res.promise;

        }

    },


    load: function (file) {
        var t0 = new Date().getTime();

        return typeof(window) == 'undefined' ?
                Q.denodeify(_dereq_('fs').readFile)(file, {encoding: 'utf8'})
            : Q($.ajax(file, {dataType: "text"}))
        .then(function (str) {
            //http://bl.ocks.org/mbostock/2846454
            var nodes = [];
            var links = str
              .split(/\n/g) // split lines
              .filter(function(d) { return d.charAt(0) != "%"; }) // skip comments
              .slice(1, -1) // skip header line, last line
              .map(function(d) {
                d = d.split(/\s+/g);
                var source = d[0] - 1, target = d[1] - 1;
                return {
                    source: nodes[source] || (nodes[source] = {index: source}),
                    target: nodes[target] || (nodes[target] = {index: target})
                };
            });

            debug("Did naive parse & transform in %d ms", new Date().getTime() - t0);

            return {
              nodes: nodes,
              links: links
            };
        });
    }, //load


    loadGeo: function(file) { // -> Promise Binary
        var t0 = new Date().getTime();

        debug("Loading Geo file %s", file);

        function Binary (buf) {
            var f32 = new Float32Array(buf.buffer);
            var i32 = new Int32Array(buf.buffer);
            var ui32 = buf;
            var struct32Length = 1 + 2 * (2 + 1 + 1);
            var struct8Length = 4 * (1 + 2 * (2 + 1 + 1));

            function toUTC(low, high) {
                return new Date(Long.fromBits(low, high, true).toNumber());
            }

            return {
                numEdges: buf.byteLength / struct8Length,
                id: function (i) { return ui32[i * struct32Length]; },
                startTime: function (i) {
                    var idx = i * struct32Length + 1;
                    return toUTC(i32[idx], i32[idx + 1]);
                },
                startLat: function (i) { return f32[i * struct32Length + 3]; },
                startLng: function (i) { return f32[i * struct32Length + 4]; },
                endTime: function (i) {
                    var idx = i * struct32Length + 5;
                    return toUTC(i32[idx], i32[idx + 1]);
                },
                endLat: function (i) { return f32[i * struct32Length + 7]; },
                endLng: function (i) { return f32[i * struct32Length + 8]; }
            };
        }

        var res = Q.defer();

        if (typeof(window) == 'undefined') {
            debug("Loading geo data with node.js fs module");

            return Q.denodeify(_dereq_('fs').readFile)(file)
                .then(function (nodeBuffer) {
                    return Binary(new Uint32Array((new Uint8Array(nodeBuffer)).buffer));
                }, function (err) {
                    console.error("Error loading geo data with fs module:", err);
                });
        } else {
            debug("Loading geo data with XHR");

            var xhr = new XMLHttpRequest();
            xhr.open('GET', file, true);
            xhr.responseType = 'arraybuffer';
            xhr.onload = function(e) {
                res.resolve(Binary(new Uint32Array(this.response)));
            };
            xhr.send();
        }

        return res.promise;
    },


    getGeoBounds: function (binary) {
        var minLat = Number.POSITIVE_INFINITY;
        var maxLat = Number.NEGATIVE_INFINITY;
        var minLng = Number.POSITIVE_INFINITY;
        var maxLng = Number.NEGATIVE_INFINITY;
        var avgLat = 0;
        var avgLng = 0;
        var sLat = 0;
        var sLng = 0;
        for (var i = 0; i < binary.numEdges; i++) {
            minLat = Math.min(Math.min(minLat, binary.startLat(i)), binary.endLat(i));
            maxLat = Math.max(Math.max(maxLat, binary.startLat(i)), binary.endLat(i));
            minLng = Math.min(Math.min(minLng, binary.startLng(i)), binary.endLng(i));
            maxLng = Math.max(Math.max(maxLng, binary.startLng(i)), binary.endLng(i));

            var newAvgLat = avgLat + (binary.startLat(i) + binary.endLat(i) - 2 * avgLat) / (i + 2);
            sLat = sLat
                + (binary.startLat(i) - newAvgLat) * (binary.startLat(i) - avgLat)
                + (binary.endLat(i) - newAvgLat) * (binary.endLat(i) - avgLat);
            avgLat = newAvgLat;

            var newAvgLng = avgLng + (binary.startLng(i) + binary.endLng(i) - 2 * avgLng) / (i + 2);
            sLng = sLng
                + (binary.startLng(i) - newAvgLng) * (binary.startLng(i) - avgLng)
                + (binary.endLng(i) - newAvgLng) * (binary.endLng(i) - avgLng);
            avgLng = newAvgLng;
        }
        var stdLat = Math.sqrt(sLat/(binary.numEdges - 1));
        var stdLng = Math.sqrt(sLng/(binary.numEdges - 1));

        // normalize_d(v_d) = (v_d + d.scale.c)/d.scale.x

        // Henceforth, whoever uses one-letter variable names for non-temporary variables owes
        // everybody else lunch
        return {
            lat: {min: minLat, max: maxLat, stats: {avg: avgLat, std: stdLat}, scale: {c: -(avgLat - 1.5 * stdLat), x: 3 * stdLat}},
            lng: {min: minLng, max: maxLng, stats: {avg: avgLng, std: stdLng}, scale: {c: -(avgLng - 1.5 * stdLng), x: 3 * stdLng}}
        };
    },


    /**
     * Takes geo data returned by loadGeo and returns an object containing and edge and points
     * array, with the points being properly normalized to be on [1,1]
     * @param {number} keepPercent - the decimal percentage of the data to include in the output
     * (defaults to 0.3)
     */
    processGeo: function(geoData, keepPercent) {
        keepPercent = keepPercent || 0.3;
        var points = [],
            edges = [],
            bounds = exports.getGeoBounds(geoData);

        for(var i = 0; i < geoData.numEdges; i++) {
            if(Math.random() > keepPercent) { continue; }

            points.push([(geoData.startLng(i) + bounds.lng.scale.c) / (bounds.lng.scale.x), (geoData.startLat(i) + bounds.lat.scale.c) / (bounds.lat.scale.x)]);
            points.push([(geoData.endLng(i) + bounds.lng.scale.c) / (bounds.lng.scale.x), (geoData.endLat(i) + bounds.lat.scale.c) / (bounds.lat.scale.x)]);
            edges.push([points.length - 2, points.length - 1]);
        }

        return {"points": points, "edges": edges};
    }
};

module.exports = exports;

},{"./Long.js":10,"debug":17,"fs":27,"jquery":21,"q":22}],13:[function(_dereq_,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

var Stats = function () {

    var startTime = Date.now(), prevTime = startTime;
    var ms = 0, msMin = Infinity, msMax = 0;
    var fps = 0, fpsMin = Infinity, fpsMax = 0;
    var frames = 0, mode = 0;

    var container = document.createElement( 'div' );
    container.id = 'stats';
    container.addEventListener( 'mousedown', function ( event ) { event.preventDefault(); setMode( ++ mode % 2 ) }, false );
    container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';

    var fpsDiv = document.createElement( 'div' );
    fpsDiv.id = 'fps';
    fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';
    container.appendChild( fpsDiv );

    var fpsText = document.createElement( 'div' );
    fpsText.id = 'fpsText';
    fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
    fpsText.innerHTML = 'FPS';
    fpsDiv.appendChild( fpsText );

    var fpsGraph = document.createElement( 'div' );
    fpsGraph.id = 'fpsGraph';
    fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';
    fpsDiv.appendChild( fpsGraph );

    while ( fpsGraph.children.length < 74 ) {

        var bar = document.createElement( 'span' );
        bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';
        fpsGraph.appendChild( bar );

    }

    var msDiv = document.createElement( 'div' );
    msDiv.id = 'ms';
    msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';
    container.appendChild( msDiv );

    var msText = document.createElement( 'div' );
    msText.id = 'msText';
    msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
    msText.innerHTML = 'MS';
    msDiv.appendChild( msText );

    var msGraph = document.createElement( 'div' );
    msGraph.id = 'msGraph';
    msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';
    msDiv.appendChild( msGraph );

    while ( msGraph.children.length < 74 ) {

        var bar = document.createElement( 'span' );
        bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';
        msGraph.appendChild( bar );

    }

    var setMode = function ( value ) {

        mode = value;

        switch ( mode ) {

            case 0:
                fpsDiv.style.display = 'block';
                msDiv.style.display = 'none';
                break;
            case 1:
                fpsDiv.style.display = 'none';
                msDiv.style.display = 'block';
                break;
        }

    }

    var updateGraph = function ( dom, value ) {

        var child = dom.appendChild( dom.firstChild );
        child.style.height = value + 'px';

    }

    return {

        REVISION: 11,

        domElement: container,

        setMode: setMode,

        begin: function () {

            startTime = Date.now();

        },

        end: function () {

            var time = Date.now();

            ms = time - startTime;
            msMin = Math.min( msMin, ms );
            msMax = Math.max( msMax, ms );

            msText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';
            updateGraph( msGraph, Math.min( 30, 30 - ( ms / 200 ) * 30 ) );

            frames ++;

            if ( time > prevTime + 1000 ) {

                fps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );
                fpsMin = Math.min( fpsMin, fps );
                fpsMax = Math.max( fpsMax, fps );

                fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';
                updateGraph( fpsGraph, Math.min( 30, 30 - ( fps / 100 ) * 30 ) );

                prevTime = time;
                frames = 0;

            }

            return time;

        },

        update: function () {

            startTime = this.end();

        }

    }

};


module.exports = Stats;
},{}],14:[function(_dereq_,module,exports){
/*

    Data generated via facebook/networkx $ python fb.py (manually setting dataset sizes)

*/


"use strict";


var PATH = 'data/gml/';

var $ = _dereq_('jquery'),
    Q = _dereq_('q'),
    _ = _dereq_('underscore');

var debug = _dereq_("debug")("N-body:load:gml");


function ls () {
    return [
        'output_v100_e207.json',
        'output_v1000_e9803.json',
        'output_v10000_e57292.json',
        'output_v50000_e136204.json',
        'output_v265214_e420045.json'
    ].map(function (v) {
        return PATH + v;
    });
}

/*
    input: path to GML JSON file
        gen from networkx: json.dumps((json_graph.node_link_data(nxg)), indent=1)
    pathstring ->
        {
            nodes: {colors: uint32array, sizes: flaot32array},
            edges: uint32array,
            min: int, max: int, numNodes: int, numEdges: int
        }
*/
function loadGMLJSON (path) {

    var file = typeof window == 'undefined' ?
        Q.denodeify(_dereq_('fs').readFile)(path, {encoding: 'utf8'})
    :   Q($.ajax(path, {dataType: "text"}));

    var json = file.then(JSON.parse);

    return json.then(
        function (data) {

            var nodes = data.nodes.slice(0);
            var res = {
                nodes: {
                    colors: new Uint32Array(_.pluck(nodes, 'color')),
                    sizes: new Uint8Array(nodes.length)
                },
                edges: data.links.map(function (o) { return [o.source, o.target]; }),
                //BUG some reason
                edgesFlat:
                    new Uint32Array(
                        _.flatten(
                            data.links.map(function (o) {
                                return [o.source, o.target]; }))),
                min: 0,
                max: data.nodes.length,
                numNodes: data.nodes.length,
                numEdges: data.links.length
            };
            for (var i = 0; i < data.nodes.length; i++) {
                res.nodes.sizes[i] = Math.round(10 * nodes[i].size / 0.125);
            }
            for (var i = 0; i < data.nodes.length; i++) {
                res.nodes.colors[i] = (res.nodes.colors[i] << 8) | 255;
            }
            return res;
        },
        function (err) {
            console.error('parse error', err);
        });
}

function demo () {

    var out = loadGMLJSON('/Users/lmeyerov/Desktop/Graphistry/experiments/facebook/networkx/output_v1000_e9803.json')
    .then(
        function (v) { console.log('done', v) },
        function (err) { console.log('oops', err, err.stack) });

}

module.exports = {
    ls: ls,
    loadGMLJSON: loadGMLJSON
}

},{"debug":17,"fs":27,"jquery":21,"q":22,"underscore":23}],15:[function(_dereq_,module,exports){
"use strict";

var $ = _dereq_('jQuery'),
    NBody = _dereq_('./NBody.js'),
    RenderGL = _dereq_('./RenderGL.js'),
    SimCL = _dereq_('./SimCL.js'),
    MatrixLoader = _dereq_('./libs/load.js'),
    Q = _dereq_('q'),
    Stats = _dereq_('./libs/stats.js'),
    events = _dereq_('./SimpleEvents.js'),
    kmeans = _dereq_('./libs/kmeans.js'),
    loader = _dereq_('./data-loader.js')

var graph = null,
    numPoints = 1000,//1024,//2048,//16384,
    num,
    numEdges = numPoints,
    dimensions = [1,1]; //[960,960];




// Returns an object with functions that can start and stop the animation
// document is the webgl document the animation should run in
// doStepPromised is a function which actually executes simulating & rendering an animation step,
// and returns a promise which is resolved when the step is done.
function animator (document, doStepPromised) {

    var animating = false;

    var next = function (f) {
        var base = (typeof window == 'undefined' ? document : window);
        base.requestAnimationFrame(f);
    }


    var step = 0;
    var bound = Infinity;

    var res = {
        stopAnimation: function () {
            animating = false;
            return res;
        },
        startAnimation: function (maybeCb, maybeMaxSteps) {
            if(typeof maybeMaxSteps === "number") {
                bound = maybeMaxSteps;
                var announceIncrement = Math.round(maybeMaxSteps / 10);
                console.debug("Starting graph animation for", maybeMaxSteps, "steps");
            } else {
                var announceIncrement = 1000;
                console.debug("Starting graph animation and running forever");
            }

            animating = true;
            // Calls the promise, and when it resolves, call next() to run this again next frame
            var run = function () {
                step++;
                bound--;

                if(step > 0 && step % announceIncrement === 0) {
                    console.debug("Animating step", step, "(" + bound + " steps left)");
                }

                doStepPromised()
                .then(function () {
                        if (animating && bound != 0) {
                            next(run);
                        } else {
                            if (maybeCb) maybeCb();
                        }
                    },
                    function() { console.error("ERROR", err, err.stack); }
                );
            };
            next(run);
            return res;
        }
    }
    return res;
}


function setup() {
    console.log("Running Naive N-body simulation");

    return NBody.create(SimCL, RenderGL, document, $("#simulation")[0], [0,0,0,0], dimensions, 3)
    .then(function(createdGraph) {
        graph = createdGraph;
        console.log("N-body graph created.");

        var points = loader.createPoints(numPoints, dimensions);
        var edges = loader.createEdges(numEdges, numPoints);

        return Q.all([
            graph.setPoints(points),
            points,
            edges,
        ]);
    })
    .spread(function(graph, points, edges) {
        graph.setColorMap("test-colormap2.png");
        return graph.setEdges(edges);
    })
    .then(function(graph) {
        var fpsTotal = new Stats();
        fpsTotal.setMode(0);
        $("#fpsTotal").append(fpsTotal.domElement);
        events.listen("tickBegin", function() { fpsTotal.begin(); });
        events.listen("tickEnd", function() { fpsTotal.end(); });

        var fpsSim = new Stats();
        fpsSim.setMode(1);
        $("#fpsSim").append(fpsSim.domElement);
        events.listen("simulateBegin", function() { fpsSim.begin(); });
        events.listen("simulateEnd", function() { fpsSim.end(); });

        var fpsRender = new Stats();
        fpsRender.setMode(1);
        $("#fpsRender").append(fpsRender.domElement);
        events.listen("renderBegin", function() { fpsRender.begin(); });
        events.listen("renderEnd", function() { fpsRender.end(); });

        var animButton = $("#anim-button");
        var stepButton = $("#step-button");

        var animation = animator(document, graph.tick);

        function startAnimation() {

            animButton.text("Stop");
            stepButton.prop("disabled", true);

            animButton.off().on("click", function() {
                animation.stopAnimation();
                stepButton.prop("disabled", false);
                animButton.text("Animate");
                animButton.off().on("click", startAnimation);
            });

            animation.startAnimation();
        }
        animButton.on("click", startAnimation);

        stepButton.on("click", function() {

            animation.stopAnimation();

            stepButton.prop("disabled", true);

            graph.tick()
            .then(function() {
                stepButton.prop("disabled", false);
            });
        });

        animButton.prop("disabled", false);
        stepButton.prop("disabled", false);

        //return graph.tick();
        return graph;
    });
}



function bindSliders(graph) {
    console.debug('setting physics');

    $('#charge').on('change', function (e) {
        var v = $(this).val();
        var res = 0.1;
        for (var i = 0; i < (100-v); i++) res /= 1.3;
        var scaled = -1 * res;
        //console.log('charge', v, '->', scaled);
        graph.setPhysics({charge: scaled});
    });
    $('#gravity').on('change', function (e) {
        var v = $(this).val();
        var res = 100.0;
        for (var i = 0; i < (100-v); i++) res /= 1.3;
        var scaled = 1 * res;
        //      console.log('gravity', v, '->', scaled);
        graph.setPhysics({gravity: scaled});
    });
    $('#strength').on('change', function (e) {
        var v = $(this).val();
        var res = 100.0;
        for (var i = 0; i < (100-v); i++) res /= 1.3;
        var scaled = 1 * res;
        //      console.log('strength', v, '->', scaled);
        graph.setPhysics({edgeStrength: scaled});
    });
    $('#length').on('change', function (e) {
        var v = $(this).val();
        var res = 100.0;
        for (var i = 0; i < (100-v); i++) res /= 1.3;
        var scaled = 1 * res;
        //      console.log('length', v, '->', scaled);
        graph.setPhysics({edgeDistance: scaled});
    });

    ['points', 'edges', 'midpoints', 'midedges'].forEach(function (name) {
        function bang () {
            var obj = {};
            obj[name] = $(this).is(':checked');
            graph.setVisible(obj);
        };
        $('#' + name).on('change', bang);
        bang.call($('#' + name));
    });

    ['lockPoints', 'lockEdges', 'lockMidpoints', 'lockMidedges'].forEach(function (name) {
        function bang () {
            var obj = {};
            obj[name] = $(this).is(':checked');
            graph.setLocked(obj);
        }
        $('#' + name).on('change', bang);
        bang.call($('#' + name));
    });


    //FORCE ATLAS 2 SLIDERS

    $('#scalingRatio').on('change', function (e) {
        var v = $(this).val();
        console.log('scalingRatio', v);
        graph.setPhysics({scalingRatio: v});
    });

     $('#edgeInfluence').on('change', function (e) {
        var v = $(this).val();
        console.log('edgeInfluence', v);
        graph.setPhysics({edgeInfluence: v});
    });

    ['forceAtlas', 'preventOverlap', 'strongGravity', 'dissuadeHubs'].forEach(function (name) {
        function bang () {
            var obj = {};
            obj[name] = $(this).is(':checked');
            graph.setPhysics(obj);
        };
        $('#' + name).on('change', bang);
        bang.call($('#' + name));
    });


}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

function renderDataList(dataList, graph) {

    var dataEl = $("#datasets");

    dataList.forEach(function(dataSet, i) {
        dataEl.append($('<option></option>')
            .attr('value', i)
            .text(i + '. ' + dataSet.base + " (" + dataSet.size + ")")
        );
    })

    // Set the starting selection of the <select> control to be blank, since we start with
    // random data loaded, not a matrix
    dataEl.prop('selectedIndex', -1)

    $('#datasets')
    .on('change', function () {
        var dataSet = dataList[parseInt(this.value)];

        return dataSet.loader(graph, dataSet.f)
            .then(function () {
                graph.tick();
            })
        .catch(function(err) {
            console.error("Error loading matrix:", err);
            throw err;
        })
    });
}



$(function () {

    setup().
    then(function() {
        console.debug("SETUP, LOADING DATA")
        return loader.loadDataList(graph);
    }).then(function (dataList) {
        renderDataList(dataList, graph);
    }).then(function () {
        console.debug("LOADED DATA, BINDING")
        return bindSliders(graph);
    }).then(function () {
        graph.tick(); //initial view
    }).then(
        function () { console.debug('DONE') },
        function (err) { console.error('oops', err, err.stack) })

});

},{"./NBody.js":1,"./RenderGL.js":2,"./SimCL.js":3,"./SimpleEvents.js":4,"./data-loader.js":6,"./libs/kmeans.js":11,"./libs/load.js":12,"./libs/stats.js":13,"jQuery":"nHrylo","q":22}],16:[function(_dereq_,module,exports){
"use strict";

var $ = _dereq_('jquery');
var Q = _dereq_('q');
var debug = _dereq_("debug")("N-body:utils");

var Image, webgl;

if (typeof(window) == 'undefined') {
    webgl = _dereq_('node-webgl');
    Image = webgl.Image;
} else {
    webgl = window.webgl;
    Image = window.Image;
}




function getSource(id) {
    // TODO: Could we use HTML <script> elements instead of AJAX fetches? We could possibly
    // set the src of the script to our content, the type to something other than JS. Then, we
    // listen for the onload event. In this way, we may be able to load content from disk
    // without running a server.

    if (typeof window == 'undefined') {
        var fs = _dereq_('fs');
        return Q.denodeify(fs.readFile)('shaders/' + id, {encoding: 'utf8'});
    } else {
        var url = "shaders/" + id;
        return Q($.ajax(url, {dataType: "text"}));
    }
}

/**
 * Fetch an image as an HTML Image object
 *
 * @returns a promise fulfilled with the HTML Image object, once loaded
 */
function getImage(url) {
    var deferred = Q.defer();
    try {
        var img = new Image();

        img.onload = function() {
            debug("Done loading <img>");

            deferred.resolve(img);
        };

        debug("Loading <img> from src %s", url);
        img.src = url;
        debug("  <img> src set");
    } catch (e) {
        deferred.reject(e);
    }

    return deferred.promise;
}


// Extends target by adding the attributes of one or more other objects to it
function extend(target, object1, objectN) {
    for (var arg = 1; arg < arguments.length; arg++) {
        for (var i in arguments[arg]) {
            target[i] = arguments[arg][i];
        }
    }
    return target;
}


module.exports = {
    "getSource": getSource,
    "getImage": getImage,
    "extend": extend
};

},{"debug":17,"fs":27,"jquery":21,"node-webgl":"+YTs4a","q":22}],17:[function(_dereq_,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = _dereq_('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // This hackery is required for IE8,
  // where the `console.log` function doesn't have 'apply'
  return 'object' == typeof console
    && 'function' == typeof console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      localStorage.removeItem('debug');
    } else {
      localStorage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = localStorage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

},{"./debug":18}],18:[function(_dereq_,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = _dereq_('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":19}],19:[function(_dereq_,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 's':
      return n * s;
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],20:[function(_dereq_,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.1.0
 */

/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


(function() {
  "use strict";

  var shim = {};
  if (typeof(exports) === 'undefined') {
    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      shim.exports = {};
      define(function() {
        return shim.exports;
      });
    } else {
      // gl-matrix lives in a browser, define its namespaces in global
      shim.exports = window;
    }    
  }
  else {
    // gl-matrix lives in commonjs, define its namespaces in exports
    shim.exports = exports;
  }

  (function(exports) {
    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

if(!GLMAT_ARRAY_TYPE) {
    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
}

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

/**
 * Sets the type of array used when creating new vectors and matricies
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
}

if(typeof(exports) !== 'undefined') {
    exports.glMatrix = glMatrix;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */

var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec2 = vec2;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */

var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec3 = vec3;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */

var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        out[3] = a[3] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec4 = vec4;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x2 Matrix
 * @name mat2
 */

var mat2 = {};

var mat2Identity = new Float32Array([
    1, 0,
    0, 1
]);

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a1 * b2;
    out[1] = a0 * b1 + a1 * b3;
    out[2] = a2 * b0 + a3 * b2;
    out[3] = a2 * b1 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a1 * s;
    out[1] = a0 * -s + a1 * c;
    out[2] = a2 *  c + a3 * s;
    out[3] = a2 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v1;
    out[2] = a2 * v0;
    out[3] = a3 * v1;
    return out;
};

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2 = mat2;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx,ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0
 *  c, d, 0
 *  tx,ty,1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

var mat2d = {};

var mat2dIdentity = new Float32Array([
    1, 0,
    0, 1,
    0, 0
]);

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new GLMAT_ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5],
        ba = b[0], bb = b[1], bc = b[2], bd = b[3],
        btx = b[4], bty = b[5];

    out[0] = aa*ba + ab*bc;
    out[1] = aa*bb + ab*bd;
    out[2] = ac*ba + ad*bc;
    out[3] = ac*bb + ad*bd;
    out[4] = ba*atx + bc*aty + btx;
    out[5] = bb*atx + bd*aty + bty;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;


/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var aa = a[0],
        ab = a[1],
        ac = a[2],
        ad = a[3],
        atx = a[4],
        aty = a[5],
        st = Math.sin(rad),
        ct = Math.cos(rad);

    out[0] = aa*ct + ab*st;
    out[1] = -aa*st + ab*ct;
    out[2] = ac*ct + ad*st;
    out[3] = -ac*st + ct*ad;
    out[4] = ct*atx + st*aty;
    out[5] = ct*aty - st*atx;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {mat2d} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var vx = v[0], vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {mat2d} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
};

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2d = mat2d;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3x3 Matrix
 * @name mat3
 */

var mat3 = {};

var mat3Identity = new Float32Array([
    1, 0, 0,
    0, 1, 0,
    0, 0, 1
]);

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new GLMAT_ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[2];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;

    out[3] = xy - wz;
    out[4] = 1 - (xx + zz);
    out[5] = yz + wx;

    out[6] = xz + wy;
    out[7] = yz - wx;
    out[8] = 1 - (xx + yy);

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat3 = mat3;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4x4 Matrix
 * @name mat4
 */

var mat4 = {};

var mat4Identity = new Float32Array([
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
]);

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new GLMAT_ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < GLMAT_EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
* Calculates a 4x4 matrix from the given quaternion
*
* @param {mat4} out mat4 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat4} out
*/
mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;

    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;

    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
        Math.abs(eyey - centery) < GLMAT_EPSILON &&
        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat4 = mat4;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class Quaternion
 * @name quat
 */

var quat = {};

var quatIdentity = new Float32Array([0, 0, 0, 1]);

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle around the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle around the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle around the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var cosHalfTheta = ax * bx + ay * by + az * bz + aw * bw,
        halfTheta,
        sinHalfTheta,
        ratioA,
        ratioB;

    if (Math.abs(cosHalfTheta) >= 1.0) {
        if (out !== a) {
            out[0] = ax;
            out[1] = ay;
            out[2] = az;
            out[3] = aw;
        }
        return out;
    }

    halfTheta = Math.acos(cosHalfTheta);
    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
        out[0] = (ax * 0.5 + bx * 0.5);
        out[1] = (ay * 0.5 + by * 0.5);
        out[2] = (az * 0.5 + bz * 0.5);
        out[3] = (aw * 0.5 + bw * 0.5);
        return out;
    }

    ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
    ratioB = Math.sin(t * halfTheta) / sinHalfTheta;

    out[0] = (ax * ratioA + bx * ratioB);
    out[1] = (ay * ratioA + by * ratioB);
    out[2] = (az * ratioA + bz * ratioB);
    out[3] = (aw * ratioA + bw * ratioB);

    return out;
};

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = (function() {
    var s_iNext = [1,2,0];
    return function(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        var fTrace = m[0] + m[4] + m[8];
        var fRoot;

        if ( fTrace > 0.0 ) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0);  // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5/fRoot;  // 1/(4w)
            out[0] = (m[7]-m[5])*fRoot;
            out[1] = (m[2]-m[6])*fRoot;
            out[2] = (m[3]-m[1])*fRoot;
        } else {
            // |w| <= 1/2
            var i = 0;
            if ( m[4] > m[0] )
              i = 1;
            if ( m[8] > m[i*3+i] )
              i = 2;
            var j = s_iNext[i];
            var k = s_iNext[j];
            
            fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[k*3+j] - m[j*3+k]) * fRoot;
            out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
            out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
        }
        
        return out;
    };
})();

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.quat = quat;
}
;













  })(shim.exports);
})();

},{}],21:[function(_dereq_,module,exports){
/*!
 * jQuery JavaScript Library v2.1.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	// Support: Windows Web Apps (WWA)
	// `name` and `type` need .setAttribute for WWA
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE9-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],22:[function(_dereq_,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    // Turn off strict mode for this function so we can assign to global.Q
    /* jshint strict: false */

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else {
        Q = definition();
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;

    function flush() {
        /* jshint loopfunc: true */

        while (head.next) {
            head = head.next;
            var task = head.task;
            head.task = void 0;
            var domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }

            try {
                task();

            } catch (e) {
                if (isNodeJS) {
                    // In node, uncaught exceptions are considered fatal errors.
                    // Re-throw them synchronously to interrupt flushing!

                    // Ensure continuation if the uncaught exception is suppressed
                    // listening "uncaughtException" events (as domains does).
                    // Continue in next event to avoid tick recursion.
                    if (domain) {
                        domain.exit();
                    }
                    setTimeout(flush, 0);
                    if (domain) {
                        domain.enter();
                    }

                    throw e;

                } else {
                    // In browsers, uncaught exceptions are not fatal.
                    // Re-throw them asynchronously to avoid slow-downs.
                    setTimeout(function() {
                       throw e;
                    }, 0);
                }
            }

            if (domain) {
                domain.exit();
            }
        }

        flushing = false;
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process !== "undefined" && process.nextTick) {
        // Node.js before 0.9. Note that some fake-Node environments, like the
        // Mocha test runner, introduce a `process` global without a `nextTick`.
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }

    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (isPromise(value)) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become fulfilled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be fulfilled
 */
Q.race = race;
function race(answerPs) {
    return promise(function(resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function(answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return isObject(object) &&
        typeof object.promiseDispatch === "function" &&
        typeof object.inspect === "function";
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return result.value;
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return exception.value;
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var countDown = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++countDown;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--countDown === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (countDown === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {String} custom error message (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, message) {
    return Q(object).timeout(ms, message);
};

Promise.prototype.timeout = function (ms, message) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,_dereq_("IMmnkj"))
},{"IMmnkj":29}],23:[function(_dereq_,module,exports){
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);

},{}],24:[function(_dereq_,module,exports){
var _ = _dereq_('underscore');

//statement -> language -> {rating, deviation}
var data = _dereq_('./out.json');

var statements = _.keys(data);
var languages = _.keys(data[statements[0]]);

var nodeLabels = statements.concat(languages);
var textToNodeIdx =
    _.object(_.zip(
        nodeLabels,
        nodeLabels.map(nodeLabels.indexOf.bind(nodeLabels))));

var allRatings = _.flatten(
        _.values(data)
        .map(function (langs) {
            return _.values(langs)
                .map(function (lang) {
                    return lang.rating; }); }));
var maxRating = Math.max.apply(Math, allRatings);
var minRating = Math.min.apply(Math, allRatings);


function rgbaToInt (r,g,b,a) {
    return ((r&255) << 24) | ((g&255) << 16) | ((b&255)|8) | (a&255);
}
function intToRgba (x) {
    return [
        (x >> 24) & 255,
        (x >> 16) & 255,
        (x >> 8) & 255,
        x & 255,
    ];
}
//int * int * (0--1) -> int
function lerp (a, b, weight) {
    return rgbaToInt(
        _.zip(intToRgba(a), intToRgba(b))
            .map(function (c1, c2) {
                return Math.floor(weight * c1 + (1 - weight) * c2);
            }));
}


var RED = (255 << 24) | 255;
var GREEN = (255 << 16) | 255;
var DARK_GREEN = (102 << 16) | 255;
var BLUE = (255 << 8) | 255;

var nodes =
    nodeLabels.map(function (label, i) {
        return {
            label: label,
            size: 12,
            color: i >= statements.length ? GREEN : DARK_GREEN
        };
    });

var edges =
    _.flatten(statements.map(function (statement) {
        return languages.map(function (language) {
            var weight = (data[statement][language].rating - minRating) / (maxRating - minRating);
            return {
                src: textToNodeIdx[statement],
                dst: textToNodeIdx[language],
                weight: weight,
                color: lerp(RED, BLUE, weight)
            }
        })
    }));

//console.log('nodes', nodes);
//console.log('edges', edges);

module.exports = {
    nodes: nodes,
    edges: edges
};
},{"./out.json":26,"underscore":25}],25:[function(_dereq_,module,exports){
//     Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.7.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var createCallback = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  _.iteratee = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return createCallback(value, context, argCount);
    if (_.isObject(value)) return _.matches(value);
    return _.property(value);
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    if (obj == null) return obj;
    iteratee = createCallback(iteratee, context);
    var i, length = obj.length;
    if (length === +length) {
      for (i = 0; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    if (obj == null) return [];
    iteratee = _.iteratee(iteratee, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length),
        currentKey;
    for (var index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index = 0, currentKey;
    if (arguments.length < 3) {
      if (!length) throw new TypeError(reduceError);
      memo = obj[keys ? keys[index++] : index++];
    }
    for (; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== + obj.length && _.keys(obj),
        index = (keys || obj).length,
        currentKey;
    if (arguments.length < 3) {
      if (!index) throw new TypeError(reduceError);
      memo = obj[keys ? keys[--index] : --index];
    }
    while (index--) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    predicate = _.iteratee(predicate, context);
    _.some(obj, function(value, index, list) {
      if (predicate(value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    predicate = _.iteratee(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    if (obj == null) return true;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    if (obj == null) return false;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length !== +obj.length) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = _.iteratee(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (isSorted) {
        if (!i || seen !== value) result.push(value);
        seen = value;
      } else if (iteratee) {
        var computed = iteratee(value, i, array);
        if (_.indexOf(seen, computed) < 0) {
          seen.push(computed);
          result.push(value);
        }
      } else if (_.indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(array) {
    if (array == null) return [];
    var length = _.max(arguments, 'length').length;
    var results = Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var idx = array.length;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var Ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    args = slice.call(arguments, 2);
    bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      Ctor.prototype = func.prototype;
      var self = new Ctor;
      Ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (_.isObject(result)) return result;
      return self;
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = hasher ? hasher.apply(this, arguments) : key;
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed before being called N times.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      } else {
        func = null;
      }
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    if (!_.isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = createCallback(iteratee, context);
      for (key in obj) {
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    if (!_.isObject(obj)) return obj;
    for (var i = 1, length = arguments.length; i < length; i++) {
      var source = arguments[i];
      for (var prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      // Handle Object.create(x) cases
      'constructor' in a && 'constructor' in b &&
      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
        _.isFunction(bCtor) && bCtor instanceof bCtor)
    ) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size, result;
    // Recursively compare objects and arrays.
    if (className === '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size === b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      size = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      result = _.keys(b).length === size;
      if (result) {
        while (size--) {
          // Deep compare each member
          key = keys[size];
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
  if (typeof /./ !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    var pairs = _.pairs(attrs), length = pairs.length;
    return function(obj) {
      if (obj == null) return !length;
      obj = new Object(obj);
      for (var i = 0; i < length; i++) {
        var pair = pairs[i], key = pair[0];
        if (pair[1] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = createCallback(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],26:[function(_dereq_,module,exports){
module.exports={"This language excels at text processing": {"Coq": {"deviation": "40.4360204699", "rating": "1113.03624217", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0612260179036"}, "Eiffel": {"deviation": "35.3004745112", "rating": "1437.10253317", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0607959245866"}, "Java": {"deviation": "47.5455074217", "rating": "1518.66215837", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0863877286709"}, "Scala": {"deviation": "38.7344627038", "rating": "1696.69613633", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0610913656678"}, "Delphi": {"deviation": "37.719613897", "rating": "1326.8661548", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0610426636751"}, "Ada": {"deviation": "35.8799861052", "rating": "1350.98166865", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0624897055643"}, "Perl": {"deviation": "48.1094569573", "rating": "2053.28932018", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0598917072934"}, "Lua": {"deviation": "40.1062491194", "rating": "1605.37618863", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0653386274846"}, "Shell": {"deviation": "40.2841019728", "rating": "1555.53299972", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0697504115256"}, "Matlab": {"deviation": "38.5021089362", "rating": "1261.57972721", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0599292936358"}, "Factor": {"deviation": "38.2035705715", "rating": "1556.88795308", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0604356991793"}, "Haxe": {"deviation": "53.5118690667", "rating": "1605.50168344", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0599878675203"}, "Erlang": {"deviation": "37.2755553281", "rating": "1374.49152654", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0615494606067"}, "Forth": {"deviation": "37.4616393127", "rating": "1319.5074961", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0602543916876"}, "Scheme": {"deviation": "40.0859279203", "rating": "1525.67000221", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0732974388576"}, "Objective C": {"deviation": "40.0995181491", "rating": "1367.46306019", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0601246280124"}, "C#": {"deviation": "43.2700395837", "rating": "1561.95153168", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0678149674078"}, "Javascript": {"deviation": "49.6204856086", "rating": "1421.50561903", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.103014388009"}, "Common Lisp": {"deviation": "37.8393647202", "rating": "1544.26801657", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0638572514765"}, "TCL": {"deviation": "40.3058850688", "rating": "1630.78275338", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0634224045464"}, "F#": {"deviation": "38.2971959533", "rating": "1610.82762987", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.060314004723"}, "AWK": {"deviation": "46.2567233956", "rating": "1947.45030108", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0602561610192"}, "Ruby": {"deviation": "43.2088369004", "rating": "1898.32491752", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0602272355883"}, "Agda": {"deviation": "64.9487490821", "rating": "1308.78860008", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0600836107376"}, "Groovy": {"deviation": "38.5358716435", "rating": "1649.36688945", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0617168635735"}, "C": {"deviation": "42.7327346948", "rating": "1285.26409149", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0638808476839"}, "Mathematica": {"deviation": "41.6983526686", "rating": "1288.80647162", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0600271297559"}, "D": {"deviation": "36.6867495956", "rating": "1539.11025578", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0606785115888"}, "O'Caml": {"deviation": "40.0380955808", "rating": "1614.81410231", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0645733170953"}, "Io": {"deviation": "36.8477539633", "rating": "1429.4825106", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0606701053019"}, "J": {"deviation": "42.6062151625", "rating": "1216.8828154", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0600687947734"}, "ELisp": {"deviation": "36.5237072096", "rating": "1712.00390589", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.060730241371"}, "C++": {"deviation": "41.4176697927", "rating": "1453.1182609", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0703569528304"}, "Standard ML": {"deviation": "36.2710622432", "rating": "1467.26084396", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.060324943587"}, "R": {"deviation": "38.9134137116", "rating": "1352.2632058", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0610018943468"}, "Clojure": {"deviation": "38.1614623586", "rating": "1654.68761768", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0609854498114"}, "Prolog": {"deviation": "38.7426707965", "rating": "1323.60679739", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0631929290514"}, "REBOL": {"deviation": "96.4003642211", "rating": "1946.04496028", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0609116768296"}, "Fortran": {"deviation": "44.3092790124", "rating": "1138.0243353", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.059880690719"}, "Assembler": {"deviation": "48.913545816", "rating": "1104.22071937", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0599088179676"}, "Python": {"deviation": "47.2350721712", "rating": "1838.62888944", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0593775166684"}, "Pascal": {"deviation": "39.5517360177", "rating": "1297.66329623", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0599834070739"}, "Haskell": {"deviation": "42.7101244266", "rating": "1601.84474379", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0739724842677"}, "Cobol": {"deviation": "37.374226404", "rating": "1217.61221427", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0602391284008"}, "APL": {"deviation": "41.1467067218", "rating": "1136.33908527", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0601919630544"}, "ActionScript": {"deviation": "152.436739535", "rating": "1339.18872206", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0600052098056"}, "Go": {"deviation": "35.6969229822", "rating": "1495.73227486", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0625744029751"}, "Visual Basic": {"deviation": "40.0518911116", "rating": "1490.7027912", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0631631167755"}, "PHP": {"deviation": "48.876578534", "rating": "1636.2773058", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0776988799831"}, "Mozart-Oz": {"deviation": "40.4281912743", "rating": "1483.79447314", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0605932564345"}, "Smalltalk": {"deviation": "35.3644417855", "rating": "1566.44648916", "ratingsMin": "1104.22071937", "ratingsMax": "2053.28932018", "volatility": "0.0615286196327"}}, "There are many good commercial tools for this language": {"Coq": {"deviation": "40.3527288351", "rating": "1236.5702963", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0600612434927"}, "Eiffel": {"deviation": "39.8807136364", "rating": "1331.64302787", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0602351170884"}, "Java": {"deviation": "50.1856598207", "rating": "2068.67364798", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0596083727396"}, "Scala": {"deviation": "43.5336336595", "rating": "1408.42276572", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0713896641261"}, "Delphi": {"deviation": "39.0032126292", "rating": "1613.90365358", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0610041522804"}, "Ada": {"deviation": "37.1455634229", "rating": "1415.76184224", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.063066260654"}, "Perl": {"deviation": "41.9211393179", "rating": "1413.52138791", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0722803354709"}, "Lua": {"deviation": "37.1346230497", "rating": "1393.46465593", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0620275667556"}, "Shell": {"deviation": "39.5863386137", "rating": "1327.43888151", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0604538462233"}, "Matlab": {"deviation": "40.6252301346", "rating": "1642.25990958", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0614050433444"}, "Factor": {"deviation": "49.2310747537", "rating": "1113.3399518", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0607286991875"}, "Haxe": {"deviation": "45.729552055", "rating": "1343.13337493", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.060045424133"}, "Erlang": {"deviation": "36.7657249454", "rating": "1390.67762158", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0620113629298"}, "Forth": {"deviation": "38.4304375839", "rating": "1373.75312462", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0606016988986"}, "Scheme": {"deviation": "39.530860024", "rating": "1403.91420258", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0618081141935"}, "Objective C": {"deviation": "37.5686788566", "rating": "1656.37308219", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0619007652434"}, "C#": {"deviation": "43.6196325159", "rating": "1993.21334471", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0597300425525"}, "Javascript": {"deviation": "42.7247083423", "rating": "1609.02161454", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0666609124241"}, "Common Lisp": {"deviation": "40.4738285106", "rating": "1498.91102695", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0713436092665"}, "TCL": {"deviation": "38.9168536181", "rating": "1258.93368749", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0614638012664"}, "F#": {"deviation": "37.6331389328", "rating": "1688.61825142", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0607074680127"}, "AWK": {"deviation": "40.47088185", "rating": "1276.39806335", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0601105581532"}, "Ruby": {"deviation": "39.8831419346", "rating": "1582.06351363", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0688437619439"}, "Agda": {"deviation": "88.2173127187", "rating": "860.455062545", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0607088042272"}, "Groovy": {"deviation": "39.3022650285", "rating": "1616.97028917", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0636039394922"}, "C": {"deviation": "43.7575717677", "rating": "1882.34984808", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0591113046366"}, "Mathematica": {"deviation": "40.6922210085", "rating": "1635.21573885", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0607918732785"}, "D": {"deviation": "39.5265726246", "rating": "1336.35758675", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0604041880167"}, "O'Caml": {"deviation": "39.4577392695", "rating": "1310.3060261", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0598927884209"}, "Io": {"deviation": "48.135270154", "rating": "1166.42446694", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0600229878354"}, "J": {"deviation": "38.5427637955", "rating": "1333.79213287", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0603379759933"}, "ELisp": {"deviation": "40.5578933726", "rating": "1139.85984532", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0600668623834"}, "C++": {"deviation": "44.412973607", "rating": "1923.76394723", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0592173877608"}, "Standard ML": {"deviation": "38.9631034097", "rating": "1250.89445643", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0606428300293"}, "R": {"deviation": "37.6842769694", "rating": "1385.29129406", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0622308233596"}, "Clojure": {"deviation": "36.1688311812", "rating": "1445.65644191", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0617988038861"}, "Prolog": {"deviation": "40.1111319046", "rating": "1283.09831375", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0606791790225"}, "REBOL": {"deviation": "72.4925564746", "rating": "1163.7183652", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0599991697484"}, "Fortran": {"deviation": "35.8140681546", "rating": "1534.36702164", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0655433129037"}, "Assembler": {"deviation": "47.6605520442", "rating": "1459.56169833", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0806167372832"}, "Python": {"deviation": "43.5471861517", "rating": "1589.5528998", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0646483330656"}, "Pascal": {"deviation": "43.7463735223", "rating": "1372.56946388", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0604286568625"}, "Haskell": {"deviation": "40.8285715143", "rating": "1351.0977362", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0603248771804"}, "Cobol": {"deviation": "36.9925386577", "rating": "1479.21736779", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0634395989574"}, "APL": {"deviation": "35.0968136786", "rating": "1283.35215087", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.060343614502"}, "ActionScript": {"deviation": "115.127467384", "rating": "1816.67156879", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.060203672786"}, "Go": {"deviation": "39.1414514775", "rating": "1266.96918107", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0603857924985"}, "Visual Basic": {"deviation": "41.3230212285", "rating": "1772.0013696", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0612678468261"}, "PHP": {"deviation": "40.450298151", "rating": "1639.46801803", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0631949942594"}, "Mozart-Oz": {"deviation": "40.4005733398", "rating": "1259.20364126", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0619622217868"}, "Smalltalk": {"deviation": "39.4936463681", "rating": "1542.14010591", "ratingsMin": "860.455062545", "ratingsMax": "2068.67364798", "volatility": "0.0662408499763"}}, "This language allows me to write programs where I know exactly what they are doing under the hood": {"Coq": {"deviation": "36.0799019744", "rating": "1437.24162464", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0619734501828"}, "Eiffel": {"deviation": "33.9299222025", "rating": "1497.80381282", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0615537533993"}, "Java": {"deviation": "53.7617224088", "rating": "1562.65558236", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.126229391449"}, "Scala": {"deviation": "40.8007257878", "rating": "1436.73773511", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.071741185174"}, "Delphi": {"deviation": "40.1093298641", "rating": "1484.24600765", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0693163333547"}, "Ada": {"deviation": "37.1715410426", "rating": "1616.47230778", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0622940462259"}, "Perl": {"deviation": "39.2984120023", "rating": "1396.7072755", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0642169803192"}, "Lua": {"deviation": "39.7610742951", "rating": "1521.53300311", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0749098052795"}, "Shell": {"deviation": "41.8398972719", "rating": "1349.72171952", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.073602697881"}, "Matlab": {"deviation": "42.3705281015", "rating": "1285.96355794", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.06130977296"}, "Factor": {"deviation": "36.7528446306", "rating": "1456.43370422", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.061501255566"}, "Haxe": {"deviation": "41.1256365012", "rating": "1507.04859949", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0610005584381"}, "Erlang": {"deviation": "37.9621104285", "rating": "1403.83160298", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0662165527354"}, "Forth": {"deviation": "41.0220632624", "rating": "1812.74078904", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0607006314395"}, "Scheme": {"deviation": "42.7718089075", "rating": "1443.73921336", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0834915772712"}, "Objective C": {"deviation": "38.8099236222", "rating": "1579.7060614", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0658288204329"}, "C#": {"deviation": "43.7225771848", "rating": "1495.61438774", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0719814909776"}, "Javascript": {"deviation": "40.9748278537", "rating": "1335.7613685", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.061569989713"}, "Common Lisp": {"deviation": "45.0642793884", "rating": "1471.82107298", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0871881188626"}, "TCL": {"deviation": "34.6415987846", "rating": "1485.47262452", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0640173404994"}, "F#": {"deviation": "36.7001552571", "rating": "1381.06175314", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0613277016712"}, "AWK": {"deviation": "37.4103348406", "rating": "1375.04706252", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0663410851265"}, "Ruby": {"deviation": "41.3585790651", "rating": "1332.0775453", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0609695468251"}, "Agda": {"deviation": "61.0673331237", "rating": "1293.91397417", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0601555955983"}, "Groovy": {"deviation": "36.8193399181", "rating": "1428.71513902", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0610825524193"}, "C": {"deviation": "48.2520408189", "rating": "1918.03178451", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0596041586253"}, "Mathematica": {"deviation": "48.2461313008", "rating": "1150.56066646", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0600806349736"}, "D": {"deviation": "39.6676663179", "rating": "1656.24055745", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0621388093775"}, "O'Caml": {"deviation": "41.4548265926", "rating": "1527.93967372", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0788978331051"}, "Io": {"deviation": "39.1806285536", "rating": "1365.30600619", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0605748144777"}, "J": {"deviation": "35.8451136235", "rating": "1485.15689699", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0660462801804"}, "ELisp": {"deviation": "37.1289117762", "rating": "1357.79622162", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0617393911394"}, "C++": {"deviation": "44.6804232869", "rating": "1643.82672231", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0728416838529"}, "Standard ML": {"deviation": "38.5180146381", "rating": "1469.38927675", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.070478192376"}, "R": {"deviation": "40.2711046418", "rating": "1280.110669", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0601471345037"}, "Clojure": {"deviation": "38.527480327", "rating": "1450.38603942", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0637555614508"}, "Prolog": {"deviation": "39.3058858455", "rating": "1269.94376663", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0610777800268"}, "REBOL": {"deviation": "88.0215386184", "rating": "1300.72381737", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0602158309853"}, "Fortran": {"deviation": "37.7566000545", "rating": "1690.95898944", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0610175168638"}, "Assembler": {"deviation": "50.9047190127", "rating": "2121.75569233", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.06032123464"}, "Python": {"deviation": "54.1274955852", "rating": "1495.44815964", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.111388882201"}, "Pascal": {"deviation": "38.4464232665", "rating": "1537.47602782", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0643293297932"}, "Haskell": {"deviation": "41.6966436067", "rating": "1282.10127123", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0681197420759"}, "Cobol": {"deviation": "37.1474846269", "rating": "1421.96369857", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0640150276818"}, "APL": {"deviation": "36.1635299073", "rating": "1355.25584377", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0601526072488"}, "ActionScript": {"deviation": "64.3213360388", "rating": "1357.02395393", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0600271253409"}, "Go": {"deviation": "35.8685605964", "rating": "1583.90995185", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0623496350856"}, "Visual Basic": {"deviation": "37.5781996765", "rating": "1274.42471138", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0600669807538"}, "PHP": {"deviation": "39.7521842944", "rating": "1340.36108402", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0631567241422"}, "Mozart-Oz": {"deviation": "33.2670606129", "rating": "1387.24290198", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.06116145211"}, "Smalltalk": {"deviation": "37.8409790644", "rating": "1426.40119849", "ratingsMin": "1150.56066646", "ratingsMax": "2121.75569233", "volatility": "0.0656837183732"}}, "I use many applications written in this language": {"Coq": {"deviation": "55.2178926674", "rating": "1074.81164482", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602614911349"}, "Eiffel": {"deviation": "35.8055106205", "rating": "1402.82680462", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0614380249062"}, "Java": {"deviation": "42.4523815718", "rating": "1859.71204315", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0586746392693"}, "Scala": {"deviation": "43.047087401", "rating": "1517.57448133", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0665876960115"}, "Delphi": {"deviation": "42.7721572461", "rating": "1439.46924199", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.065780226059"}, "Ada": {"deviation": "38.7110925176", "rating": "1350.86448824", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602584408791"}, "Perl": {"deviation": "38.3123623316", "rating": "1644.72947664", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0619897815579"}, "Lua": {"deviation": "39.8263718692", "rating": "1497.97535887", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.06523239876"}, "Shell": {"deviation": "39.0361779464", "rating": "1561.01637463", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0607603673907"}, "Matlab": {"deviation": "41.2142710864", "rating": "1392.42562326", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0612504188502"}, "Factor": {"deviation": "58.3579386837", "rating": "1017.67388359", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602627981553"}, "Haxe": {"deviation": "73.8509831694", "rating": "1457.93561303", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0601994541454"}, "Erlang": {"deviation": "42.8087629345", "rating": "1386.77286726", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0665804973011"}, "Forth": {"deviation": "38.5209723417", "rating": "1239.00914897", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0612260900108"}, "Scheme": {"deviation": "41.4589516791", "rating": "1388.1435593", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0627879800493"}, "Objective C": {"deviation": "38.208084536", "rating": "1769.25344922", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.060466082618"}, "C#": {"deviation": "40.591417517", "rating": "1803.90555329", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0623006796425"}, "Javascript": {"deviation": "40.7278593968", "rating": "1839.96453648", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.059236407557"}, "Common Lisp": {"deviation": "38.6687118264", "rating": "1356.30912071", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0643933629564"}, "TCL": {"deviation": "36.7007339983", "rating": "1450.11602725", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0617477153627"}, "F#": {"deviation": "39.882641853", "rating": "1431.10710688", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0609765089724"}, "AWK": {"deviation": "39.2814559291", "rating": "1492.45880716", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0644658149566"}, "Ruby": {"deviation": "43.0896269482", "rating": "1672.54633878", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0633224279822"}, "Agda": {"deviation": "64.2578235542", "rating": "1237.65066902", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602354204082"}, "Groovy": {"deviation": "40.0148966928", "rating": "1397.58436479", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0608054431585"}, "C": {"deviation": "44.5039692", "rating": "1972.7759271", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0593974223425"}, "Mathematica": {"deviation": "40.8704197036", "rating": "1308.16900471", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0601260251851"}, "D": {"deviation": "39.9155259604", "rating": "1234.83937603", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0599095956533"}, "O'Caml": {"deviation": "39.2379252184", "rating": "1389.76514607", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0649824722215"}, "Io": {"deviation": "46.5107428336", "rating": "1144.18546012", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602570465398"}, "J": {"deviation": "47.2289277733", "rating": "1366.77668251", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0608851967815"}, "ELisp": {"deviation": "36.4647389879", "rating": "1642.85710805", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0612140716762"}, "C++": {"deviation": "43.2741772119", "rating": "2021.72426386", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0593741427798"}, "Standard ML": {"deviation": "40.1325288516", "rating": "1218.77267", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0600396218259"}, "R": {"deviation": "41.2249486052", "rating": "1500.90618515", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0633124547289"}, "Clojure": {"deviation": "43.1641949525", "rating": "1374.15611857", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0601615371153"}, "Prolog": {"deviation": "41.5651813374", "rating": "1194.95554385", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0606774560252"}, "REBOL": {"deviation": "153.426048456", "rating": "1403.76283137", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0599956008509"}, "Fortran": {"deviation": "41.517729669", "rating": "1358.3685547", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0628077566651"}, "Assembler": {"deviation": "47.175897749", "rating": "1395.8610503", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0801947726289"}, "Python": {"deviation": "42.1656252953", "rating": "1725.98887963", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0591576147209"}, "Pascal": {"deviation": "41.2005836815", "rating": "1315.67069815", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602719298738"}, "Haskell": {"deviation": "46.0780825867", "rating": "1418.30558954", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0699467546152"}, "Cobol": {"deviation": "42.9841503624", "rating": "1262.54465611", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0603441980275"}, "APL": {"deviation": "38.2827038939", "rating": "1232.70404979", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0606032314996"}, "ActionScript": {"deviation": "63.5432171627", "rating": "1614.83730666", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0600662318567"}, "Go": {"deviation": "39.6488735629", "rating": "1288.63305667", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0601973101745"}, "Visual Basic": {"deviation": "46.5399040753", "rating": "1477.83991246", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0747671832001"}, "PHP": {"deviation": "40.9395935661", "rating": "1724.38365691", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0600229237302"}, "Mozart-Oz": {"deviation": "49.1157137112", "rating": "1147.79005144", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0602289730835"}, "Smalltalk": {"deviation": "40.2680706145", "rating": "1423.23394937", "ratingsMin": "1017.67388359", "ratingsMax": "2021.72426386", "volatility": "0.0626649128269"}}, "I can imagine this will be a popular language in twenty years time": {"Coq": {"deviation": "31.9465392996", "rating": "1424.62903675", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0621361648976"}, "Eiffel": {"deviation": "32.0911122692", "rating": "1383.79179034", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.061311799345"}, "Java": {"deviation": "49.4252698227", "rating": "1562.03382875", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.110176037137"}, "Scala": {"deviation": "42.4642764004", "rating": "1883.34041851", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0604415729974"}, "Delphi": {"deviation": "39.7747793501", "rating": "1266.01148405", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.060320291002"}, "Ada": {"deviation": "36.3972790017", "rating": "1361.20561256", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0639155485284"}, "Perl": {"deviation": "41.1240288422", "rating": "1552.04125973", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0749107865625"}, "Lua": {"deviation": "37.6582937261", "rating": "1634.69568763", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0674553440261"}, "Shell": {"deviation": "40.6820487978", "rating": "1421.07438561", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0681586727108"}, "Matlab": {"deviation": "38.0967997422", "rating": "1397.76687486", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0608968295192"}, "Factor": {"deviation": "35.9654958516", "rating": "1304.96679808", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0609252879463"}, "Haxe": {"deviation": "34.2448937028", "rating": "1387.55661609", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0643280330286"}, "Erlang": {"deviation": "36.8284042016", "rating": "1644.60935712", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0642401104786"}, "Forth": {"deviation": "38.3191570204", "rating": "1243.81091919", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0605378963198"}, "Scheme": {"deviation": "40.5214462426", "rating": "1600.30009867", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0793075810394"}, "Objective C": {"deviation": "37.5471312291", "rating": "1492.07457025", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0736316043238"}, "C#": {"deviation": "38.6296460144", "rating": "1562.62388719", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0666834819244"}, "Javascript": {"deviation": "39.8252219767", "rating": "1641.07270244", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0647909646001"}, "Common Lisp": {"deviation": "40.240160007", "rating": "1478.34602761", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0826750470469"}, "TCL": {"deviation": "36.7077187277", "rating": "1375.38782638", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0624135752158"}, "F#": {"deviation": "36.6631015423", "rating": "1760.17043045", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.06018267466"}, "AWK": {"deviation": "36.7694509335", "rating": "1339.517815", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0600716466599"}, "Ruby": {"deviation": "38.7474446453", "rating": "1613.48566719", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0650781002666"}, "Agda": {"deviation": "77.0514779095", "rating": "1814.23656088", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0604049407923"}, "Groovy": {"deviation": "38.2712668985", "rating": "1527.41425008", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0689015738667"}, "C": {"deviation": "49.6991550108", "rating": "1587.44047356", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.114351118837"}, "Mathematica": {"deviation": "37.7259198559", "rating": "1487.3369369", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0611741870641"}, "D": {"deviation": "35.2634194446", "rating": "1628.44906582", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0632815396057"}, "O'Caml": {"deviation": "37.1532500841", "rating": "1450.64503692", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0695353498197"}, "Io": {"deviation": "33.0481693318", "rating": "1466.19992634", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0600918443007"}, "J": {"deviation": "34.0194561518", "rating": "1526.51744209", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0615586257758"}, "ELisp": {"deviation": "38.5966585465", "rating": "1374.14983868", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0617187822318"}, "C++": {"deviation": "51.755484836", "rating": "1583.89110346", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.124764590002"}, "Standard ML": {"deviation": "34.4538958867", "rating": "1350.05265243", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0619058546498"}, "R": {"deviation": "37.1153190844", "rating": "1486.25250059", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0621742295709"}, "Clojure": {"deviation": "38.4669819066", "rating": "1819.96542731", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0606983399051"}, "Prolog": {"deviation": "37.2112583217", "rating": "1209.76286896", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0631451579088"}, "REBOL": {"deviation": "107.622022282", "rating": "1708.31774455", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.060106387167"}, "Fortran": {"deviation": "37.9356855584", "rating": "1299.73189031", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0613158384267"}, "Assembler": {"deviation": "38.9271671159", "rating": "1282.90111293", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.063278173315"}, "Python": {"deviation": "41.2611792942", "rating": "1750.0813987", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0615150645845"}, "Pascal": {"deviation": "40.9797195537", "rating": "1279.71245321", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0623179733276"}, "Haskell": {"deviation": "39.2183997488", "rating": "1832.72558322", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0644062767611"}, "Cobol": {"deviation": "34.8917655549", "rating": "1326.0821511", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.060098061071"}, "APL": {"deviation": "36.004194551", "rating": "1266.38694364", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0619047712878"}, "ActionScript": {"deviation": "72.2699430657", "rating": "1220.07152412", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0604264407124"}, "Go": {"deviation": "35.9355074744", "rating": "1652.03320411", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0614242741067"}, "Visual Basic": {"deviation": "40.9790613737", "rating": "1254.46854095", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.061278694133"}, "PHP": {"deviation": "40.1673600217", "rating": "1372.05798976", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0668408395069"}, "Mozart-Oz": {"deviation": "32.9351074526", "rating": "1324.55464231", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0676382778115"}, "Smalltalk": {"deviation": "37.7705009608", "rating": "1520.98475872", "ratingsMin": "1209.76286896", "ratingsMax": "1883.34041851", "volatility": "0.0706543534868"}}, "I regularly use this language": {"Coq": {"deviation": "27.9250176465", "rating": "1473.66097774", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0611580053018"}, "Eiffel": {"deviation": "29.4140792718", "rating": "1443.68577902", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0612551575184"}, "Java": {"deviation": "37.1591214407", "rating": "1784.10892189", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0644670475839"}, "Scala": {"deviation": "32.2734509962", "rating": "1624.05439892", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0601242217582"}, "Delphi": {"deviation": "34.2015551249", "rating": "1488.24274258", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0833623322273"}, "Ada": {"deviation": "30.8603448204", "rating": "1491.73130031", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0649725879016"}, "Perl": {"deviation": "35.8058654729", "rating": "1705.83854294", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0722026789253"}, "Lua": {"deviation": "39.2416555585", "rating": "1476.68490035", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0778401965519"}, "Shell": {"deviation": "33.9977106394", "rating": "1813.75110995", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.059473886064"}, "Matlab": {"deviation": "33.4540864787", "rating": "1509.68942299", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0631986831087"}, "Factor": {"deviation": "28.1803080604", "rating": "1559.48736054", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0637739911953"}, "Haxe": {"deviation": "31.7472312084", "rating": "1560.88120659", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0625751176773"}, "Erlang": {"deviation": "32.6985111262", "rating": "1623.10518376", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0700600980016"}, "Forth": {"deviation": "35.5925384253", "rating": "1569.96077782", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0678700669056"}, "Scheme": {"deviation": "39.0066647204", "rating": "1607.30482617", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.107361178726"}, "Objective C": {"deviation": "32.8307527332", "rating": "1616.43667941", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0684170565465"}, "C#": {"deviation": "35.1519876128", "rating": "1625.19323042", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0627479814371"}, "Javascript": {"deviation": "34.4712564408", "rating": "1732.10446647", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0588522766522"}, "Common Lisp": {"deviation": "33.7809811907", "rating": "1557.83936567", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0808218425406"}, "TCL": {"deviation": "37.4084065974", "rating": "1374.52167", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0702419899573"}, "F#": {"deviation": "30.4938060356", "rating": "1659.69823503", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0642643494286"}, "AWK": {"deviation": "31.5947235036", "rating": "1597.75110308", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0668796102208"}, "Ruby": {"deviation": "31.8446133105", "rating": "1640.76782659", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0617301452856"}, "Agda": {"deviation": "46.3615634117", "rating": "1524.4195989", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.059894622545"}, "Groovy": {"deviation": "31.4937496417", "rating": "1567.46239575", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0617682462366"}, "C": {"deviation": "38.6511135761", "rating": "1790.71121083", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0688350261907"}, "Mathematica": {"deviation": "33.3045185107", "rating": "1381.71054396", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0658025037165"}, "D": {"deviation": "30.3896811868", "rating": "1491.83353131", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0651475530212"}, "O'Caml": {"deviation": "32.3018340698", "rating": "1562.5913022", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0675438392835"}, "Io": {"deviation": "31.2057904352", "rating": "1419.1212278", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0606120633327"}, "J": {"deviation": "28.2553601552", "rating": "1509.48872112", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0643193731487"}, "ELisp": {"deviation": "30.9378445671", "rating": "1668.72885802", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0604996978895"}, "C++": {"deviation": "37.9194679807", "rating": "1629.98862238", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0743654257084"}, "Standard ML": {"deviation": "34.2332412681", "rating": "1381.78098976", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.064580412561"}, "R": {"deviation": "30.3473786023", "rating": "1571.1402599", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.060716468015"}, "Clojure": {"deviation": "31.7073092684", "rating": "1528.76492103", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0617402546426"}, "Prolog": {"deviation": "36.0183572605", "rating": "1534.32627836", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0769858470564"}, "REBOL": {"deviation": "69.696688674", "rating": "1322.44032861", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0603862544644"}, "Fortran": {"deviation": "33.425692757", "rating": "1374.34619956", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0616501253415"}, "Assembler": {"deviation": "38.6256825241", "rating": "1516.14465928", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0925957375842"}, "Python": {"deviation": "35.5056869849", "rating": "1715.10671821", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0625770806272"}, "Pascal": {"deviation": "34.1195574536", "rating": "1391.44152429", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0609043514866"}, "Haskell": {"deviation": "36.8754066743", "rating": "1625.41169415", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0708238469517"}, "Cobol": {"deviation": "36.4088703284", "rating": "1336.37695507", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0601654780452"}, "APL": {"deviation": "29.1705565241", "rating": "1475.16122605", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.06180065915"}, "ActionScript": {"deviation": "111.834493588", "rating": "1913.81352474", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0604171644714"}, "Go": {"deviation": "30.2866882047", "rating": "1452.83853174", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0641591392395"}, "Visual Basic": {"deviation": "42.2572515607", "rating": "1470.28182314", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0888101418567"}, "PHP": {"deviation": "39.1310633264", "rating": "1592.44163971", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0771988401549"}, "Mozart-Oz": {"deviation": "30.4728782145", "rating": "1371.86835864", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0632234257282"}, "Smalltalk": {"deviation": "30.6963403484", "rating": "1667.58116741", "ratingsMin": "1322.44032861", "ratingsMax": "1913.81352474", "volatility": "0.0693943381959"}}, "I still discover new features of this language on a fairly regular basis": {"Coq": {"deviation": "34.9403225501", "rating": "1722.18948942", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0625719412205"}, "Eiffel": {"deviation": "31.9807197463", "rating": "1447.20275091", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0611366578307"}, "Java": {"deviation": "61.9305533771", "rating": "1612.78317564", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.227864846514"}, "Scala": {"deviation": "42.2697880873", "rating": "1828.82956824", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.060046980529"}, "Delphi": {"deviation": "35.1912715867", "rating": "1314.68327097", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0618981718819"}, "Ada": {"deviation": "34.1524180518", "rating": "1426.04048377", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.065515909381"}, "Perl": {"deviation": "36.9957012754", "rating": "1578.96430267", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0678560222777"}, "Lua": {"deviation": "35.2326230492", "rating": "1510.19435232", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0659214474669"}, "Shell": {"deviation": "35.8731201303", "rating": "1575.0050773", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0693320658811"}, "Matlab": {"deviation": "37.6585862921", "rating": "1509.87395558", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0634824297096"}, "Factor": {"deviation": "31.4339390618", "rating": "1621.4742711", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0607931850829"}, "Haxe": {"deviation": "35.6657180846", "rating": "1509.07929183", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0609318790717"}, "Erlang": {"deviation": "34.1676037175", "rating": "1527.91767382", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0628205903891"}, "Forth": {"deviation": "35.3425776289", "rating": "1391.83360992", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0717000829887"}, "Scheme": {"deviation": "39.360145277", "rating": "1613.88489402", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0807641420519"}, "Objective C": {"deviation": "34.3331534099", "rating": "1607.82634401", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0651925083714"}, "C#": {"deviation": "37.8078596979", "rating": "1647.2948747", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0682169582336"}, "Javascript": {"deviation": "38.3530986549", "rating": "1520.66760273", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0686852112881"}, "Common Lisp": {"deviation": "34.0773631943", "rating": "1724.30795629", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0618857662771"}, "TCL": {"deviation": "34.4186538931", "rating": "1408.64833764", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0676632249594"}, "F#": {"deviation": "36.6521656241", "rating": "1665.40900834", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0604337974809"}, "AWK": {"deviation": "36.5985503043", "rating": "1379.88304038", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0644142957102"}, "Ruby": {"deviation": "39.6439780564", "rating": "1699.45455477", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0605542811018"}, "Agda": {"deviation": "45.7951123647", "rating": "1582.33233707", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0612684636636"}, "Groovy": {"deviation": "35.5880940185", "rating": "1631.74670763", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0604196200599"}, "C": {"deviation": "44.0040107742", "rating": "1437.07637552", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0917859415386"}, "Mathematica": {"deviation": "41.4395117492", "rating": "1809.84671556", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.059982040268"}, "D": {"deviation": "35.8248647069", "rating": "1643.35328468", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0614078881165"}, "O'Caml": {"deviation": "35.1585246912", "rating": "1565.53905909", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0626894924589"}, "Io": {"deviation": "31.3673101984", "rating": "1505.75947002", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0631012364176"}, "J": {"deviation": "34.4101573677", "rating": "1698.668163", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0600622407829"}, "ELisp": {"deviation": "35.1388343005", "rating": "1629.77741282", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0638464348102"}, "C++": {"deviation": "37.0191180246", "rating": "1676.97863091", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0693984414136"}, "Standard ML": {"deviation": "33.6402572309", "rating": "1444.33515981", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0637128864667"}, "R": {"deviation": "35.1820150487", "rating": "1651.88127665", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0636868306611"}, "Clojure": {"deviation": "38.3995279152", "rating": "1701.21398671", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0616476397111"}, "Prolog": {"deviation": "36.6857361264", "rating": "1387.9587897", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0807643039898"}, "REBOL": {"deviation": "212.398733899", "rating": "1806.04436977", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0600130001157"}, "Fortran": {"deviation": "33.662503579", "rating": "1399.45878009", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0633341838067"}, "Assembler": {"deviation": "36.4609288376", "rating": "1333.33440961", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0637024384894"}, "Python": {"deviation": "36.9337409838", "rating": "1710.81636482", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0642728180904"}, "Pascal": {"deviation": "38.828531198", "rating": "1309.40353279", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0603065060818"}, "Haskell": {"deviation": "39.175103672", "rating": "1887.0412948", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0601124420684"}, "Cobol": {"deviation": "36.4125824866", "rating": "1369.32027504", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0617199494947"}, "APL": {"deviation": "33.9615209535", "rating": "1478.89568992", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0643842822365"}, "ActionScript": {"deviation": "95.3939108889", "rating": "1305.21232552", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0600418278131"}, "Go": {"deviation": "35.7243011292", "rating": "1543.51797548", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0617374368802"}, "Visual Basic": {"deviation": "36.8887213165", "rating": "1348.80920694", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0641982590546"}, "PHP": {"deviation": "45.0232578943", "rating": "1316.36432798", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.084471211329"}, "Mozart-Oz": {"deviation": "30.8514855717", "rating": "1623.50461924", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0619800448784"}, "Smalltalk": {"deviation": "34.7841567385", "rating": "1566.7209723", "ratingsMin": "1305.21232552", "ratingsMax": "1887.0412948", "volatility": "0.0736707458069"}}, "Code written in this language tends to be very reliable": {"Coq": {"deviation": "40.1737114505", "rating": "1719.80934077", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0610401827801"}, "Eiffel": {"deviation": "39.9847937469", "rating": "1804.01553379", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0603462374655"}, "Java": {"deviation": "59.2970878503", "rating": "1589.89907399", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.127887586279"}, "Scala": {"deviation": "37.4725784635", "rating": "1671.43174088", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0604288302022"}, "Delphi": {"deviation": "36.9599434453", "rating": "1458.94690235", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0616129392078"}, "Ada": {"deviation": "36.8261313886", "rating": "1664.92296355", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0607018706643"}, "Perl": {"deviation": "35.8306577905", "rating": "1309.97974655", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0608409333819"}, "Lua": {"deviation": "36.9910902847", "rating": "1369.3706237", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.062894105797"}, "Shell": {"deviation": "36.8962785682", "rating": "1270.66187302", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0598803917931"}, "Matlab": {"deviation": "36.9954043221", "rating": "1290.57478037", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0601057617542"}, "Factor": {"deviation": "36.5300229042", "rating": "1552.04317747", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0616162987457"}, "Haxe": {"deviation": "38.8117666835", "rating": "1568.08896853", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0608502541941"}, "Erlang": {"deviation": "38.4735827463", "rating": "1722.24002259", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.060237984297"}, "Forth": {"deviation": "34.793214012", "rating": "1364.99475591", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0617960539963"}, "Scheme": {"deviation": "38.0030582181", "rating": "1589.75632982", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0737395321978"}, "Objective C": {"deviation": "35.5291259975", "rating": "1339.26798189", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.064128948243"}, "C#": {"deviation": "44.8534400653", "rating": "1662.57356129", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0751880436178"}, "Javascript": {"deviation": "39.357160007", "rating": "1236.23724771", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0592347046039"}, "Common Lisp": {"deviation": "39.860763774", "rating": "1519.85145143", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0709173661342"}, "TCL": {"deviation": "34.4477230332", "rating": "1356.60752001", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0603061539911"}, "F#": {"deviation": "38.8804071109", "rating": "1665.94841184", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0604667737805"}, "AWK": {"deviation": "35.7510753537", "rating": "1398.82071463", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0625546571302"}, "Ruby": {"deviation": "41.9070586967", "rating": "1458.80590194", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0663732614438"}, "Agda": {"deviation": "85.0561221711", "rating": "1940.62495474", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0602739282761"}, "Groovy": {"deviation": "36.0998988405", "rating": "1433.42458536", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0615275300962"}, "C": {"deviation": "52.1504061715", "rating": "1467.39481588", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.124528204077"}, "Mathematica": {"deviation": "37.2989563269", "rating": "1421.01794621", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0611250002521"}, "D": {"deviation": "37.1096546065", "rating": "1529.23924877", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0627240963336"}, "O'Caml": {"deviation": "41.2285959364", "rating": "1800.17615958", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0600069861003"}, "Io": {"deviation": "34.2206164677", "rating": "1325.60142554", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0623772249433"}, "J": {"deviation": "41.254031652", "rating": "1732.94421449", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0600663468922"}, "ELisp": {"deviation": "32.8633889555", "rating": "1430.64115456", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0618748281391"}, "C++": {"deviation": "40.8792470692", "rating": "1343.4186517", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0730658644608"}, "Standard ML": {"deviation": "36.322674425", "rating": "1663.4091552", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0602537250274"}, "R": {"deviation": "35.8482528443", "rating": "1453.46895364", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0622678732391"}, "Clojure": {"deviation": "37.8581928063", "rating": "1569.33876351", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0626068188959"}, "Prolog": {"deviation": "39.2272258983", "rating": "1424.52929337", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0741927332594"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.06"}, "Fortran": {"deviation": "40.7768859357", "rating": "1556.29634526", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0747334037719"}, "Assembler": {"deviation": "38.9474025494", "rating": "1214.97227023", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.060451162953"}, "Python": {"deviation": "48.4371288108", "rating": "1501.23313298", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.106412978322"}, "Pascal": {"deviation": "34.9954476639", "rating": "1446.17711477", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0648553803237"}, "Haskell": {"deviation": "44.7980606557", "rating": "1884.38908155", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0601988742545"}, "Cobol": {"deviation": "38.0127282249", "rating": "1363.83199671", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0640668632737"}, "APL": {"deviation": "33.1107797355", "rating": "1457.69657112", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0645291300341"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.06"}, "Go": {"deviation": "36.3789645487", "rating": "1551.32356206", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0617949342433"}, "Visual Basic": {"deviation": "39.5372972992", "rating": "1119.59190371", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0599805420685"}, "PHP": {"deviation": "41.4567790239", "rating": "1201.07226843", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0596496325993"}, "Mozart-Oz": {"deviation": "32.9528915699", "rating": "1563.48459051", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.063281312578"}, "Smalltalk": {"deviation": "38.3554297427", "rating": "1507.90162632", "ratingsMin": "1119.59190371", "ratingsMax": "1940.62495474", "volatility": "0.0699259368126"}}, "This language is minimal": {"Coq": {"deviation": "33.6581331763", "rating": "1468.65394126", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0613563706401"}, "Eiffel": {"deviation": "32.766667138", "rating": "1377.48085492", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0611044751044"}, "Java": {"deviation": "41.4200885739", "rating": "1278.75138427", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.059622464101"}, "Scala": {"deviation": "36.9943310379", "rating": "1399.82603412", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0619673398533"}, "Delphi": {"deviation": "34.6657459573", "rating": "1361.84004728", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.059911001989"}, "Ada": {"deviation": "35.5610518611", "rating": "1289.07031308", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0605635005518"}, "Perl": {"deviation": "39.2102118315", "rating": "1305.19423914", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0603416993341"}, "Lua": {"deviation": "40.8022547872", "rating": "1751.98351313", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0609361656644"}, "Shell": {"deviation": "38.0349526449", "rating": "1655.34990177", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0684259308463"}, "Matlab": {"deviation": "39.0101537818", "rating": "1389.4908865", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.062287661771"}, "Factor": {"deviation": "35.5478744876", "rating": "1467.51712667", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0613859699006"}, "Haxe": {"deviation": "36.8921466833", "rating": "1388.13433732", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0626309909859"}, "Erlang": {"deviation": "36.8463166205", "rating": "1546.45277184", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0641244464537"}, "Forth": {"deviation": "38.3877275527", "rating": "1850.47963208", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0607888949515"}, "Scheme": {"deviation": "43.8608285532", "rating": "1949.88446312", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0598981893763"}, "Objective C": {"deviation": "37.0075393032", "rating": "1375.00644983", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0647955139282"}, "C#": {"deviation": "39.2066508484", "rating": "1287.31742466", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0593910686568"}, "Javascript": {"deviation": "58.5966778393", "rating": "1549.59362773", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.119484042331"}, "Common Lisp": {"deviation": "41.5164274344", "rating": "1470.44916057", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.079022626554"}, "TCL": {"deviation": "33.6023026737", "rating": "1585.66989375", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0647785709049"}, "F#": {"deviation": "34.5685295291", "rating": "1360.10193521", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0622617234807"}, "AWK": {"deviation": "35.123424068", "rating": "1652.01951592", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0607971939416"}, "Ruby": {"deviation": "40.2309737732", "rating": "1393.25031857", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.068295109685"}, "Agda": {"deviation": "76.4370555722", "rating": "1649.23313178", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0601686171901"}, "Groovy": {"deviation": "35.2904804357", "rating": "1451.91626889", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0601915479404"}, "C": {"deviation": "46.3790028962", "rating": "1681.32279835", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.071818096793"}, "Mathematica": {"deviation": "39.2440142587", "rating": "1363.14966409", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0612223831555"}, "D": {"deviation": "33.9464548699", "rating": "1428.78849878", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0604364254405"}, "O'Caml": {"deviation": "35.2717016851", "rating": "1533.02690519", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0663380419872"}, "Io": {"deviation": "43.7416462663", "rating": "1721.29382721", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0600526128956"}, "J": {"deviation": "37.551327231", "rating": "1658.02287067", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.061464111252"}, "ELisp": {"deviation": "36.6367553352", "rating": "1561.67442549", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0619796520897"}, "C++": {"deviation": "40.864067892", "rating": "1244.11937753", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.059887464802"}, "Standard ML": {"deviation": "33.5262284058", "rating": "1578.31132797", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0603356224054"}, "R": {"deviation": "34.2956860374", "rating": "1340.50749933", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0605799053259"}, "Clojure": {"deviation": "34.482246065", "rating": "1599.42202347", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0634230044141"}, "Prolog": {"deviation": "35.3636721707", "rating": "1495.67705335", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0655619418542"}, "REBOL": {"deviation": "49.6715795058", "rating": "1722.37508316", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0602750547252"}, "Fortran": {"deviation": "36.7078681871", "rating": "1523.03676189", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0713024155916"}, "Assembler": {"deviation": "40.1736001074", "rating": "1757.30164302", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0626877163116"}, "Python": {"deviation": "46.5582201671", "rating": "1494.09508694", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0838632319412"}, "Pascal": {"deviation": "39.0996741156", "rating": "1482.37122192", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0665344269707"}, "Haskell": {"deviation": "48.594032912", "rating": "1424.08726182", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0998224114556"}, "Cobol": {"deviation": "34.5417474628", "rating": "1305.86365781", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0605179983786"}, "APL": {"deviation": "34.7556368256", "rating": "1646.33797065", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.061198641438"}, "ActionScript": {"deviation": "176.295304219", "rating": "1158.01229606", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0600393744176"}, "Go": {"deviation": "34.3809766039", "rating": "1507.14456975", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0620907101625"}, "Visual Basic": {"deviation": "39.4051659808", "rating": "1202.21011036", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0601684988238"}, "PHP": {"deviation": "40.1627977278", "rating": "1420.28104543", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0601210758271"}, "Mozart-Oz": {"deviation": "31.5110161876", "rating": "1400.84955864", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.0646834230173"}, "Smalltalk": {"deviation": "34.7090393076", "rating": "1543.1402627", "ratingsMin": "1158.01229606", "ratingsMax": "1949.88446312", "volatility": "0.063650087659"}}, "There is a wide variety of open source code written in this language": {"Coq": {"deviation": "41.5468039704", "rating": "1226.83830891", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0600434530903"}, "Eiffel": {"deviation": "37.4260174003", "rating": "1324.49800055", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0644149020989"}, "Java": {"deviation": "41.2098436466", "rating": "1932.09422953", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0589011033857"}, "Scala": {"deviation": "42.7280602878", "rating": "1528.61068321", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0665287890358"}, "Delphi": {"deviation": "41.3494974021", "rating": "1303.87743961", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0610161130912"}, "Ada": {"deviation": "37.3451272727", "rating": "1335.37066793", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0605272179969"}, "Perl": {"deviation": "38.7270300496", "rating": "1819.4751837", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0605065204076"}, "Lua": {"deviation": "41.4037060505", "rating": "1611.17541494", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0651306010325"}, "Shell": {"deviation": "41.2332220383", "rating": "1605.9926427", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0712078106218"}, "Matlab": {"deviation": "42.1969332563", "rating": "1368.75488396", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0606764029044"}, "Factor": {"deviation": "38.327830841", "rating": "1271.00413228", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0620301027027"}, "Haxe": {"deviation": "36.883518923", "rating": "1575.41636635", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0619098598082"}, "Erlang": {"deviation": "39.7629145034", "rating": "1478.87577473", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.064355773297"}, "Forth": {"deviation": "40.8885455874", "rating": "1297.0916644", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.060482836292"}, "Scheme": {"deviation": "44.8118652632", "rating": "1462.10405082", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0759406367398"}, "Objective C": {"deviation": "40.1394068987", "rating": "1501.84853888", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0680018006595"}, "C#": {"deviation": "46.0388055762", "rating": "1509.15084587", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0727772047841"}, "Javascript": {"deviation": "41.5037755296", "rating": "1777.57813779", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0602547166933"}, "Common Lisp": {"deviation": "41.4922381537", "rating": "1505.75626315", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0795585133821"}, "TCL": {"deviation": "39.6069948419", "rating": "1541.2383879", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.064135752053"}, "F#": {"deviation": "40.5525995175", "rating": "1277.71356821", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0602052812698"}, "AWK": {"deviation": "39.3095846371", "rating": "1352.0014411", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0615590555025"}, "Ruby": {"deviation": "39.225552006", "rating": "1823.11895746", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0595841436677"}, "Agda": {"deviation": "51.5501894961", "rating": "1402.88739348", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0602731070101"}, "Groovy": {"deviation": "38.8520605607", "rating": "1582.52333883", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0626473662428"}, "C": {"deviation": "43.1706263891", "rating": "1965.7880787", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0593185054907"}, "Mathematica": {"deviation": "43.7351262247", "rating": "1350.20421664", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0601353935204"}, "D": {"deviation": "37.9124670513", "rating": "1382.04099336", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0616605648722"}, "O'Caml": {"deviation": "39.4933359763", "rating": "1444.92277932", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0631665847024"}, "Io": {"deviation": "35.9571248216", "rating": "1354.38714175", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0612029987855"}, "J": {"deviation": "39.5854852399", "rating": "1301.14723261", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0606131388353"}, "ELisp": {"deviation": "35.9980093144", "rating": "1689.89977071", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.061817544609"}, "C++": {"deviation": "40.5068308964", "rating": "1856.55245136", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0590434824752"}, "Standard ML": {"deviation": "38.7229445206", "rating": "1298.85038061", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0604986441568"}, "R": {"deviation": "39.0240281994", "rating": "1530.58695276", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0623272947795"}, "Clojure": {"deviation": "41.5553300635", "rating": "1511.36533952", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0659249576966"}, "Prolog": {"deviation": "40.5977333697", "rating": "1312.87507786", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0604670660316"}, "REBOL": {"deviation": "72.8547543114", "rating": "1408.70971856", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0599523993158"}, "Fortran": {"deviation": "43.818321134", "rating": "1377.93133342", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0652134465688"}, "Assembler": {"deviation": "45.479458968", "rating": "1319.30191596", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0625739752336"}, "Python": {"deviation": "40.3735771166", "rating": "1904.68445988", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0597059784178"}, "Pascal": {"deviation": "39.8465479162", "rating": "1318.38026233", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0599703240055"}, "Haskell": {"deviation": "41.3097878962", "rating": "1517.00152727", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0726097585325"}, "Cobol": {"deviation": "45.2101963823", "rating": "1090.06178928", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0599416733615"}, "APL": {"deviation": "40.5865867531", "rating": "1208.99861887", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0599819043108"}, "ActionScript": {"deviation": "167.671255705", "rating": "1347.57293192", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0600101778419"}, "Go": {"deviation": "41.8097121402", "rating": "1276.84634888", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0601049538861"}, "Visual Basic": {"deviation": "41.0737089474", "rating": "1332.7316099", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0602245942902"}, "PHP": {"deviation": "40.3558794887", "rating": "1804.42918239", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.060660137614"}, "Mozart-Oz": {"deviation": "36.4355788926", "rating": "1225.08054472", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0602367717994"}, "Smalltalk": {"deviation": "38.9781425801", "rating": "1438.99833875", "ratingsMin": "1090.06178928", "ratingsMax": "1965.7880787", "volatility": "0.0670938369274"}}, "This language is frequently used for applications it isn't suitable for": {"Coq": {"deviation": "40.3887432633", "rating": "1225.39027869", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0600865868454"}, "Eiffel": {"deviation": "35.7771389943", "rating": "1467.64768674", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0605723983028"}, "Java": {"deviation": "39.1428712981", "rating": "1671.64944985", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0624757156658"}, "Scala": {"deviation": "39.3222527529", "rating": "1383.57266826", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0601426047357"}, "Delphi": {"deviation": "37.871764611", "rating": "1568.89038557", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0681620673584"}, "Ada": {"deviation": "36.2431355701", "rating": "1394.0765258", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0607022481068"}, "Perl": {"deviation": "36.7356123144", "rating": "1573.20903002", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0629382538228"}, "Lua": {"deviation": "37.1884067272", "rating": "1424.52646437", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0655923903573"}, "Shell": {"deviation": "37.6307589462", "rating": "1585.10595542", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0655208607122"}, "Matlab": {"deviation": "37.0261054467", "rating": "1465.34520017", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0632323975898"}, "Factor": {"deviation": "38.5588124886", "rating": "1398.79872091", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0611056603893"}, "Haxe": {"deviation": "40.0042095076", "rating": "1393.7159978", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0602995615341"}, "Erlang": {"deviation": "37.2593832893", "rating": "1301.39454791", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0606049718611"}, "Forth": {"deviation": "34.0951168128", "rating": "1410.55195367", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0622126360977"}, "Scheme": {"deviation": "36.6611528828", "rating": "1387.96934853", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.062742615995"}, "Objective C": {"deviation": "39.5533731363", "rating": "1478.62516359", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.068076516534"}, "C#": {"deviation": "38.2007846559", "rating": "1615.36713055", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0675043306885"}, "Javascript": {"deviation": "40.0351239276", "rating": "1583.38464381", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0738726992931"}, "Common Lisp": {"deviation": "36.8269342416", "rating": "1323.46827355", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0616998803531"}, "TCL": {"deviation": "36.2061479599", "rating": "1468.62028417", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0696947584076"}, "F#": {"deviation": "36.6866751741", "rating": "1392.91485413", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0607885118311"}, "AWK": {"deviation": "37.0684318466", "rating": "1375.54876784", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0717017450059"}, "Ruby": {"deviation": "38.5956519595", "rating": "1576.60701021", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0658514031886"}, "Agda": {"deviation": "81.2071682293", "rating": "1160.38565787", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.060177011882"}, "Groovy": {"deviation": "37.1899812416", "rating": "1489.27888339", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0616351739945"}, "C": {"deviation": "40.866984371", "rating": "1617.65620893", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0743479828547"}, "Mathematica": {"deviation": "38.4224643391", "rating": "1399.36728437", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0602211445536"}, "D": {"deviation": "35.5343069567", "rating": "1438.47573863", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0611570658423"}, "O'Caml": {"deviation": "36.6734342304", "rating": "1332.88078219", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.060068046051"}, "Io": {"deviation": "36.5208970406", "rating": "1367.44772451", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.060383072843"}, "J": {"deviation": "39.6616261391", "rating": "1349.93271016", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0603517038441"}, "ELisp": {"deviation": "36.0767443161", "rating": "1449.49963363", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0665802553972"}, "C++": {"deviation": "39.2184789457", "rating": "1729.87729263", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0624074694657"}, "Standard ML": {"deviation": "34.3722568731", "rating": "1366.27839362", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0602602447005"}, "R": {"deviation": "39.4132853751", "rating": "1442.94424462", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0618071504173"}, "Clojure": {"deviation": "37.0383499398", "rating": "1370.51167106", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0602147420658"}, "Prolog": {"deviation": "36.1934744413", "rating": "1364.56348916", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.063200771884"}, "REBOL": {"deviation": "227.293516053", "rating": "1356.27126378", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0599985881727"}, "Fortran": {"deviation": "36.9572923215", "rating": "1506.64291453", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.064097733987"}, "Assembler": {"deviation": "44.4460511077", "rating": "1461.76245081", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.102832060408"}, "Python": {"deviation": "54.9852705357", "rating": "1521.59168744", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.128168711778"}, "Pascal": {"deviation": "34.8576954156", "rating": "1563.6008287", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0642784244679"}, "Haskell": {"deviation": "37.4492072682", "rating": "1310.54384221", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.061364173947"}, "Cobol": {"deviation": "34.8502034172", "rating": "1458.51026728", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0628876988644"}, "APL": {"deviation": "35.1631731346", "rating": "1337.0232043", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0605777262365"}, "ActionScript": {"deviation": "94.8467494583", "rating": "1692.80823489", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0600357313927"}, "Go": {"deviation": "36.7230238215", "rating": "1384.21436564", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0621223848439"}, "Visual Basic": {"deviation": "38.011373982", "rating": "1774.58141035", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0603786107482"}, "PHP": {"deviation": "36.7323079138", "rating": "1668.99136891", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.060517810131"}, "Mozart-Oz": {"deviation": "33.9616035885", "rating": "1429.22444157", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0603240273854"}, "Smalltalk": {"deviation": "35.6694474831", "rating": "1376.2925419", "ratingsMin": "1160.38565787", "ratingsMax": "1774.58141035", "volatility": "0.0607489707433"}}, "I would list this language on my resume": {"Coq": {"deviation": "34.0602408898", "rating": "1506.01368044", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.064939650175"}, "Eiffel": {"deviation": "34.7900355915", "rating": "1493.28944204", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0658410051348"}, "Java": {"deviation": "39.038160193", "rating": "1792.63752587", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0638947291141"}, "Scala": {"deviation": "36.3228773177", "rating": "1746.83979204", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0601192965562"}, "Delphi": {"deviation": "36.5162211882", "rating": "1461.26014258", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0662106294298"}, "Ada": {"deviation": "36.1645609384", "rating": "1465.20842027", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0669794045574"}, "Perl": {"deviation": "45.3777777465", "rating": "1512.08890414", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.104680897775"}, "Lua": {"deviation": "41.3580825354", "rating": "1563.30209228", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0680383833721"}, "Shell": {"deviation": "38.612056087", "rating": "1505.74534225", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0685601129746"}, "Matlab": {"deviation": "36.6847069929", "rating": "1408.83474801", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0628713636037"}, "Factor": {"deviation": "36.0202861157", "rating": "1295.35697217", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0603110227586"}, "Haxe": {"deviation": "35.0205966615", "rating": "1482.28698893", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0615582092517"}, "Erlang": {"deviation": "39.1463106326", "rating": "1579.32168518", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0716021573702"}, "Forth": {"deviation": "34.1556023633", "rating": "1491.66435908", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0609855203511"}, "Scheme": {"deviation": "42.5492318816", "rating": "1438.10941564", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0805100186801"}, "Objective C": {"deviation": "37.4945614518", "rating": "1612.32165383", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0650858854045"}, "C#": {"deviation": "38.8457361023", "rating": "1673.56765184", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0623867228529"}, "Javascript": {"deviation": "44.7758330101", "rating": "1625.09815144", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0804483984702"}, "Common Lisp": {"deviation": "44.6257698708", "rating": "1546.37226028", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0895329127787"}, "TCL": {"deviation": "38.2531223932", "rating": "1337.36646693", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0617113688699"}, "F#": {"deviation": "35.6556643945", "rating": "1634.59120121", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0607328088708"}, "AWK": {"deviation": "38.2361192666", "rating": "1282.20347583", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0623613074916"}, "Ruby": {"deviation": "37.6064357677", "rating": "1611.1990565", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0631925954031"}, "Agda": {"deviation": "65.881924616", "rating": "1760.39024188", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0600646785041"}, "Groovy": {"deviation": "34.1889473163", "rating": "1460.52780862", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0652052270182"}, "C": {"deviation": "39.6116651411", "rating": "1702.90918759", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0649373091526"}, "Mathematica": {"deviation": "37.0518552039", "rating": "1411.43616348", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0607151709912"}, "D": {"deviation": "34.9701819749", "rating": "1512.71540001", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0655606142067"}, "O'Caml": {"deviation": "36.4027737445", "rating": "1517.9177481", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0634682575846"}, "Io": {"deviation": "37.1701730729", "rating": "1322.11728198", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0609628078489"}, "J": {"deviation": "33.9354901533", "rating": "1377.35035638", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0603794998375"}, "ELisp": {"deviation": "38.9601678882", "rating": "1325.87571112", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0602936111076"}, "C++": {"deviation": "38.3632987992", "rating": "1574.74755067", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0661127391496"}, "Standard ML": {"deviation": "34.8235944999", "rating": "1470.51318411", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.069518789401"}, "R": {"deviation": "36.4589410434", "rating": "1515.645872", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0645441819293"}, "Clojure": {"deviation": "38.6915071337", "rating": "1596.94170821", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0647968518321"}, "Prolog": {"deviation": "38.6859726732", "rating": "1364.13812713", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0688496402869"}, "REBOL": {"deviation": "101.556255932", "rating": "1377.57583634", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.060019181151"}, "Fortran": {"deviation": "37.8430706559", "rating": "1441.02421688", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0654369613516"}, "Assembler": {"deviation": "47.4903026358", "rating": "1370.62805834", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.11125526679"}, "Python": {"deviation": "39.7960135352", "rating": "1701.96575021", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0622944551522"}, "Pascal": {"deviation": "40.2434623538", "rating": "1221.4896162", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0601036938878"}, "Haskell": {"deviation": "38.9068011835", "rating": "1706.62701808", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0715767454764"}, "Cobol": {"deviation": "36.8672489296", "rating": "1366.90832059", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0601658443453"}, "APL": {"deviation": "36.0378312055", "rating": "1340.50615725", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0615376368672"}, "ActionScript": {"deviation": "87.8887532142", "rating": "1291.36406609", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0601102084685"}, "Go": {"deviation": "35.1243543602", "rating": "1418.73989673", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0643477374324"}, "Visual Basic": {"deviation": "40.1715762532", "rating": "1385.1121868", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0630308570478"}, "PHP": {"deviation": "52.367596332", "rating": "1559.13003382", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.118915236652"}, "Mozart-Oz": {"deviation": "34.4080455559", "rating": "1382.14108344", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0609462285653"}, "Smalltalk": {"deviation": "37.5832764931", "rating": "1505.64673029", "ratingsMin": "1221.4896162", "ratingsMax": "1792.63752587", "volatility": "0.0687265262434"}}, "This is a mainstream language": {"Coq": {"deviation": "57.2421630124", "rating": "817.870985353", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0606051400994"}, "Eiffel": {"deviation": "49.1581945668", "rating": "1148.8545232", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0602435132747"}, "Java": {"deviation": "49.297167092", "rating": "2091.03730205", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0596110377173"}, "Scala": {"deviation": "45.4104383074", "rating": "1396.89810248", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0608180683898"}, "Delphi": {"deviation": "41.1436425625", "rating": "1511.40670105", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0612319377335"}, "Ada": {"deviation": "36.795293911", "rating": "1344.09014151", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600286645516"}, "Perl": {"deviation": "39.8486228732", "rating": "1674.53680551", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0620313264283"}, "Lua": {"deviation": "39.5733347005", "rating": "1348.49828255", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0612935573169"}, "Shell": {"deviation": "42.3149231584", "rating": "1554.41997142", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0632115376972"}, "Matlab": {"deviation": "42.7288947116", "rating": "1479.63368176", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0607108979684"}, "Factor": {"deviation": "50.0503606656", "rating": "953.313200992", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0604911716206"}, "Haxe": {"deviation": "52.5919012429", "rating": "1264.72774283", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600592175357"}, "Erlang": {"deviation": "38.0785525336", "rating": "1253.8609819", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0603669681369"}, "Forth": {"deviation": "41.7916780185", "rating": "985.300020773", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600564037965"}, "Scheme": {"deviation": "42.4806967309", "rating": "1241.01645623", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0598761606477"}, "Objective C": {"deviation": "39.0999923882", "rating": "1542.84729694", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0608464734492"}, "C#": {"deviation": "42.6776391684", "rating": "1986.65052979", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0598128933493"}, "Javascript": {"deviation": "43.6568495325", "rating": "1904.73409225", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0595272595783"}, "Common Lisp": {"deviation": "38.6180154468", "rating": "1304.14513869", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600633532327"}, "TCL": {"deviation": "37.6823874905", "rating": "1322.869566", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0599666067475"}, "F#": {"deviation": "37.2993402354", "rating": "1389.9853823", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0608539985967"}, "AWK": {"deviation": "40.468855863", "rating": "1362.83147105", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0610099624766"}, "Ruby": {"deviation": "40.9728762104", "rating": "1694.48763846", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0601223299001"}, "Agda": {"deviation": "133.289847997", "rating": "816.033887874", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0605095681905"}, "Groovy": {"deviation": "41.3160289257", "rating": "1399.27971368", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0602546227746"}, "C": {"deviation": "41.6764707716", "rating": "1899.06578781", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0595623849665"}, "Mathematica": {"deviation": "40.1756672705", "rating": "1353.75896365", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0602284151662"}, "D": {"deviation": "42.6801017386", "rating": "1305.56189796", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.060243050284"}, "O'Caml": {"deviation": "39.9970615842", "rating": "1275.03600769", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0602342259176"}, "Io": {"deviation": "45.8949872856", "rating": "1044.74529947", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0602006150728"}, "J": {"deviation": "63.5634364127", "rating": "1042.72644356", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0609150114265"}, "ELisp": {"deviation": "39.0230903135", "rating": "1181.4069075", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0599972786217"}, "C++": {"deviation": "41.9009435534", "rating": "1965.96949166", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.059418082428"}, "Standard ML": {"deviation": "47.588736917", "rating": "1032.91487233", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600176917437"}, "R": {"deviation": "42.0890360193", "rating": "1360.65550185", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0601786149276"}, "Clojure": {"deviation": "41.4059825027", "rating": "1313.93702787", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0610816876114"}, "Prolog": {"deviation": "40.2820162566", "rating": "1179.52354814", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600675384646"}, "REBOL": {"deviation": "70.1295042619", "rating": "913.548150072", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600750884871"}, "Fortran": {"deviation": "38.3423788197", "rating": "1317.01102782", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0614632756706"}, "Assembler": {"deviation": "44.6893226758", "rating": "1413.44204366", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0611097368046"}, "Python": {"deviation": "41.0712570306", "rating": "1818.98963437", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.05930405558"}, "Pascal": {"deviation": "42.5749553492", "rating": "1331.05994766", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0603945809945"}, "Haskell": {"deviation": "46.1696256002", "rating": "1214.90366377", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0599119977978"}, "Cobol": {"deviation": "37.8971082335", "rating": "1439.27676469", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0608866080724"}, "APL": {"deviation": "46.6209162677", "rating": "1048.09870264", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0607227630372"}, "ActionScript": {"deviation": "119.473916256", "rating": "1367.48872138", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.059982846567"}, "Go": {"deviation": "39.7214994519", "rating": "1267.60461677", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0599498824644"}, "Visual Basic": {"deviation": "42.6873087898", "rating": "1549.95360796", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.061395985024"}, "PHP": {"deviation": "41.506133784", "rating": "1855.69596681", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.059621563031"}, "Mozart-Oz": {"deviation": "56.1529475292", "rating": "1118.62928334", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0605190330132"}, "Smalltalk": {"deviation": "38.7533325197", "rating": "1353.06365882", "ratingsMin": "816.033887874", "ratingsMax": "2091.03730205", "volatility": "0.0600888522329"}}, "This language is good for numeric computing": {"Coq": {"deviation": "44.7356916413", "rating": "1189.71221267", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0601097604833"}, "Eiffel": {"deviation": "33.3607874184", "rating": "1581.21790202", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0625944887185"}, "Java": {"deviation": "49.3985383182", "rating": "1567.83347422", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.088810963547"}, "Scala": {"deviation": "39.7068360242", "rating": "1688.42535207", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0619239543817"}, "Delphi": {"deviation": "37.8625964281", "rating": "1508.73566796", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0650504756841"}, "Ada": {"deviation": "38.5551319824", "rating": "1590.74361587", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0626072840191"}, "Perl": {"deviation": "39.7371645469", "rating": "1315.95311567", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0611415018999"}, "Lua": {"deviation": "37.7901221044", "rating": "1333.5466877", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0631342468665"}, "Shell": {"deviation": "46.9584398938", "rating": "985.485135713", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0600247274002"}, "Matlab": {"deviation": "46.1138932635", "rating": "1981.4856518", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0603726903381"}, "Factor": {"deviation": "40.6061343644", "rating": "1493.32955561", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0601694408428"}, "Haxe": {"deviation": "41.0616141573", "rating": "1469.9872948", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0604976775414"}, "Erlang": {"deviation": "36.2494877675", "rating": "1337.03489279", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.063431649579"}, "Forth": {"deviation": "37.8200340973", "rating": "1416.40619379", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0644987984705"}, "Scheme": {"deviation": "43.6451151504", "rating": "1477.94984762", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0802347029561"}, "Objective C": {"deviation": "40.066067208", "rating": "1336.05346643", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0699779385006"}, "C#": {"deviation": "39.9749445645", "rating": "1552.99783749", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0666415790396"}, "Javascript": {"deviation": "43.9678667465", "rating": "1126.37073419", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0592435867398"}, "Common Lisp": {"deviation": "38.7978186555", "rating": "1641.97723645", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0641316765903"}, "TCL": {"deviation": "41.1414395734", "rating": "1214.30062638", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0599591125762"}, "F#": {"deviation": "38.6764603662", "rating": "1829.26455038", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0601667220454"}, "AWK": {"deviation": "43.9593745528", "rating": "1131.10910801", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0599948336701"}, "Ruby": {"deviation": "41.4437561843", "rating": "1320.81257242", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0619269856289"}, "Agda": {"deviation": "59.6877558884", "rating": "1267.58004155", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0601814167034"}, "Groovy": {"deviation": "37.9820530537", "rating": "1355.44051022", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0603162647087"}, "C": {"deviation": "42.2012098067", "rating": "1730.2499338", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0599354049522"}, "Mathematica": {"deviation": "40.9671447688", "rating": "1937.80808091", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0599859905419"}, "D": {"deviation": "36.9303497624", "rating": "1649.71742005", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0601259873749"}, "O'Caml": {"deviation": "40.0731335115", "rating": "1719.7459679", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0605196309301"}, "Io": {"deviation": "35.4993344086", "rating": "1417.79347258", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0611408693456"}, "J": {"deviation": "41.9400564498", "rating": "1842.45359024", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0600341657598"}, "ELisp": {"deviation": "39.7718097758", "rating": "1199.85553865", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0599555444349"}, "C++": {"deviation": "41.3110774217", "rating": "1735.68605266", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0601701641596"}, "Standard ML": {"deviation": "35.0667816577", "rating": "1635.89036424", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0602797335345"}, "R": {"deviation": "43.5411048239", "rating": "1882.86558898", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0622454537616"}, "Clojure": {"deviation": "36.5861288328", "rating": "1544.80354617", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0645976791243"}, "Prolog": {"deviation": "38.9002898264", "rating": "1258.44950997", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.059910660098"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.06"}, "Fortran": {"deviation": "46.4242587058", "rating": "2007.467141", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0600438918866"}, "Assembler": {"deviation": "47.6902784295", "rating": "1504.53246143", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0988625449228"}, "Python": {"deviation": "45.3784397886", "rating": "1660.4806439", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0754936566765"}, "Pascal": {"deviation": "40.7688296244", "rating": "1432.43310753", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0624286547957"}, "Haskell": {"deviation": "41.5360760919", "rating": "1775.52138046", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0611609098091"}, "Cobol": {"deviation": "38.2639361896", "rating": "1436.2709198", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0607685334625"}, "APL": {"deviation": "41.2995158138", "rating": "1876.39175825", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0604405270368"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.06"}, "Go": {"deviation": "37.3752864908", "rating": "1503.44461745", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0608712566175"}, "Visual Basic": {"deviation": "41.9945881343", "rating": "1192.8422259", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.059704322158"}, "PHP": {"deviation": "43.3798121426", "rating": "1221.90543601", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0598155319176"}, "Mozart-Oz": {"deviation": "37.7627975405", "rating": "1273.72015468", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0606653871749"}, "Smalltalk": {"deviation": "37.3249230323", "rating": "1326.63765336", "ratingsMin": "985.485135713", "ratingsMax": "2007.467141", "volatility": "0.0600953956644"}}, "I would use this language for writing embedded programs": {"Coq": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Eiffel": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Java": {"deviation": "43.5044929651", "rating": "1617.55268201", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0601829789793"}, "Scala": {"deviation": "41.3968062935", "rating": "1580.90468683", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0605761702127"}, "Delphi": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Ada": {"deviation": "85.4240780365", "rating": "1740.23182119", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.060207892225"}, "Perl": {"deviation": "42.6959757887", "rating": "1374.30122372", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0606999401179"}, "Lua": {"deviation": "43.3464827161", "rating": "1652.56162725", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0601087060543"}, "Shell": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Matlab": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Factor": {"deviation": "73.8582932881", "rating": "1722.12819707", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600704747451"}, "Haxe": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Erlang": {"deviation": "39.1028536259", "rating": "1371.72596434", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0608113070654"}, "Forth": {"deviation": "53.6669732331", "rating": "2020.45050554", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600117146574"}, "Scheme": {"deviation": "37.8785976485", "rating": "1563.68067545", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0615332415259"}, "Objective C": {"deviation": "42.5122789536", "rating": "1684.12686763", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0604559095611"}, "C#": {"deviation": "39.8474815315", "rating": "1487.20825462", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0614473984857"}, "Javascript": {"deviation": "43.9410745182", "rating": "1275.96027767", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0605323308202"}, "Common Lisp": {"deviation": "39.1104230796", "rating": "1496.87057564", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0605528064731"}, "TCL": {"deviation": "124.168708347", "rating": "1160.34798409", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.060173578807"}, "F#": {"deviation": "85.0990063447", "rating": "1379.66350419", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600163241215"}, "AWK": {"deviation": "51.2219340945", "rating": "1131.01464961", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0599930343266"}, "Ruby": {"deviation": "41.9166174398", "rating": "1333.4777171", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0602759722734"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Groovy": {"deviation": "44.1362307935", "rating": "1338.65824702", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0601919254312"}, "C": {"deviation": "58.0165739951", "rating": "2156.73879962", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.059946411001"}, "Mathematica": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "D": {"deviation": "143.802755543", "rating": "1746.07375379", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600409494133"}, "O'Caml": {"deviation": "45.7991365283", "rating": "1687.49847847", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0602487449636"}, "Io": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "J": {"deviation": "132.527701336", "rating": "1700.42455255", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600327696011"}, "ELisp": {"deviation": "45.8698768424", "rating": "1242.68704566", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600279212253"}, "C++": {"deviation": "45.6832272371", "rating": "1844.66611037", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0599626028569"}, "Standard ML": {"deviation": "56.1478582833", "rating": "1479.93097964", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600433811861"}, "R": {"deviation": "119.470036697", "rating": "1300.12703765", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600341964761"}, "Clojure": {"deviation": "38.6806787773", "rating": "1449.913701", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0610140355719"}, "Prolog": {"deviation": "49.6539245373", "rating": "1266.16945447", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0601151965127"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Fortran": {"deviation": "48.1815598731", "rating": "1571.15409326", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0604274959218"}, "Assembler": {"deviation": "43.8125087164", "rating": "1980.6366489", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600758506687"}, "Python": {"deviation": "43.1809054645", "rating": "1509.2242833", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0614456650658"}, "Pascal": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Haskell": {"deviation": "40.5679417449", "rating": "1542.63344899", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0606176970163"}, "Cobol": {"deviation": "73.9559638536", "rating": "1218.05305439", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600959238282"}, "APL": {"deviation": "107.929386219", "rating": "1526.86586179", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0601610223723"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Go": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Visual Basic": {"deviation": "88.7177595079", "rating": "1325.44994054", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.060048861282"}, "PHP": {"deviation": "46.5315519043", "rating": "1225.34081264", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600157285659"}, "Mozart-Oz": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.06"}, "Smalltalk": {"deviation": "39.5594137645", "rating": "1334.79525415", "ratingsMin": "1131.01464961", "ratingsMax": "2156.73879962", "volatility": "0.0600741527786"}}, "I can imagine using this language in my day job": {"Coq": {"deviation": "36.7979819272", "rating": "1360.19978852", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0623000160509"}, "Eiffel": {"deviation": "34.2237045309", "rating": "1477.80251556", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0637410929986"}, "Java": {"deviation": "52.8091261142", "rating": "1558.69653218", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.114635999802"}, "Scala": {"deviation": "42.5296077472", "rating": "1828.66011258", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0605716520093"}, "Delphi": {"deviation": "38.3512847666", "rating": "1376.39572294", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0633997726814"}, "Ada": {"deviation": "35.51485751", "rating": "1421.78243798", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0622173368117"}, "Perl": {"deviation": "46.3676138411", "rating": "1528.26078487", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.107937767102"}, "Lua": {"deviation": "39.1057142136", "rating": "1503.46317051", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0695469862794"}, "Shell": {"deviation": "41.6309039777", "rating": "1402.85300869", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0777389862972"}, "Matlab": {"deviation": "38.8406835614", "rating": "1439.25149051", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.060559084492"}, "Factor": {"deviation": "35.4376896245", "rating": "1295.24348374", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0608210968679"}, "Haxe": {"deviation": "40.5393799115", "rating": "1600.03330328", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0610965219928"}, "Erlang": {"deviation": "37.6200217318", "rating": "1558.90509899", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0723131983563"}, "Forth": {"deviation": "34.0033784021", "rating": "1260.19189485", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0602290481721"}, "Scheme": {"deviation": "39.3785859307", "rating": "1356.04244928", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0646835748798"}, "Objective C": {"deviation": "39.2932532591", "rating": "1548.71501303", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0694593751546"}, "C#": {"deviation": "41.1483907523", "rating": "1716.90112459", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0638274711365"}, "Javascript": {"deviation": "49.0715769061", "rating": "1389.74882484", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.10952998744"}, "Common Lisp": {"deviation": "43.0970720163", "rating": "1353.74310136", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.076695122142"}, "TCL": {"deviation": "35.9283240416", "rating": "1356.24322602", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0601061228035"}, "F#": {"deviation": "38.2476502038", "rating": "1690.2679192", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0621246013606"}, "AWK": {"deviation": "36.8197776802", "rating": "1409.0477584", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0637594876029"}, "Ruby": {"deviation": "40.1387484204", "rating": "1684.14907559", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0689038579027"}, "Agda": {"deviation": "78.9959213513", "rating": "1383.31418217", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0600226053957"}, "Groovy": {"deviation": "38.7204092698", "rating": "1559.14591702", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.068274974375"}, "C": {"deviation": "172.322077852", "rating": "2054.21913542", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "2.14067382903"}, "Mathematica": {"deviation": "39.927492937", "rating": "1332.85413267", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0602643703791"}, "D": {"deviation": "37.3656726871", "rating": "1531.48172774", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0664359744999"}, "O'Caml": {"deviation": "39.3011072987", "rating": "1551.70440757", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.076232142096"}, "Io": {"deviation": "34.8183994101", "rating": "1421.63176532", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0612127506916"}, "J": {"deviation": "36.1551455788", "rating": "1288.42561067", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0608057724994"}, "ELisp": {"deviation": "35.7464792832", "rating": "1399.63181142", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0618337926664"}, "C++": {"deviation": "114.719291109", "rating": "1684.27718477", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.601456056953"}, "Standard ML": {"deviation": "37.1169919992", "rating": "1385.3092994", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0643045115169"}, "R": {"deviation": "36.5828607548", "rating": "1484.49072479", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0681769567914"}, "Clojure": {"deviation": "38.135257416", "rating": "1615.32741427", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0639947467229"}, "Prolog": {"deviation": "38.583211813", "rating": "1201.09288265", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0610233012"}, "REBOL": {"deviation": "80.3856276109", "rating": "1368.52678165", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.059975242554"}, "Fortran": {"deviation": "39.1850267217", "rating": "1251.32657953", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0628600133894"}, "Assembler": {"deviation": "40.5629755364", "rating": "1320.36675948", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0659063965021"}, "Python": {"deviation": "40.8451231562", "rating": "1454.78919238", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0666642903901"}, "Pascal": {"deviation": "38.4448532014", "rating": "1196.32987756", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0599152108251"}, "Haskell": {"deviation": "58.7627830076", "rating": "1474.01091779", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.167765457289"}, "Cobol": {"deviation": "39.5023696689", "rating": "1279.79658549", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0618178615297"}, "APL": {"deviation": "37.0813693601", "rating": "1195.14857918", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0600880442921"}, "ActionScript": {"deviation": "115.216879053", "rating": "1496.09940078", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0601455742129"}, "Go": {"deviation": "35.810569211", "rating": "1483.95141624", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0633010219493"}, "Visual Basic": {"deviation": "39.2544622788", "rating": "1302.27563357", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0633514553001"}, "PHP": {"deviation": "45.2113307063", "rating": "1336.78517169", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0896575998795"}, "Mozart-Oz": {"deviation": "34.3649538664", "rating": "1250.96826427", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.0603653770516"}, "Smalltalk": {"deviation": "39.323061823", "rating": "1383.7980494", "ratingsMin": "1195.14857918", "ratingsMax": "2054.21913542", "volatility": "0.070896693483"}}, "I would use this language as a scripting language embedded inside a larger application": {"Coq": {"deviation": "39.676154708", "rating": "1139.07332344", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603389568131"}, "Eiffel": {"deviation": "37.2914977185", "rating": "1212.42389881", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0602295186711"}, "Java": {"deviation": "39.1338167595", "rating": "1466.62604858", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0635598469246"}, "Scala": {"deviation": "40.7172880433", "rating": "1621.02586879", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0652963092664"}, "Delphi": {"deviation": "40.3237144274", "rating": "1236.27012892", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0600321353349"}, "Ada": {"deviation": "35.5031713333", "rating": "1257.0817499", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0601452612676"}, "Perl": {"deviation": "41.4710074856", "rating": "1614.66564489", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0775002099171"}, "Lua": {"deviation": "51.9599631642", "rating": "2136.30048959", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0605271759057"}, "Shell": {"deviation": "37.2872406603", "rating": "1445.48097739", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0740587207076"}, "Matlab": {"deviation": "38.482306043", "rating": "1402.77516473", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0613808710163"}, "Factor": {"deviation": "42.8177478607", "rating": "1563.54565088", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603324823148"}, "Haxe": {"deviation": "40.805210462", "rating": "1535.13538598", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603385423661"}, "Erlang": {"deviation": "36.3138852255", "rating": "1350.43776209", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.060735859519"}, "Forth": {"deviation": "35.5629599355", "rating": "1610.95431985", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0653110472977"}, "Scheme": {"deviation": "39.3426236163", "rating": "1816.76066051", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0600894369495"}, "Objective C": {"deviation": "37.6646232444", "rating": "1335.05123379", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0600199300303"}, "C#": {"deviation": "40.2021717718", "rating": "1341.94401683", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0638334834909"}, "Javascript": {"deviation": "41.7106144927", "rating": "1734.71701923", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0599658417332"}, "Common Lisp": {"deviation": "40.2184908793", "rating": "1530.48193716", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.077756992166"}, "TCL": {"deviation": "35.5178260167", "rating": "1724.12806373", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.059957541235"}, "F#": {"deviation": "38.4860634617", "rating": "1524.93844746", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0634903856074"}, "AWK": {"deviation": "35.7367906699", "rating": "1493.28076489", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0651867356697"}, "Ruby": {"deviation": "40.0393728666", "rating": "1831.83600815", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0598915555752"}, "Agda": {"deviation": "75.76896686", "rating": "1418.35685794", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603203385519"}, "Groovy": {"deviation": "39.9633281863", "rating": "1708.9137012", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603084469792"}, "C": {"deviation": "39.7831053419", "rating": "1319.18153793", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0593286757215"}, "Mathematica": {"deviation": "38.875005249", "rating": "1368.34560824", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603030453205"}, "D": {"deviation": "36.7896720545", "rating": "1368.64992446", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603279159412"}, "O'Caml": {"deviation": "35.4604585872", "rating": "1400.24466984", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0617838293746"}, "Io": {"deviation": "42.6856173725", "rating": "1722.76027659", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0603698452675"}, "J": {"deviation": "38.1662159429", "rating": "1331.55786761", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0605744511551"}, "ELisp": {"deviation": "36.065518944", "rating": "1584.45252524", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0657718486496"}, "C++": {"deviation": "40.1445596346", "rating": "1206.65663745", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0588965772825"}, "Standard ML": {"deviation": "33.8285458121", "rating": "1464.19148158", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0612488696442"}, "R": {"deviation": "36.8256199202", "rating": "1488.83228162", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.062631775203"}, "Clojure": {"deviation": "36.1980005155", "rating": "1727.42737759", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0601373560561"}, "Prolog": {"deviation": "40.2836206741", "rating": "1469.96412383", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0726603069711"}, "REBOL": {"deviation": "86.1091678847", "rating": "1408.20764552", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0599790797224"}, "Fortran": {"deviation": "36.1421485459", "rating": "1135.37238632", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0599732759034"}, "Assembler": {"deviation": "41.8144207661", "rating": "1046.26576491", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0601916603223"}, "Python": {"deviation": "46.0098407238", "rating": "1929.50185317", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0596977804779"}, "Pascal": {"deviation": "36.3837278751", "rating": "1241.08585591", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0598277195904"}, "Haskell": {"deviation": "44.5785417121", "rating": "1539.70031918", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0965493988726"}, "Cobol": {"deviation": "39.3353727282", "rating": "1135.81250465", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.059969753029"}, "APL": {"deviation": "35.623563577", "rating": "1343.7694722", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0602196773937"}, "ActionScript": {"deviation": "97.0024123878", "rating": "1458.96046558", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0599921239051"}, "Go": {"deviation": "37.3270810226", "rating": "1406.79739241", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0615389476804"}, "Visual Basic": {"deviation": "40.1700732888", "rating": "1291.57475051", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0620858015034"}, "PHP": {"deviation": "43.8745354879", "rating": "1346.66487807", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0758632862072"}, "Mozart-Oz": {"deviation": "32.7440057809", "rating": "1399.70153547", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0606654898105"}, "Smalltalk": {"deviation": "36.3708107233", "rating": "1507.31688241", "ratingsMin": "1046.26576491", "ratingsMax": "2136.30048959", "volatility": "0.0676560636341"}}, "This language is expressive": {"Coq": {"deviation": "37.7217820021", "rating": "1696.1774292", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.060870132571"}, "Eiffel": {"deviation": "33.3828501145", "rating": "1575.21696875", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0605228711715"}, "Java": {"deviation": "45.5589541019", "rating": "1468.17007707", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0833909555987"}, "Scala": {"deviation": "39.0165206945", "rating": "1797.61777955", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0600475807053"}, "Delphi": {"deviation": "36.9618214577", "rating": "1417.84602702", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.063654206138"}, "Ada": {"deviation": "34.2723551711", "rating": "1524.71217295", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0650676366241"}, "Perl": {"deviation": "43.7056310845", "rating": "1622.1821261", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0893191133007"}, "Lua": {"deviation": "36.4594220695", "rating": "1630.5113195", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0693071579084"}, "Shell": {"deviation": "39.9214632615", "rating": "1237.81665912", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0609956961871"}, "Matlab": {"deviation": "38.412397559", "rating": "1309.54628485", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.062433892031"}, "Factor": {"deviation": "32.6687567115", "rating": "1652.58317597", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0635605496516"}, "Haxe": {"deviation": "35.6919411299", "rating": "1541.70232152", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.060430466361"}, "Erlang": {"deviation": "35.4735479793", "rating": "1604.04099567", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0648275455799"}, "Forth": {"deviation": "37.2898808345", "rating": "1502.46275114", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0707118547361"}, "Scheme": {"deviation": "36.8855668148", "rating": "1729.39687073", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0605484135934"}, "Objective C": {"deviation": "36.9862121418", "rating": "1410.74897091", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0693776118755"}, "C#": {"deviation": "42.0599034335", "rating": "1493.63568157", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0716633892731"}, "Javascript": {"deviation": "43.6598005268", "rating": "1578.51500711", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0907505162188"}, "Common Lisp": {"deviation": "37.9303847897", "rating": "1716.83127671", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0604761526721"}, "TCL": {"deviation": "37.367379306", "rating": "1345.24426552", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0660664999947"}, "F#": {"deviation": "37.6496763006", "rating": "1704.43825802", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0607701224131"}, "AWK": {"deviation": "37.7488773955", "rating": "1302.23387118", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0604114722559"}, "Ruby": {"deviation": "35.8513864153", "rating": "1724.76275967", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.059771458004"}, "Agda": {"deviation": "57.5781422255", "rating": "1837.03262994", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0612745367999"}, "Groovy": {"deviation": "37.4091171719", "rating": "1547.47082726", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0612440340889"}, "C": {"deviation": "41.1418615329", "rating": "1264.55445747", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0622710244238"}, "Mathematica": {"deviation": "45.2536189731", "rating": "1326.01216495", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0601564711445"}, "D": {"deviation": "36.8225133443", "rating": "1534.01154998", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0648361592551"}, "O'Caml": {"deviation": "38.0175934042", "rating": "1840.21339303", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0601082375744"}, "Io": {"deviation": "32.5142285328", "rating": "1575.83953844", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0614403444146"}, "J": {"deviation": "34.1093890082", "rating": "1738.16286057", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0612097486028"}, "ELisp": {"deviation": "39.1098394074", "rating": "1550.63086052", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0668954951972"}, "C++": {"deviation": "50.2353607542", "rating": "1427.90078269", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.110758286464"}, "Standard ML": {"deviation": "37.9076107059", "rating": "1777.60282627", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.060853995759"}, "R": {"deviation": "36.6704193101", "rating": "1531.1649053", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.063429524042"}, "Clojure": {"deviation": "42.2863324524", "rating": "1894.58503622", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0599997907193"}, "Prolog": {"deviation": "41.0844041777", "rating": "1613.87593761", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0866771211214"}, "REBOL": {"deviation": "71.71977276", "rating": "1756.32088156", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0608154069407"}, "Fortran": {"deviation": "39.3513577313", "rating": "1198.1012249", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0600053264046"}, "Assembler": {"deviation": "45.1300814726", "rating": "1090.75790654", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0598745585286"}, "Python": {"deviation": "40.8965381974", "rating": "1725.43743152", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0617843362874"}, "Pascal": {"deviation": "39.5334968014", "rating": "1312.85654273", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.060637266093"}, "Haskell": {"deviation": "38.5790766673", "rating": "1839.10289639", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0598300275597"}, "Cobol": {"deviation": "40.8648418853", "rating": "1165.0082347", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.060050184968"}, "APL": {"deviation": "35.6027523126", "rating": "1586.16001653", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0680800466218"}, "ActionScript": {"deviation": "92.6641281692", "rating": "1506.91160615", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0599962860259"}, "Go": {"deviation": "34.2151180147", "rating": "1574.24707862", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0617617240101"}, "Visual Basic": {"deviation": "39.2904149696", "rating": "1321.38587779", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0614386911074"}, "PHP": {"deviation": "40.2704203021", "rating": "1292.26314722", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0617596444093"}, "Mozart-Oz": {"deviation": "33.6505058999", "rating": "1612.16627142", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.0604373205857"}, "Smalltalk": {"deviation": "34.5810619696", "rating": "1598.10362888", "ratingsMin": "1090.75790654", "ratingsMax": "1894.58503622", "volatility": "0.060662139468"}}, "The resources for learning this language are of high quality": {"Coq": {"deviation": "36.2161643037", "rating": "1305.99092815", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0603115337967"}, "Eiffel": {"deviation": "34.6045947009", "rating": "1437.69014235", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0629950395086"}, "Java": {"deviation": "37.8447236253", "rating": "1658.63447625", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0610529070304"}, "Scala": {"deviation": "39.483680391", "rating": "1657.94112418", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0675596300719"}, "Delphi": {"deviation": "38.0714698849", "rating": "1440.62463638", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0626483179743"}, "Ada": {"deviation": "35.7595537363", "rating": "1547.43081673", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0663198013451"}, "Perl": {"deviation": "42.3762302736", "rating": "1567.3859111", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0793871701838"}, "Lua": {"deviation": "39.8977531931", "rating": "1466.94185963", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0654993365714"}, "Shell": {"deviation": "37.7026647869", "rating": "1447.18385902", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0652630012495"}, "Matlab": {"deviation": "38.7244807504", "rating": "1563.21895203", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0618985762652"}, "Factor": {"deviation": "35.6740707597", "rating": "1402.81705866", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0608049807255"}, "Haxe": {"deviation": "46.1865903725", "rating": "1542.71695763", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.060349077416"}, "Erlang": {"deviation": "36.980275834", "rating": "1523.6684643", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0695445323985"}, "Forth": {"deviation": "35.2970695436", "rating": "1354.33477948", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0607058488226"}, "Scheme": {"deviation": "36.7263558493", "rating": "1699.58568466", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0643016556715"}, "Objective C": {"deviation": "37.4549412143", "rating": "1532.74322663", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0685771948333"}, "C#": {"deviation": "36.1046893889", "rating": "1669.15235538", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0605550484801"}, "Javascript": {"deviation": "44.6615089835", "rating": "1465.54483981", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0934980979847"}, "Common Lisp": {"deviation": "38.1583773307", "rating": "1645.76022662", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0739013902845"}, "TCL": {"deviation": "34.1469059918", "rating": "1376.72446824", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0621987935598"}, "F#": {"deviation": "35.9094434747", "rating": "1480.6828829", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0658272893536"}, "AWK": {"deviation": "35.5904816182", "rating": "1412.62461751", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.061509821751"}, "Ruby": {"deviation": "39.5233740236", "rating": "1675.10409663", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0646247194018"}, "Agda": {"deviation": "86.0910093223", "rating": "1124.18411205", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0604665577959"}, "Groovy": {"deviation": "38.9534304275", "rating": "1439.49980129", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.06272835458"}, "C": {"deviation": "39.7924015335", "rating": "1633.2185691", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0696505339045"}, "Mathematica": {"deviation": "39.8154754227", "rating": "1576.61056837", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0606293769738"}, "D": {"deviation": "37.5479191549", "rating": "1401.01971999", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0606548107418"}, "O'Caml": {"deviation": "36.4701248683", "rating": "1429.19475065", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0672890978023"}, "Io": {"deviation": "36.4047422007", "rating": "1368.70756644", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0606157023043"}, "J": {"deviation": "39.9925677287", "rating": "1405.32798616", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0602307992247"}, "ELisp": {"deviation": "36.6784587235", "rating": "1458.68787681", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0615294834048"}, "C++": {"deviation": "47.214431262", "rating": "1582.95645354", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.104955139486"}, "Standard ML": {"deviation": "34.4187474362", "rating": "1551.06634987", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0636993913076"}, "R": {"deviation": "33.8380062284", "rating": "1365.4229786", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.061481716848"}, "Clojure": {"deviation": "37.8425214132", "rating": "1484.54914658", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.067582399388"}, "Prolog": {"deviation": "35.8581392442", "rating": "1452.96169632", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0630708026931"}, "REBOL": {"deviation": "81.7683122427", "rating": "1239.20745954", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0604169201454"}, "Fortran": {"deviation": "35.6318005338", "rating": "1350.68373573", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0613091443314"}, "Assembler": {"deviation": "38.9748697093", "rating": "1391.44122279", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.063076470623"}, "Python": {"deviation": "37.4721898203", "rating": "1737.44823536", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0598280154255"}, "Pascal": {"deviation": "37.5270990738", "rating": "1371.18876951", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0625702615648"}, "Haskell": {"deviation": "36.3117416825", "rating": "1544.39728359", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0648667035258"}, "Cobol": {"deviation": "36.6155278139", "rating": "1342.12561383", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0604573456731"}, "APL": {"deviation": "35.4279429866", "rating": "1389.82118008", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.060104889071"}, "ActionScript": {"deviation": "94.8705100332", "rating": "1408.96021699", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0600139604684"}, "Go": {"deviation": "34.5070417022", "rating": "1473.1930475", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0637787799133"}, "Visual Basic": {"deviation": "38.847089289", "rating": "1534.36579922", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0721856867589"}, "PHP": {"deviation": "49.0460181247", "rating": "1465.58586482", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.108181020182"}, "Mozart-Oz": {"deviation": "38.9778169785", "rating": "1336.59393774", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0619673857911"}, "Smalltalk": {"deviation": "36.3851389934", "rating": "1472.10699651", "ratingsMin": "1124.18411205", "ratingsMax": "1737.44823536", "volatility": "0.0672522847751"}}, "This language excels at symbolic manipulation": {"Coq": {"deviation": "37.6176865548", "rating": "1645.7546914", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0602394678878"}, "Eiffel": {"deviation": "34.3716354449", "rating": "1442.51487931", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0611188777601"}, "Java": {"deviation": "38.5607114654", "rating": "1352.96652794", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0625299672713"}, "Scala": {"deviation": "38.1765459967", "rating": "1598.70097222", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0604812003836"}, "Delphi": {"deviation": "36.2310038121", "rating": "1271.40180202", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0600437691349"}, "Ada": {"deviation": "34.8923334697", "rating": "1362.46873142", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0605474570331"}, "Perl": {"deviation": "41.6284302691", "rating": "1592.30504854", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.073300807553"}, "Lua": {"deviation": "39.2385088057", "rating": "1543.02933706", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0668100084867"}, "Shell": {"deviation": "37.2517969904", "rating": "1297.95826868", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0601103692288"}, "Matlab": {"deviation": "36.9247565865", "rating": "1538.41749884", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0610949669209"}, "Factor": {"deviation": "34.8512069763", "rating": "1564.82514656", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0619372921383"}, "Haxe": {"deviation": "46.117119776", "rating": "1721.73861982", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0608108074912"}, "Erlang": {"deviation": "38.0873788417", "rating": "1668.63216275", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0657197020031"}, "Forth": {"deviation": "36.3324308345", "rating": "1436.47222643", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0643397269495"}, "Scheme": {"deviation": "41.259018158", "rating": "1923.59552267", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0600013457088"}, "Objective C": {"deviation": "35.280676888", "rating": "1325.8932036", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0616445716013"}, "C#": {"deviation": "36.2227366523", "rating": "1420.19025374", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0630935319435"}, "Javascript": {"deviation": "39.7699529124", "rating": "1427.58197737", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.074193604859"}, "Common Lisp": {"deviation": "45.8553780539", "rating": "2027.89081767", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0601262817305"}, "TCL": {"deviation": "37.4599052206", "rating": "1444.93570946", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0675329495144"}, "F#": {"deviation": "40.6178473516", "rating": "1798.31847937", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.060091889988"}, "AWK": {"deviation": "36.407711339", "rating": "1362.94794067", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0654225847293"}, "Ruby": {"deviation": "40.2497039718", "rating": "1571.85336541", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.067254630641"}, "Agda": {"deviation": "67.2079911207", "rating": "1607.94273878", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0604229537294"}, "Groovy": {"deviation": "37.4832469436", "rating": "1475.79657859", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0632650159768"}, "C": {"deviation": "40.5324022464", "rating": "1218.45981758", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0593970425267"}, "Mathematica": {"deviation": "47.5814816273", "rating": "1880.46171836", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0603579562024"}, "D": {"deviation": "35.4319355954", "rating": "1459.07285965", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.062442606299"}, "O'Caml": {"deviation": "39.9174263862", "rating": "1794.24738205", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0600386077565"}, "Io": {"deviation": "32.4196585209", "rating": "1502.01617158", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0606784755503"}, "J": {"deviation": "34.6248156448", "rating": "1556.9621199", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.060511830405"}, "ELisp": {"deviation": "37.1169757532", "rating": "1782.27507034", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0608134432102"}, "C++": {"deviation": "38.7274769306", "rating": "1322.77289743", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0631111559721"}, "Standard ML": {"deviation": "39.0200382785", "rating": "1841.01819163", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.059925511162"}, "R": {"deviation": "35.1075008212", "rating": "1593.47897388", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0629953058728"}, "Clojure": {"deviation": "38.4720179553", "rating": "1805.28714096", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0599454181267"}, "Prolog": {"deviation": "37.0560924458", "rating": "1657.54844266", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0619723344162"}, "REBOL": {"deviation": "61.0193743845", "rating": "1794.21536812", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0600692199712"}, "Fortran": {"deviation": "39.4305697714", "rating": "1083.83693686", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0601597831907"}, "Assembler": {"deviation": "42.5783488268", "rating": "1081.81400695", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0600118211686"}, "Python": {"deviation": "40.1195335738", "rating": "1628.97503501", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0640777754799"}, "Pascal": {"deviation": "37.0030879375", "rating": "1190.9428702", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.059871134262"}, "Haskell": {"deviation": "39.3876755587", "rating": "1804.02137344", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0604405018139"}, "Cobol": {"deviation": "39.0430579201", "rating": "1133.06224213", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0608837842425"}, "APL": {"deviation": "33.7786633222", "rating": "1459.22571018", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0609795538133"}, "ActionScript": {"deviation": "129.19853389", "rating": "974.056816262", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0603850315943"}, "Go": {"deviation": "37.2798037979", "rating": "1374.68964834", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0608694912768"}, "Visual Basic": {"deviation": "37.7279798648", "rating": "1165.96352395", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0599555050768"}, "PHP": {"deviation": "36.6798312956", "rating": "1289.96420418", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0605961817852"}, "Mozart-Oz": {"deviation": "33.1879540987", "rating": "1681.57627273", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0602557963772"}, "Smalltalk": {"deviation": "36.0094209738", "rating": "1630.08080838", "ratingsMin": "974.056816262", "ratingsMax": "2027.89081767", "volatility": "0.0662606933155"}}, "This language is good for scientific computing": {"Coq": {"deviation": "40.0164622652", "rating": "1601.60004358", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.06247590063"}, "Eiffel": {"deviation": "36.307246067", "rating": "1467.53505012", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0609330029257"}, "Java": {"deviation": "41.335729631", "rating": "1511.25998435", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0901477615505"}, "Scala": {"deviation": "34.144511625", "rating": "1589.68898289", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0605090555746"}, "Delphi": {"deviation": "39.6375265788", "rating": "1428.84486737", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0605146012101"}, "Ada": {"deviation": "36.069999489", "rating": "1555.99627254", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0633185875301"}, "Perl": {"deviation": "36.1691711695", "rating": "1521.46273691", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0755641891939"}, "Lua": {"deviation": "36.1886353983", "rating": "1372.20207579", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0606768123967"}, "Shell": {"deviation": "41.6002693647", "rating": "1226.40438146", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600144138311"}, "Matlab": {"deviation": "47.5570898074", "rating": "1944.06782206", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0603105635159"}, "Factor": {"deviation": "36.6580805481", "rating": "1300.86147504", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0605239806555"}, "Haxe": {"deviation": "52.9647809784", "rating": "1308.33960188", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599966251416"}, "Erlang": {"deviation": "35.4436003568", "rating": "1484.15401681", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0670615318642"}, "Forth": {"deviation": "33.4760358613", "rating": "1352.53710492", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0623822935271"}, "Scheme": {"deviation": "39.1862356431", "rating": "1464.28873191", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0774422488471"}, "Objective C": {"deviation": "33.2281981498", "rating": "1555.01921445", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0622681496535"}, "C#": {"deviation": "37.0934519016", "rating": "1544.09577807", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0745641879714"}, "Javascript": {"deviation": "37.3465364141", "rating": "1292.70955084", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.059257617956"}, "Common Lisp": {"deviation": "33.9655202318", "rating": "1586.76353339", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0639671134134"}, "TCL": {"deviation": "37.9201991264", "rating": "1207.05782413", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600675429449"}, "F#": {"deviation": "36.6033904157", "rating": "1754.05885948", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599156491908"}, "AWK": {"deviation": "38.2925066847", "rating": "1216.49782182", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0602533303992"}, "Ruby": {"deviation": "37.4004626071", "rating": "1333.45600509", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0640906937385"}, "Agda": {"deviation": "95.6464677707", "rating": "1498.03895116", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600585773134"}, "Groovy": {"deviation": "33.5353348908", "rating": "1375.90680879", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0602781863485"}, "C": {"deviation": "39.1126698232", "rating": "1713.39427279", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.064319127123"}, "Mathematica": {"deviation": "44.3584350798", "rating": "1817.92569911", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600070011154"}, "D": {"deviation": "32.9186273484", "rating": "1551.94084539", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0603809093894"}, "O'Caml": {"deviation": "35.1246751861", "rating": "1576.74942766", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0601280499671"}, "Io": {"deviation": "42.6281036864", "rating": "1308.54000366", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600269845029"}, "J": {"deviation": "39.7865135529", "rating": "1774.05178738", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0612749652678"}, "ELisp": {"deviation": "35.9559498165", "rating": "1216.24047872", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599108602493"}, "C++": {"deviation": "37.6477106061", "rating": "1585.9637981", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0623870959823"}, "Standard ML": {"deviation": "32.8559631016", "rating": "1604.56617046", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0628859798019"}, "R": {"deviation": "41.9817964177", "rating": "1843.75945091", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599696944065"}, "Clojure": {"deviation": "35.5460659346", "rating": "1453.656383", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0627294613144"}, "Prolog": {"deviation": "36.5801954512", "rating": "1481.22142571", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0703675760531"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.06"}, "Fortran": {"deviation": "38.5679496854", "rating": "1776.54913669", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600723885549"}, "Assembler": {"deviation": "36.4440230816", "rating": "1407.73984564", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0625173402029"}, "Python": {"deviation": "37.8147094078", "rating": "1746.86865293", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0628024288295"}, "Pascal": {"deviation": "38.6101635473", "rating": "1462.26211491", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0603546493708"}, "Haskell": {"deviation": "38.4638588725", "rating": "1882.11836246", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599371729209"}, "Cobol": {"deviation": "39.1847054442", "rating": "1158.62774804", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0602755194633"}, "APL": {"deviation": "37.2071997252", "rating": "1691.6070308", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599720845104"}, "ActionScript": {"deviation": "100.507745462", "rating": "1022.01565702", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0600690323636"}, "Go": {"deviation": "35.6555309582", "rating": "1583.27400129", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.060769904939"}, "Visual Basic": {"deviation": "41.7462190916", "rating": "1137.58843436", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0599829561529"}, "PHP": {"deviation": "39.7481114433", "rating": "1291.86531841", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0595481447236"}, "Mozart-Oz": {"deviation": "41.6806312695", "rating": "1433.00375107", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0605243907418"}, "Smalltalk": {"deviation": "33.5892097526", "rating": "1426.91560094", "ratingsMin": "1022.01565702", "ratingsMax": "1944.06782206", "volatility": "0.0606858357176"}}, "I often write things in this language with the intent of rewriting them in something else later": {"Coq": {"deviation": "34.789931757", "rating": "1701.92739813", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0608314268533"}, "Eiffel": {"deviation": "32.1020200281", "rating": "1477.79918338", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0601401834751"}, "Java": {"deviation": "50.1001554575", "rating": "1469.59131433", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.106895567106"}, "Scala": {"deviation": "37.3382132748", "rating": "1450.16980449", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0646914122483"}, "Delphi": {"deviation": "35.3728778812", "rating": "1362.80086966", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0620930732356"}, "Ada": {"deviation": "32.7345999601", "rating": "1279.4169233", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0606778280868"}, "Perl": {"deviation": "36.7185787324", "rating": "1633.73694468", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0617595940166"}, "Lua": {"deviation": "37.7589607105", "rating": "1494.1190876", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0650626905028"}, "Shell": {"deviation": "40.5998601471", "rating": "1782.53901721", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0607881269607"}, "Matlab": {"deviation": "37.8020151205", "rating": "1651.33879371", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0606263998479"}, "Factor": {"deviation": "33.6549273062", "rating": "1453.5631806", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.06455151382"}, "Haxe": {"deviation": "34.5979570936", "rating": "1526.04877547", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0613895791121"}, "Erlang": {"deviation": "37.2421115464", "rating": "1380.16203536", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0624758049285"}, "Forth": {"deviation": "32.8970815954", "rating": "1450.25557332", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0628565928162"}, "Scheme": {"deviation": "37.7200962312", "rating": "1606.48667302", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0660268186998"}, "Objective C": {"deviation": "36.5368737816", "rating": "1397.48531314", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.060595711348"}, "C#": {"deviation": "41.0121894167", "rating": "1420.65889358", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0773291852042"}, "Javascript": {"deviation": "42.7251090508", "rating": "1610.41716792", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0822865439072"}, "Common Lisp": {"deviation": "38.5300978803", "rating": "1487.38563774", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0805575010055"}, "TCL": {"deviation": "36.824563124", "rating": "1607.75034947", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0659138612844"}, "F#": {"deviation": "36.5640711408", "rating": "1570.11821775", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0688800347267"}, "AWK": {"deviation": "35.9416208298", "rating": "1641.84168706", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0657824921913"}, "Ruby": {"deviation": "36.7850536486", "rating": "1707.64577919", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0614578238152"}, "Agda": {"deviation": "65.1842374041", "rating": "1682.6961667", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0603310613853"}, "Groovy": {"deviation": "35.0577535035", "rating": "1537.51475205", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0602682434984"}, "C": {"deviation": "41.6935141526", "rating": "1312.25599627", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0698705652678"}, "Mathematica": {"deviation": "42.1490516257", "rating": "1643.01769038", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0604750651725"}, "D": {"deviation": "35.3229916459", "rating": "1354.87991932", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0602140084777"}, "O'Caml": {"deviation": "38.5645871795", "rating": "1486.91060746", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0703010301726"}, "Io": {"deviation": "33.086444215", "rating": "1548.00100885", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0606491137992"}, "J": {"deviation": "33.4473728987", "rating": "1557.88999163", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0617614996295"}, "ELisp": {"deviation": "37.3270369433", "rating": "1466.31832679", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0686898972843"}, "C++": {"deviation": "41.4971654138", "rating": "1417.38895701", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0813168965397"}, "Standard ML": {"deviation": "32.3960981945", "rating": "1428.8940048", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.061620616233"}, "R": {"deviation": "34.5823373084", "rating": "1610.21850941", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0608321835181"}, "Clojure": {"deviation": "38.1238475472", "rating": "1621.01019129", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.065804653827"}, "Prolog": {"deviation": "36.089903637", "rating": "1505.91283767", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0735508223378"}, "REBOL": {"deviation": "87.2295608268", "rating": "1641.0898595", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0600871483313"}, "Fortran": {"deviation": "34.9271836139", "rating": "1332.94296298", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0603804163208"}, "Assembler": {"deviation": "37.5102259833", "rating": "1266.00991873", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0605985514481"}, "Python": {"deviation": "40.0246889346", "rating": "1722.18731922", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0611124262538"}, "Pascal": {"deviation": "33.6614469883", "rating": "1474.89167773", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0638518742868"}, "Haskell": {"deviation": "45.6083050489", "rating": "1581.71727006", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0850335362086"}, "Cobol": {"deviation": "34.383828637", "rating": "1250.22653709", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0604631949277"}, "APL": {"deviation": "32.7784853413", "rating": "1386.04693567", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0663045127179"}, "ActionScript": {"deviation": "92.4534386406", "rating": "1899.29246197", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0608536038819"}, "Go": {"deviation": "33.7965469925", "rating": "1415.30382103", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0625329523086"}, "Visual Basic": {"deviation": "38.3303757219", "rating": "1526.43420588", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0682056584306"}, "PHP": {"deviation": "40.1918043451", "rating": "1607.30737146", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0690204314135"}, "Mozart-Oz": {"deviation": "31.8746827411", "rating": "1549.86641042", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0619237303001"}, "Smalltalk": {"deviation": "33.8689879649", "rating": "1453.13596943", "ratingsMin": "1250.22653709", "ratingsMax": "1899.29246197", "volatility": "0.0648760829978"}}, "This language has a good community": {"Coq": {"deviation": "38.7484421982", "rating": "1494.78852351", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0614705797168"}, "Eiffel": {"deviation": "40.0172094523", "rating": "1377.87035855", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0610493507721"}, "Java": {"deviation": "45.3748881099", "rating": "1627.70288893", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0773145587391"}, "Scala": {"deviation": "39.3223088529", "rating": "1653.85169684", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0609962687327"}, "Delphi": {"deviation": "36.7565633691", "rating": "1396.19408864", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0610730631111"}, "Ada": {"deviation": "38.6305503606", "rating": "1256.45152596", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.06178276407"}, "Perl": {"deviation": "40.163727131", "rating": "1598.9614656", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0678038066053"}, "Lua": {"deviation": "40.4712105357", "rating": "1550.82090282", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.068844926538"}, "Shell": {"deviation": "40.1544195633", "rating": "1357.55895592", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0616848030105"}, "Matlab": {"deviation": "40.8950646301", "rating": "1433.90868144", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0605468324424"}, "Factor": {"deviation": "37.5551274232", "rating": "1560.75255516", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0608619610597"}, "Haxe": {"deviation": "45.2109582758", "rating": "1613.24434157", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.060082583994"}, "Erlang": {"deviation": "37.4107245685", "rating": "1607.11805412", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0631878047125"}, "Forth": {"deviation": "37.2276426209", "rating": "1324.74059038", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0603382519619"}, "Scheme": {"deviation": "41.5961754501", "rating": "1567.58117002", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0764029412158"}, "Objective C": {"deviation": "38.8868583703", "rating": "1604.01313582", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0674820710694"}, "C#": {"deviation": "39.9158801898", "rating": "1552.03840479", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.070711306182"}, "Javascript": {"deviation": "48.9176918617", "rating": "1567.72858013", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0917517642144"}, "Common Lisp": {"deviation": "42.1487157159", "rating": "1478.63612195", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0791036819311"}, "TCL": {"deviation": "36.7020025902", "rating": "1358.15950518", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0615862338212"}, "F#": {"deviation": "37.2375827674", "rating": "1526.02173751", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0654409629152"}, "AWK": {"deviation": "40.1736036791", "rating": "1245.11271937", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0599719046237"}, "Ruby": {"deviation": "37.5462564725", "rating": "1688.11036463", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0604681340834"}, "Agda": {"deviation": "81.2810068742", "rating": "1751.34417455", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0600227184182"}, "Groovy": {"deviation": "37.7367262307", "rating": "1578.26225257", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0635508469133"}, "C": {"deviation": "98.3988419151", "rating": "1412.38461815", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.376546277228"}, "Mathematica": {"deviation": "38.1044903313", "rating": "1438.08850999", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0610464322602"}, "D": {"deviation": "37.1904494845", "rating": "1526.24103324", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0624848655891"}, "O'Caml": {"deviation": "37.9941044094", "rating": "1579.07306642", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0682608237395"}, "Io": {"deviation": "38.5068406793", "rating": "1510.10089447", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0612768665561"}, "J": {"deviation": "38.26144381", "rating": "1471.60505878", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0605248997896"}, "ELisp": {"deviation": "36.9300853298", "rating": "1552.06336967", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.063497076611"}, "C++": {"deviation": "57.6134746867", "rating": "1337.59335664", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.130061707088"}, "Standard ML": {"deviation": "34.999071317", "rating": "1446.8435414", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0613467151876"}, "R": {"deviation": "36.544369393", "rating": "1603.96019792", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0611449255166"}, "Clojure": {"deviation": "41.8530190401", "rating": "1743.60286369", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0603147397289"}, "Prolog": {"deviation": "37.9709482653", "rating": "1342.24502642", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0635376447648"}, "REBOL": {"deviation": "132.212313154", "rating": "1581.28224007", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.059988843158"}, "Fortran": {"deviation": "41.6184975176", "rating": "1259.36323769", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0602088711499"}, "Assembler": {"deviation": "44.0564114353", "rating": "1150.10963882", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0598380131064"}, "Python": {"deviation": "40.5344233054", "rating": "1731.79459887", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0594219789259"}, "Pascal": {"deviation": "42.9694284818", "rating": "1191.92432818", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.060004446706"}, "Haskell": {"deviation": "42.9703822158", "rating": "1843.03748325", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0618303258781"}, "Cobol": {"deviation": "46.1538930363", "rating": "1084.9542946", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.059971500366"}, "APL": {"deviation": "37.8129295642", "rating": "1416.31080959", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0610572037226"}, "ActionScript": {"deviation": "104.348418351", "rating": "1289.48374481", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0600114124276"}, "Go": {"deviation": "35.6573561709", "rating": "1605.8641183", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0623125294847"}, "Visual Basic": {"deviation": "40.731987359", "rating": "1308.2570744", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0604247587042"}, "PHP": {"deviation": "46.8558751607", "rating": "1600.01998821", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0918659592867"}, "Mozart-Oz": {"deviation": "35.9998049657", "rating": "1351.25041394", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.0604447211345"}, "Smalltalk": {"deviation": "36.8298699418", "rating": "1538.74844017", "ratingsMin": "1084.9542946", "ratingsMax": "1843.03748325", "volatility": "0.06676909154"}}, "This language has a very coherent design": {"Coq": {"deviation": "35.8222212209", "rating": "1720.89394552", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0600927576846"}, "Eiffel": {"deviation": "33.829758087", "rating": "1727.98936897", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0601162036184"}, "Java": {"deviation": "52.4651090195", "rating": "1519.67643808", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.112228075305"}, "Scala": {"deviation": "40.6373375835", "rating": "1629.13598799", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0656512343716"}, "Delphi": {"deviation": "37.91985304", "rating": "1400.38580374", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.06479004965"}, "Ada": {"deviation": "32.947946936", "rating": "1423.22571507", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0649633550106"}, "Perl": {"deviation": "36.2628621805", "rating": "1216.22306288", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.059699836482"}, "Lua": {"deviation": "36.5205006213", "rating": "1645.58921446", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0615662539103"}, "Shell": {"deviation": "37.7265244223", "rating": "1283.3791863", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0596679237025"}, "Matlab": {"deviation": "37.9402672825", "rating": "1305.40811445", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0600343512609"}, "Factor": {"deviation": "35.372267741", "rating": "1602.67063703", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0599769209138"}, "Haxe": {"deviation": "37.9722057945", "rating": "1436.44160247", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0605476627025"}, "Erlang": {"deviation": "38.5205465577", "rating": "1618.18725834", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0629988715806"}, "Forth": {"deviation": "33.5691166469", "rating": "1623.47930395", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0638990657346"}, "Scheme": {"deviation": "40.7653964644", "rating": "1835.28129335", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0599897726313"}, "Objective C": {"deviation": "35.9287233033", "rating": "1448.3607545", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0653696992029"}, "C#": {"deviation": "45.5806142995", "rating": "1446.32168958", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0897690575464"}, "Javascript": {"deviation": "40.7587960723", "rating": "1284.85285058", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0634533886909"}, "Common Lisp": {"deviation": "34.922248011", "rating": "1605.73506602", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0741452656055"}, "TCL": {"deviation": "33.0505672112", "rating": "1404.21177564", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0653581479332"}, "F#": {"deviation": "37.4557148846", "rating": "1577.72011657", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0655305839666"}, "AWK": {"deviation": "34.9041018506", "rating": "1355.96357408", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0645874631511"}, "Ruby": {"deviation": "46.9935884641", "rating": "1473.21303539", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0850993293337"}, "Agda": {"deviation": "74.2939140782", "rating": "1658.30308473", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0601132455367"}, "Groovy": {"deviation": "37.5712689045", "rating": "1352.05256316", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0602090356833"}, "C": {"deviation": "91.3840515801", "rating": "1350.7882341", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.387444480653"}, "Mathematica": {"deviation": "37.8734273392", "rating": "1421.2734427", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0613624687399"}, "D": {"deviation": "35.0874976018", "rating": "1526.56654983", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0639273325843"}, "O'Caml": {"deviation": "34.6783625668", "rating": "1600.88632788", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.061207546517"}, "Io": {"deviation": "38.0224250101", "rating": "1750.73601016", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0615279125121"}, "J": {"deviation": "34.1155428795", "rating": "1621.86530709", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0622659531373"}, "ELisp": {"deviation": "32.9978922385", "rating": "1341.70493491", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0609418619988"}, "C++": {"deviation": "38.2318330503", "rating": "1302.96988974", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0596775920437"}, "Standard ML": {"deviation": "37.8023499675", "rating": "1732.1897859", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0604969357073"}, "R": {"deviation": "37.9017262884", "rating": "1386.97510872", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0600963376965"}, "Clojure": {"deviation": "35.808861257", "rating": "1653.5874197", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0604288403765"}, "Prolog": {"deviation": "36.0599600614", "rating": "1555.65241887", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.067639288476"}, "REBOL": {"deviation": "71.4838531945", "rating": "1771.75586524", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0612667742369"}, "Fortran": {"deviation": "34.6684055341", "rating": "1396.29582748", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0609079926256"}, "Assembler": {"deviation": "40.1338988155", "rating": "1369.49902067", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0772121224109"}, "Python": {"deviation": "48.9429998868", "rating": "1621.64039415", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.103002920248"}, "Pascal": {"deviation": "37.8000018644", "rating": "1434.51713091", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.065849591037"}, "Haskell": {"deviation": "35.5879535471", "rating": "1665.075269", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0602493888176"}, "Cobol": {"deviation": "35.9564744548", "rating": "1386.46132487", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0606211855584"}, "APL": {"deviation": "34.0824210933", "rating": "1623.09915064", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0653789997579"}, "ActionScript": {"deviation": "123.897330568", "rating": "1159.94490143", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0601756666427"}, "Go": {"deviation": "38.3574873816", "rating": "1566.79488456", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0678436553391"}, "Visual Basic": {"deviation": "38.2375683956", "rating": "1186.41109898", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0597605405375"}, "PHP": {"deviation": "44.2602676769", "rating": "1037.59870146", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0596702257074"}, "Mozart-Oz": {"deviation": "33.1893259828", "rating": "1564.00250377", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0608669485676"}, "Smalltalk": {"deviation": "34.9468984492", "rating": "1733.38477842", "ratingsMin": "1037.59870146", "ratingsMax": "1835.28129335", "volatility": "0.0604572885776"}}, "Code written in this language tends to be verbose": {"Coq": {"deviation": "36.3134206677", "rating": "1423.5591317", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0665939118171"}, "Eiffel": {"deviation": "38.7100461915", "rating": "1674.53724146", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601716406905"}, "Java": {"deviation": "45.0706440304", "rating": "1898.16297794", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0591684641085"}, "Scala": {"deviation": "40.848801538", "rating": "1334.26959781", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0645728500998"}, "Delphi": {"deviation": "39.0324873129", "rating": "1761.26055273", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601864216302"}, "Ada": {"deviation": "38.0341055602", "rating": "1789.1162853", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.060017312528"}, "Perl": {"deviation": "37.0615021033", "rating": "1419.48529353", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0630482654034"}, "Lua": {"deviation": "35.9825226347", "rating": "1337.37010277", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0620637369612"}, "Shell": {"deviation": "38.2357453724", "rating": "1448.07604397", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0724017343795"}, "Matlab": {"deviation": "37.33591729", "rating": "1554.71229341", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0619605568577"}, "Factor": {"deviation": "36.976850736", "rating": "1190.62951888", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0626831846684"}, "Haxe": {"deviation": "40.8383456065", "rating": "1573.59125543", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0625156173178"}, "Erlang": {"deviation": "37.5740952097", "rating": "1419.18647229", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0656428425135"}, "Forth": {"deviation": "33.5809265452", "rating": "1261.4883224", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0602466870213"}, "Scheme": {"deviation": "35.0343329679", "rating": "1284.04751688", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0607928068019"}, "Objective C": {"deviation": "37.7645626977", "rating": "1727.94274398", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.060103027457"}, "C#": {"deviation": "40.3034122687", "rating": "1683.78826521", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0618816048591"}, "Javascript": {"deviation": "46.5777302567", "rating": "1600.59897456", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0885491158171"}, "Common Lisp": {"deviation": "36.6676008628", "rating": "1437.69203375", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0617720307752"}, "TCL": {"deviation": "34.8670274661", "rating": "1491.61641842", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0633117482025"}, "F#": {"deviation": "37.7971082614", "rating": "1273.99563108", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0602257762071"}, "AWK": {"deviation": "34.8267746598", "rating": "1383.56755711", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.060971538561"}, "Ruby": {"deviation": "39.2862414853", "rating": "1428.19803444", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0612076399857"}, "Agda": {"deviation": "139.989198765", "rating": "1571.07052113", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0599879295124"}, "Groovy": {"deviation": "38.3672764879", "rating": "1438.27719316", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0648871446092"}, "C": {"deviation": "41.4733409654", "rating": "1599.95242034", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0693730693532"}, "Mathematica": {"deviation": "46.048957591", "rating": "1455.01776593", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0603393448725"}, "D": {"deviation": "35.7365869146", "rating": "1497.88158899", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.06319029062"}, "O'Caml": {"deviation": "36.7735469304", "rating": "1237.04100739", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601158992431"}, "Io": {"deviation": "37.8108846915", "rating": "1356.56240794", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0600540230202"}, "J": {"deviation": "40.7180994602", "rating": "1106.68282722", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601710441255"}, "ELisp": {"deviation": "33.9645884683", "rating": "1471.65078717", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0617505949829"}, "C++": {"deviation": "39.285856033", "rating": "1682.89696518", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0598981221084"}, "Standard ML": {"deviation": "34.2031173227", "rating": "1293.033001", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0605296473395"}, "R": {"deviation": "36.7804481774", "rating": "1435.13418464", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0616253110698"}, "Clojure": {"deviation": "36.1010436497", "rating": "1339.77081678", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0602605181018"}, "Prolog": {"deviation": "36.3956970155", "rating": "1323.81635024", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.062830292117"}, "REBOL": {"deviation": "87.2665617589", "rating": "1228.11140943", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601999318582"}, "Fortran": {"deviation": "34.7626820494", "rating": "1587.61950613", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0602258908329"}, "Assembler": {"deviation": "39.7163178166", "rating": "1699.97388173", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0610608325953"}, "Python": {"deviation": "39.3380648202", "rating": "1341.10973536", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0743116570751"}, "Pascal": {"deviation": "35.8623817817", "rating": "1684.51602441", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601872519381"}, "Haskell": {"deviation": "37.067324722", "rating": "1360.8740354", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0604756822212"}, "Cobol": {"deviation": "40.8592756825", "rating": "1980.21008056", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0600923731944"}, "APL": {"deviation": "40.0259759989", "rating": "1153.13146625", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0601247189439"}, "ActionScript": {"deviation": "161.970360477", "rating": "1788.93689206", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0600369876615"}, "Go": {"deviation": "34.433670259", "rating": "1501.01734774", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0627321938962"}, "Visual Basic": {"deviation": "39.5274882716", "rating": "1733.80053346", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0605064620353"}, "PHP": {"deviation": "39.3243402554", "rating": "1570.95992439", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0632782181395"}, "Mozart-Oz": {"deviation": "36.2805668957", "rating": "1553.91590504", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0619892186244"}, "Smalltalk": {"deviation": "34.1681439339", "rating": "1519.88358752", "ratingsMin": "1106.68282722", "ratingsMax": "1980.21008056", "volatility": "0.0656054478495"}}, "This is a low level language": {"Coq": {"deviation": "52.4671281636", "rating": "1147.8424857", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0601757912437"}, "Eiffel": {"deviation": "36.1052872109", "rating": "1521.6908583", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0602355205697"}, "Java": {"deviation": "47.7874763947", "rating": "1532.36917003", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0787145813294"}, "Scala": {"deviation": "38.9911004012", "rating": "1295.13821619", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0602229332678"}, "Delphi": {"deviation": "38.3926742983", "rating": "1601.00038989", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0611858247107"}, "Ada": {"deviation": "38.9447443371", "rating": "1624.17540067", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.062632328621"}, "Perl": {"deviation": "44.4139618384", "rating": "1513.49812052", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0764840955455"}, "Lua": {"deviation": "39.4070252929", "rating": "1491.66626988", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0651745339915"}, "Shell": {"deviation": "44.2765753036", "rating": "1481.19481971", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0775916079503"}, "Matlab": {"deviation": "40.1416747364", "rating": "1328.24049858", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0604190208976"}, "Factor": {"deviation": "37.6329965864", "rating": "1534.50099614", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0607970852904"}, "Haxe": {"deviation": "41.4408617057", "rating": "1356.26212257", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0617299001372"}, "Erlang": {"deviation": "39.6032659543", "rating": "1428.20233358", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0627107845414"}, "Forth": {"deviation": "44.7342793304", "rating": "1985.78133823", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0605428413354"}, "Scheme": {"deviation": "41.1100178732", "rating": "1331.13772794", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0648933616757"}, "Objective C": {"deviation": "40.8056282547", "rating": "1786.87034551", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0597649264212"}, "C#": {"deviation": "43.9234508575", "rating": "1555.029398", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0680133653308"}, "Javascript": {"deviation": "43.196666887", "rating": "1408.36962568", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0623908148559"}, "Common Lisp": {"deviation": "40.8272243198", "rating": "1350.26186235", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0655465189888"}, "TCL": {"deviation": "36.4323273481", "rating": "1454.14268183", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0617599928757"}, "F#": {"deviation": "38.4697600404", "rating": "1277.97287207", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0600012989386"}, "AWK": {"deviation": "39.57643386", "rating": "1467.54572618", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0686822752324"}, "Ruby": {"deviation": "40.0787617627", "rating": "1325.44930249", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0608223548219"}, "Agda": {"deviation": "100.459266214", "rating": "995.375144507", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0608017643952"}, "Groovy": {"deviation": "39.572959434", "rating": "1342.09102333", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0600447736667"}, "C": {"deviation": "57.9276333133", "rating": "2141.71385404", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0598151683261"}, "Mathematica": {"deviation": "44.3643828003", "rating": "1165.02841962", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0601638463728"}, "D": {"deviation": "42.7215019265", "rating": "1836.31441963", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0601997791986"}, "O'Caml": {"deviation": "38.0746253196", "rating": "1399.00365693", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0641085454832"}, "Io": {"deviation": "37.9926742226", "rating": "1372.58139589", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0607096020562"}, "J": {"deviation": "37.9514098436", "rating": "1181.45119816", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0604242354291"}, "ELisp": {"deviation": "38.1302900006", "rating": "1346.87864016", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0602240254647"}, "C++": {"deviation": "48.1506210748", "rating": "1890.71045953", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0589983910058"}, "Standard ML": {"deviation": "38.0237770374", "rating": "1270.42544077", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0613570430253"}, "R": {"deviation": "39.1386339135", "rating": "1284.74986647", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0601670117565"}, "Clojure": {"deviation": "44.8657043252", "rating": "1202.85168599", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0642405570165"}, "Prolog": {"deviation": "41.49970447", "rating": "1152.93140382", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0603002435955"}, "REBOL": {"deviation": "70.0750135214", "rating": "1213.64216994", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0600902174546"}, "Fortran": {"deviation": "44.4961154667", "rating": "1782.12724267", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0598931289614"}, "Assembler": {"deviation": "67.1755116727", "rating": "2453.93232715", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0602209770652"}, "Python": {"deviation": "43.4997153334", "rating": "1304.85978291", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0635736241275"}, "Pascal": {"deviation": "41.3333426486", "rating": "1772.99877472", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0601047230442"}, "Haskell": {"deviation": "44.3701913102", "rating": "1239.61987597", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0611306513882"}, "Cobol": {"deviation": "40.3946837449", "rating": "1535.4644297", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.064518161197"}, "APL": {"deviation": "38.4434098083", "rating": "1299.03868963", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.061307071379"}, "ActionScript": {"deviation": "119.492409158", "rating": "1503.08483087", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0599750031749"}, "Go": {"deviation": "40.201160424", "rating": "1727.97513781", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.059958575014"}, "Visual Basic": {"deviation": "41.071368231", "rating": "1540.19489867", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0696256888879"}, "PHP": {"deviation": "47.0566738661", "rating": "1479.76888005", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0809211698549"}, "Mozart-Oz": {"deviation": "38.2379001686", "rating": "1405.3943199", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0606195020109"}, "Smalltalk": {"deviation": "38.0791992755", "rating": "1337.16913425", "ratingsMin": "995.375144507", "ratingsMax": "2453.93232715", "volatility": "0.0614473308056"}}, "This language has well-organized libraries with consistent carefully thought-out interfaces": {"Coq": {"deviation": "35.2343371538", "rating": "1472.29748934", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0612518287874"}, "Eiffel": {"deviation": "35.5018321377", "rating": "1655.9783395", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0606291824185"}, "Java": {"deviation": "44.1246006341", "rating": "1713.17494743", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0652361001814"}, "Scala": {"deviation": "39.4639597456", "rating": "1664.78206149", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0603005566061"}, "Delphi": {"deviation": "39.9755686324", "rating": "1454.71653743", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0654245758923"}, "Ada": {"deviation": "36.9623421808", "rating": "1560.83559348", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0627349519407"}, "Perl": {"deviation": "39.9065573809", "rating": "1437.85246521", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0735088872487"}, "Lua": {"deviation": "38.2444023587", "rating": "1439.20154127", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0666459139306"}, "Shell": {"deviation": "40.7416112625", "rating": "1204.76732745", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0599392244712"}, "Matlab": {"deviation": "36.0689866627", "rating": "1421.87886321", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0615859388473"}, "Factor": {"deviation": "38.4567866349", "rating": "1434.98403191", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0603289504034"}, "Haxe": {"deviation": "49.5222128562", "rating": "1524.39953606", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0600499397562"}, "Erlang": {"deviation": "36.0518217381", "rating": "1503.94351616", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0669472528675"}, "Forth": {"deviation": "40.9239846419", "rating": "1223.53283743", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.060274325686"}, "Scheme": {"deviation": "46.7122262122", "rating": "1462.45164404", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0872307576765"}, "Objective C": {"deviation": "39.652441269", "rating": "1693.40225706", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0623585528439"}, "C#": {"deviation": "39.6585865514", "rating": "1592.98702155", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0610184775132"}, "Javascript": {"deviation": "41.4433097716", "rating": "1334.08299184", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0656403782552"}, "Common Lisp": {"deviation": "41.900942952", "rating": "1470.93512843", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0794816452847"}, "TCL": {"deviation": "34.6995017869", "rating": "1446.02218964", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0614046961242"}, "F#": {"deviation": "39.2449177388", "rating": "1711.33277052", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0600628162619"}, "AWK": {"deviation": "36.7951705146", "rating": "1279.75031367", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0602985253016"}, "Ruby": {"deviation": "40.3302226564", "rating": "1649.01662786", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0640017719671"}, "Agda": {"deviation": "74.5827622506", "rating": "1359.49697829", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0603317553049"}, "Groovy": {"deviation": "38.5018905879", "rating": "1565.36084422", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0647181943854"}, "C": {"deviation": "65.4497381382", "rating": "1372.83715135", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.171265799699"}, "Mathematica": {"deviation": "38.6640677551", "rating": "1564.92128508", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0610841204656"}, "D": {"deviation": "36.6434681744", "rating": "1519.48729457", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0628442958271"}, "O'Caml": {"deviation": "37.4780815146", "rating": "1521.81740677", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0672713688057"}, "Io": {"deviation": "34.3026035581", "rating": "1464.69837993", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0611936484455"}, "J": {"deviation": "38.548135623", "rating": "1466.48613463", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0608451133958"}, "ELisp": {"deviation": "37.8379641652", "rating": "1395.67017987", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0630679039876"}, "C++": {"deviation": "67.818071654", "rating": "1557.48986642", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.195328609688"}, "Standard ML": {"deviation": "36.7124792532", "rating": "1468.83823116", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0656239110832"}, "R": {"deviation": "36.6229720695", "rating": "1383.55971889", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0623071039789"}, "Clojure": {"deviation": "39.1309857284", "rating": "1626.31620528", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0603277355983"}, "Prolog": {"deviation": "37.5037626793", "rating": "1368.82290753", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.061638364365"}, "REBOL": {"deviation": "97.0509448782", "rating": "1727.94626983", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.060028707565"}, "Fortran": {"deviation": "36.4322295966", "rating": "1335.11937923", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0606665919328"}, "Assembler": {"deviation": "44.8583591574", "rating": "1034.25874051", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0599226383359"}, "Python": {"deviation": "41.3076347132", "rating": "1627.0314167", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0637356836846"}, "Pascal": {"deviation": "37.4008800503", "rating": "1358.93257861", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0601639204856"}, "Haskell": {"deviation": "40.7552302841", "rating": "1681.72198305", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0619849587223"}, "Cobol": {"deviation": "38.9798769838", "rating": "1237.22622761", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0605401045147"}, "APL": {"deviation": "37.4042406451", "rating": "1224.37354363", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0605004793183"}, "ActionScript": {"deviation": "84.0403713844", "rating": "1350.28986164", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0600666932018"}, "Go": {"deviation": "34.2276866705", "rating": "1507.51183828", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0610391262531"}, "Visual Basic": {"deviation": "39.5078056124", "rating": "1296.18700729", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.063659394133"}, "PHP": {"deviation": "40.7454467217", "rating": "1407.88451721", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0606039794473"}, "Mozart-Oz": {"deviation": "34.662385541", "rating": "1439.29773165", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.06146391447"}, "Smalltalk": {"deviation": "34.4502083299", "rating": "1717.0546723", "ratingsMin": "1034.25874051", "ratingsMax": "1727.94626983", "volatility": "0.0613629197483"}}, "This language is best for very large projects": {"Coq": {"deviation": "41.6834846766", "rating": "1386.40450046", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0690315359472"}, "Eiffel": {"deviation": "36.9565595301", "rating": "1782.98680913", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0602293562309"}, "Java": {"deviation": "43.7259243161", "rating": "1884.10823156", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0591652725508"}, "Scala": {"deviation": "44.2281861183", "rating": "1943.86072502", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0598015352955"}, "Delphi": {"deviation": "39.1380981194", "rating": "1567.43496382", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0620994025004"}, "Ada": {"deviation": "40.1716813796", "rating": "1740.91223744", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0609150700397"}, "Perl": {"deviation": "42.512527961", "rating": "1393.49315096", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0708941479718"}, "Lua": {"deviation": "39.5702165148", "rating": "1439.87993948", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0616164217389"}, "Shell": {"deviation": "42.8256329352", "rating": "1175.02537683", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.060141555826"}, "Matlab": {"deviation": "42.9127537527", "rating": "1261.88973198", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0599683799166"}, "Factor": {"deviation": "44.626602155", "rating": "1357.25265482", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0601590811112"}, "Haxe": {"deviation": "52.2103846616", "rating": "1561.97233048", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0601390744298"}, "Erlang": {"deviation": "40.2719189544", "rating": "1778.71529596", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.060601574988"}, "Forth": {"deviation": "36.8140288429", "rating": "1373.80583261", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0616122789637"}, "Scheme": {"deviation": "44.1172322691", "rating": "1389.15888737", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0790308866786"}, "Objective C": {"deviation": "37.5315817286", "rating": "1732.12287796", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0607089569762"}, "C#": {"deviation": "43.640394731", "rating": "1924.61771141", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0597941279554"}, "Javascript": {"deviation": "44.1316337166", "rating": "1352.51965844", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0632650354433"}, "Common Lisp": {"deviation": "37.9744986384", "rating": "1640.33734018", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0610328870085"}, "TCL": {"deviation": "38.193088284", "rating": "1358.00273013", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0603690664382"}, "F#": {"deviation": "39.0896130269", "rating": "1719.91692058", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0601852015281"}, "AWK": {"deviation": "43.1603443709", "rating": "1182.26239692", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0600370087126"}, "Ruby": {"deviation": "40.2035574394", "rating": "1621.12082202", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0654017690118"}, "Agda": {"deviation": "70.6536390163", "rating": "1426.37069978", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0600549969797"}, "Groovy": {"deviation": "38.4598317332", "rating": "1518.13694576", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0618558883993"}, "C": {"deviation": "55.9779397168", "rating": "1660.25049617", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.110163754412"}, "Mathematica": {"deviation": "46.300751304", "rating": "1352.62072264", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0600833588728"}, "D": {"deviation": "37.5122736035", "rating": "1685.19923945", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0601252578334"}, "O'Caml": {"deviation": "39.5021599827", "rating": "1787.34652282", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0602568075686"}, "Io": {"deviation": "39.4784086704", "rating": "1605.65070852", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0642813971721"}, "J": {"deviation": "39.3636654279", "rating": "1537.33083703", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0608360943799"}, "ELisp": {"deviation": "39.1320657743", "rating": "1363.14822382", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0602808268286"}, "C++": {"deviation": "40.6084137148", "rating": "1755.96493321", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0607685844071"}, "Standard ML": {"deviation": "35.8391582759", "rating": "1616.73051186", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0618425269557"}, "R": {"deviation": "39.1791238018", "rating": "1295.46204161", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0599440517244"}, "Clojure": {"deviation": "41.1325373092", "rating": "1742.29937488", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0601098197578"}, "Prolog": {"deviation": "38.1562110218", "rating": "1289.23127067", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0604078266322"}, "REBOL": {"deviation": "206.880115827", "rating": "1194.64132193", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.060014492548"}, "Fortran": {"deviation": "39.4583696753", "rating": "1427.08736531", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0649371310404"}, "Assembler": {"deviation": "46.0074350498", "rating": "1180.92559851", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.059892503056"}, "Python": {"deviation": "40.1047122006", "rating": "1668.60709326", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0603093873956"}, "Pascal": {"deviation": "39.8000677693", "rating": "1453.76071449", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0620284573397"}, "Haskell": {"deviation": "40.3814934429", "rating": "1672.27697992", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0640379827568"}, "Cobol": {"deviation": "40.5296638656", "rating": "1461.63934781", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0616130532186"}, "APL": {"deviation": "37.4950429895", "rating": "1313.08602539", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0629656366756"}, "ActionScript": {"deviation": "133.342332186", "rating": "1713.29611609", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0600219850861"}, "Go": {"deviation": "38.2308135053", "rating": "1663.26280862", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0604972844336"}, "Visual Basic": {"deviation": "42.9856724786", "rating": "1405.15339243", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0640138508487"}, "PHP": {"deviation": "44.7502978532", "rating": "1420.68987315", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0670718629523"}, "Mozart-Oz": {"deviation": "35.6176289521", "rating": "1434.9950346", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.0610807716011"}, "Smalltalk": {"deviation": "38.9351228268", "rating": "1647.2460746", "ratingsMin": "1175.02537683", "ratingsMax": "1943.86072502", "volatility": "0.062646529235"}}, "If my code in this language successfully compiles there is a good chance my code is correct.": {"Coq": {"deviation": "54.679931162", "rating": "2140.50678098", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0605433917097"}, "Eiffel": {"deviation": "39.5150061788", "rating": "1638.24987768", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0611073955999"}, "Java": {"deviation": "38.5473517329", "rating": "1616.34963309", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0623756909882"}, "Scala": {"deviation": "42.0580758204", "rating": "1776.26576853", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0599510719528"}, "Delphi": {"deviation": "37.4822951187", "rating": "1618.39740878", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0640315698665"}, "Ada": {"deviation": "42.4572539639", "rating": "1879.74129425", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0610728508856"}, "Perl": {"deviation": "36.5556179088", "rating": "1246.76472287", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0598505736488"}, "Lua": {"deviation": "36.3742992899", "rating": "1370.04629625", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0609328896169"}, "Shell": {"deviation": "37.6533971429", "rating": "1270.09686082", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.061123996296"}, "Matlab": {"deviation": "35.6395623867", "rating": "1441.91518146", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0613950413136"}, "Factor": {"deviation": "39.1697305539", "rating": "1453.59687942", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0609188604125"}, "Haxe": {"deviation": "42.1454932888", "rating": "1718.7909333", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0600520499409"}, "Erlang": {"deviation": "35.4001552842", "rating": "1549.18916267", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0642064782095"}, "Forth": {"deviation": "33.9431937318", "rating": "1268.46556657", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0614583797695"}, "Scheme": {"deviation": "37.4170532245", "rating": "1576.39365849", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0682432289784"}, "Objective C": {"deviation": "36.7760620133", "rating": "1493.72463079", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0646241146768"}, "C#": {"deviation": "37.8472084263", "rating": "1602.9393892", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0611131419068"}, "Javascript": {"deviation": "37.7035616176", "rating": "1339.10071797", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0611069410152"}, "Common Lisp": {"deviation": "36.7227501806", "rating": "1471.70022813", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0661596567874"}, "TCL": {"deviation": "35.2931945928", "rating": "1287.83867857", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0604900996547"}, "F#": {"deviation": "39.5380775475", "rating": "1790.03912406", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0601186065731"}, "AWK": {"deviation": "34.1123606103", "rating": "1337.40401178", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0619515057356"}, "Ruby": {"deviation": "36.4661213354", "rating": "1313.91037238", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0620742229093"}, "Agda": {"deviation": "91.2421508904", "rating": "2243.64865155", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0601612231515"}, "Groovy": {"deviation": "36.3789224058", "rating": "1417.63843165", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0601174882266"}, "C": {"deviation": "41.0451824631", "rating": "1413.4210779", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0861615733433"}, "Mathematica": {"deviation": "37.8800975301", "rating": "1483.82939088", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0615870814703"}, "D": {"deviation": "35.8113370149", "rating": "1574.01048142", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0624727605608"}, "O'Caml": {"deviation": "42.0526803523", "rating": "1964.12049817", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0603935882528"}, "Io": {"deviation": "40.5981108188", "rating": "1484.08258024", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0612545284284"}, "J": {"deviation": "51.7553142483", "rating": "1580.646546", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0601811933336"}, "ELisp": {"deviation": "36.5832093408", "rating": "1336.9620435", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0601275134265"}, "C++": {"deviation": "44.8729941305", "rating": "1493.19198453", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.104694146356"}, "Standard ML": {"deviation": "38.8037554214", "rating": "1919.58841814", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.060385232967"}, "R": {"deviation": "35.2399327989", "rating": "1354.97750124", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0604925851683"}, "Clojure": {"deviation": "37.1821634638", "rating": "1578.69665691", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0622107826106"}, "Prolog": {"deviation": "36.4111815104", "rating": "1489.41616942", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0705847975237"}, "REBOL": {"deviation": "86.0245803463", "rating": "1056.88520264", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0614527157838"}, "Fortran": {"deviation": "35.4550636961", "rating": "1354.52903004", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0639783184013"}, "Assembler": {"deviation": "38.8532602331", "rating": "1179.15268877", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0600157847354"}, "Python": {"deviation": "42.8116916626", "rating": "1478.19760202", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0814308689472"}, "Pascal": {"deviation": "36.6429246463", "rating": "1507.92028863", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0690688498319"}, "Haskell": {"deviation": "52.9005791961", "rating": "2135.3560828", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0600352017922"}, "Cobol": {"deviation": "34.4801433637", "rating": "1432.28447854", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0635916169636"}, "APL": {"deviation": "37.5877964985", "rating": "1380.19573067", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0606896761798"}, "ActionScript": {"deviation": "78.6294655218", "rating": "1238.3804185", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0600135686865"}, "Go": {"deviation": "38.3372798765", "rating": "1657.35548981", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0611221212267"}, "Visual Basic": {"deviation": "37.1201669438", "rating": "1327.4929009", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0658048153614"}, "PHP": {"deviation": "37.94927498", "rating": "1297.33807785", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0600445959493"}, "Mozart-Oz": {"deviation": "56.5334915234", "rating": "1469.30411676", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0602991075363"}, "Smalltalk": {"deviation": "33.4278751194", "rating": "1498.57623654", "ratingsMin": "1056.88520264", "ratingsMax": "2243.64865155", "volatility": "0.0645656575448"}}, "I find code written in this language very elegant": {"Coq": {"deviation": "38.7022518576", "rating": "1618.41834084", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0619249814514"}, "Eiffel": {"deviation": "34.4443361508", "rating": "1466.07628498", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.060718292033"}, "Java": {"deviation": "37.248171008", "rating": "1273.73460431", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0610526675672"}, "Scala": {"deviation": "42.0412564574", "rating": "1623.73171658", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.060627886876"}, "Delphi": {"deviation": "34.8224715417", "rating": "1275.655711", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0601565602396"}, "Ada": {"deviation": "35.3712105291", "rating": "1314.75765335", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0653943521791"}, "Perl": {"deviation": "36.0751940078", "rating": "1227.27339363", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0599745313663"}, "Lua": {"deviation": "41.2098311618", "rating": "1495.23515793", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0774065513113"}, "Shell": {"deviation": "36.2121391116", "rating": "1211.1248986", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0602559842961"}, "Matlab": {"deviation": "36.0440435288", "rating": "1236.01450685", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0603879108835"}, "Factor": {"deviation": "35.2195022451", "rating": "1607.07976054", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0628000752413"}, "Haxe": {"deviation": "43.96426163", "rating": "1509.22890084", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0601792969187"}, "Erlang": {"deviation": "36.4654042646", "rating": "1555.21846218", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0691083379888"}, "Forth": {"deviation": "36.0263641503", "rating": "1444.06862824", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0712584834637"}, "Scheme": {"deviation": "38.7423551231", "rating": "1724.88001978", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0615423459369"}, "Objective C": {"deviation": "35.6876920902", "rating": "1386.03151932", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0618202821919"}, "C#": {"deviation": "37.5931345317", "rating": "1336.88535219", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0722731427855"}, "Javascript": {"deviation": "39.082311251", "rating": "1388.12483863", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0696533776708"}, "Common Lisp": {"deviation": "38.5448561463", "rating": "1546.20966184", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.066385967949"}, "TCL": {"deviation": "36.4527496315", "rating": "1311.86242632", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0605000061996"}, "F#": {"deviation": "38.836864198", "rating": "1675.39851511", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0602705427441"}, "AWK": {"deviation": "35.2887480836", "rating": "1311.16123975", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0601988548441"}, "Ruby": {"deviation": "41.9127655825", "rating": "1571.00263178", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0717636115229"}, "Agda": {"deviation": "58.2283559263", "rating": "1757.41695058", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0600996309708"}, "Groovy": {"deviation": "37.7143544854", "rating": "1483.19457025", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0656869144095"}, "C": {"deviation": "37.0933686209", "rating": "1275.29175811", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0622306601549"}, "Mathematica": {"deviation": "38.0933382206", "rating": "1323.44288165", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0602063176188"}, "D": {"deviation": "35.1185230636", "rating": "1466.44872002", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0646326884926"}, "O'Caml": {"deviation": "37.0744722323", "rating": "1665.45708224", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0614300972727"}, "Io": {"deviation": "39.7823432375", "rating": "1590.7073019", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0603224837216"}, "J": {"deviation": "36.1181944014", "rating": "1597.54201799", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0618456671504"}, "ELisp": {"deviation": "37.3445250098", "rating": "1365.44232096", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0614252914862"}, "C++": {"deviation": "36.1496483238", "rating": "1196.8636054", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0598231231271"}, "Standard ML": {"deviation": "38.8991172562", "rating": "1740.11974475", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0609565276457"}, "R": {"deviation": "36.3632068283", "rating": "1388.10797692", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0604035683741"}, "Clojure": {"deviation": "40.378849253", "rating": "1671.8703275", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0599385360494"}, "Prolog": {"deviation": "36.7772618518", "rating": "1506.68022282", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0720285927296"}, "REBOL": {"deviation": "90.0734189162", "rating": "1701.07932918", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0611615676127"}, "Fortran": {"deviation": "37.4133374678", "rating": "1261.67710768", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.059933796541"}, "Assembler": {"deviation": "36.9331191919", "rating": "1105.70542029", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0605561675716"}, "Python": {"deviation": "42.815943481", "rating": "1523.3698836", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.077098956279"}, "Pascal": {"deviation": "34.7021088316", "rating": "1302.80733102", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0604160889408"}, "Haskell": {"deviation": "43.4624631661", "rating": "1852.04026173", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0602112436465"}, "Cobol": {"deviation": "37.0787597411", "rating": "1041.04804454", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0601151263742"}, "APL": {"deviation": "36.7982654002", "rating": "1595.49439061", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.063201649961"}, "ActionScript": {"deviation": "112.826240392", "rating": "991.527465236", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0602506218053"}, "Go": {"deviation": "36.8643711368", "rating": "1450.51873687", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0628824280467"}, "Visual Basic": {"deviation": "40.1327684564", "rating": "1028.5073485", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0605008056178"}, "PHP": {"deviation": "37.3452983844", "rating": "1172.88310692", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0593633550434"}, "Mozart-Oz": {"deviation": "36.7937667822", "rating": "1426.31812964", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.0606410552126"}, "Smalltalk": {"deviation": "39.7577046346", "rating": "1703.93423672", "ratingsMin": "991.527465236", "ratingsMax": "1852.04026173", "volatility": "0.060562133814"}}, "This language has an annoying syntax": {"Coq": {"deviation": "36.239638471", "rating": "1512.76028804", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0604534625667"}, "Eiffel": {"deviation": "32.4229899222", "rating": "1518.20832899", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0618231219092"}, "Java": {"deviation": "49.2333646346", "rating": "1548.90200892", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0965156415827"}, "Scala": {"deviation": "38.2787291042", "rating": "1374.19842692", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0617322616124"}, "Delphi": {"deviation": "33.5002859997", "rating": "1597.15562362", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0639765233294"}, "Ada": {"deviation": "32.002795025", "rating": "1440.63595171", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0654637123096"}, "Perl": {"deviation": "39.1531832385", "rating": "1752.24683739", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.061045431218"}, "Lua": {"deviation": "35.9086395376", "rating": "1368.4224274", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0625768195271"}, "Shell": {"deviation": "36.7962438812", "rating": "1700.64695152", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0613384478888"}, "Matlab": {"deviation": "35.999089677", "rating": "1592.87909431", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0637354059546"}, "Factor": {"deviation": "37.5601193008", "rating": "1453.56188277", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0602332873753"}, "Haxe": {"deviation": "42.3159995549", "rating": "1354.18145964", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0600378140331"}, "Erlang": {"deviation": "35.2808717873", "rating": "1536.60881511", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0631762781917"}, "Forth": {"deviation": "32.8917601691", "rating": "1475.50641175", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0617221619828"}, "Scheme": {"deviation": "35.6056850982", "rating": "1378.99675423", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0633269821156"}, "Objective C": {"deviation": "35.2775444098", "rating": "1530.6120883", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0645629629464"}, "C#": {"deviation": "42.1479117629", "rating": "1421.46540593", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0667593491949"}, "Javascript": {"deviation": "43.0541055291", "rating": "1443.93151445", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.075016638712"}, "Common Lisp": {"deviation": "36.4719894637", "rating": "1450.51565341", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0716720109138"}, "TCL": {"deviation": "33.4646748536", "rating": "1558.70393415", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0630512953824"}, "F#": {"deviation": "35.496444831", "rating": "1509.3426074", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0625498666518"}, "AWK": {"deviation": "35.7545543311", "rating": "1611.81828221", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0647553059377"}, "Ruby": {"deviation": "38.5118054804", "rating": "1336.88631011", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0627496944953"}, "Agda": {"deviation": "73.6669762827", "rating": "1428.41289461", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0603803090835"}, "Groovy": {"deviation": "37.2901678013", "rating": "1406.49461714", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.060290943199"}, "C": {"deviation": "49.1006202452", "rating": "1451.18308397", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0923100475474"}, "Mathematica": {"deviation": "36.6467644935", "rating": "1553.56457157", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0604731542505"}, "D": {"deviation": "34.8194698407", "rating": "1423.28539213", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0610556348358"}, "O'Caml": {"deviation": "37.7277255638", "rating": "1536.33332159", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0637361124128"}, "Io": {"deviation": "35.4935893302", "rating": "1346.56922576", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0600882616212"}, "J": {"deviation": "82.9071638081", "rating": "1537.36048173", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0600117633486"}, "ELisp": {"deviation": "34.8438424334", "rating": "1405.63799492", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0604966037176"}, "C++": {"deviation": "40.3151148101", "rating": "1630.83367723", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0655841404437"}, "Standard ML": {"deviation": "35.8628360072", "rating": "1411.53809951", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0607183500223"}, "R": {"deviation": "37.5608288409", "rating": "1583.25156702", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0608423064597"}, "Clojure": {"deviation": "37.0294479376", "rating": "1257.89978772", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0604930052181"}, "Prolog": {"deviation": "34.4917429258", "rating": "1438.68287246", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0655449868425"}, "REBOL": {"deviation": "82.8877659918", "rating": "1179.52001451", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0607669041284"}, "Fortran": {"deviation": "37.0970428151", "rating": "1679.88985222", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0619156782931"}, "Assembler": {"deviation": "36.0498148866", "rating": "1569.2275722", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0640924394099"}, "Python": {"deviation": "43.6979339057", "rating": "1338.17181953", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0645581925538"}, "Pascal": {"deviation": "36.5512408345", "rating": "1599.01727645", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0703116428215"}, "Haskell": {"deviation": "39.1404064318", "rating": "1333.21345409", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0618522929335"}, "Cobol": {"deviation": "36.7307522868", "rating": "1805.40793533", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.061563785261"}, "APL": {"deviation": "41.5321110085", "rating": "1598.7250663", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.060098569796"}, "ActionScript": {"deviation": "91.0558405274", "rating": "1653.7608042", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0600607259301"}, "Go": {"deviation": "38.5090816408", "rating": "1422.09885484", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0622877973485"}, "Visual Basic": {"deviation": "37.0342761367", "rating": "1624.26653441", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0616921284731"}, "PHP": {"deviation": "41.7973857355", "rating": "1630.04919699", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0629933093644"}, "Mozart-Oz": {"deviation": "57.8871730804", "rating": "1641.14706852", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0600703594445"}, "Smalltalk": {"deviation": "33.1809533789", "rating": "1282.8981794", "ratingsMin": "1179.52001451", "ratingsMax": "1805.40793533", "volatility": "0.0610057255294"}}, "This language excels at concurrency": {"Coq": {"deviation": "33.085678611", "rating": "1370.63545179", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0608895881582"}, "Eiffel": {"deviation": "33.3912996033", "rating": "1618.28785732", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0714927562032"}, "Java": {"deviation": "35.0449125032", "rating": "1428.16657131", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0607399730163"}, "Scala": {"deviation": "44.8047591817", "rating": "2019.28035774", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0598888626635"}, "Delphi": {"deviation": "31.8918031662", "rating": "1558.99328132", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0650131917453"}, "Ada": {"deviation": "33.7971973797", "rating": "1573.18144032", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0620384442057"}, "Perl": {"deviation": "34.1318815163", "rating": "1428.40123275", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0618992879463"}, "Lua": {"deviation": "33.2548849936", "rating": "1330.41228151", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0629387661525"}, "Shell": {"deviation": "38.9028543284", "rating": "1329.23261225", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0642127221071"}, "Matlab": {"deviation": "37.849504833", "rating": "1459.6248483", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0609198202842"}, "Factor": {"deviation": "32.8318216246", "rating": "1520.02799374", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0624133247042"}, "Haxe": {"deviation": "39.5675142082", "rating": "1446.49165389", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0599987514111"}, "Erlang": {"deviation": "60.9795065002", "rating": "2311.07074344", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0599787322982"}, "Forth": {"deviation": "31.9754454165", "rating": "1422.92427075", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0621844021104"}, "Scheme": {"deviation": "36.4000481166", "rating": "1457.83151063", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0848511679857"}, "Objective C": {"deviation": "33.0049988927", "rating": "1442.29634049", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0657029155376"}, "C#": {"deviation": "34.4035668094", "rating": "1561.18900545", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0600438632014"}, "Javascript": {"deviation": "34.851316134", "rating": "1415.72068278", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0649082467025"}, "Common Lisp": {"deviation": "33.2742202767", "rating": "1456.7098502", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0759745568103"}, "TCL": {"deviation": "33.2982348775", "rating": "1451.65559134", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0603004520144"}, "F#": {"deviation": "37.2539929415", "rating": "1806.85022411", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0599616739628"}, "AWK": {"deviation": "37.4608958985", "rating": "1113.3012755", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0602076041723"}, "Ruby": {"deviation": "35.6359574639", "rating": "1344.11380085", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.068359417988"}, "Agda": {"deviation": "51.7312756537", "rating": "1352.75628127", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0603175758792"}, "Groovy": {"deviation": "33.3086502403", "rating": "1520.41497601", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0613242187758"}, "C": {"deviation": "40.7757840232", "rating": "1415.84045793", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.102091967859"}, "Mathematica": {"deviation": "42.7494221265", "rating": "1412.27617421", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0614791680119"}, "D": {"deviation": "33.0595831135", "rating": "1643.62869901", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0607529920946"}, "O'Caml": {"deviation": "34.6915367545", "rating": "1592.93795591", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0711861759195"}, "Io": {"deviation": "32.458577785", "rating": "1419.87390823", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0636738527813"}, "J": {"deviation": "33.0939634213", "rating": "1609.03958062", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0609130306465"}, "ELisp": {"deviation": "35.0093417436", "rating": "1324.67372885", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0599077205742"}, "C++": {"deviation": "40.7371298103", "rating": "1321.97829316", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.138108621806"}, "Standard ML": {"deviation": "31.5799601625", "rating": "1473.04308156", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0643286983558"}, "R": {"deviation": "34.3112523898", "rating": "1413.95546651", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0604374891314"}, "Clojure": {"deviation": "45.6963103065", "rating": "1625.81712762", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0604326877991"}, "Prolog": {"deviation": "32.019084927", "rating": "1371.00293878", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0691532620579"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.06"}, "Fortran": {"deviation": "33.0866001011", "rating": "1509.30887483", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0685100875829"}, "Assembler": {"deviation": "32.9878304627", "rating": "1526.85484768", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0602049587929"}, "Python": {"deviation": "38.4678756854", "rating": "1530.75944678", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0875913938907"}, "Pascal": {"deviation": "36.2344167735", "rating": "1285.34767781", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0602714241981"}, "Haskell": {"deviation": "37.5768130548", "rating": "1533.5901549", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0609014742959"}, "Cobol": {"deviation": "36.2099663317", "rating": "1250.15437377", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0600213550529"}, "APL": {"deviation": "31.060631295", "rating": "1342.94024396", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0617573413648"}, "ActionScript": {"deviation": "136.105509243", "rating": "1349.36603264", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0600122506131"}, "Go": {"deviation": "39.2917759226", "rating": "1904.74603173", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0601986769747"}, "Visual Basic": {"deviation": "37.1124765173", "rating": "1367.68879057", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0601967070084"}, "PHP": {"deviation": "38.03727", "rating": "1360.8870825", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0593990664824"}, "Mozart-Oz": {"deviation": "36.8779184043", "rating": "1720.81210585", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0602561030849"}, "Smalltalk": {"deviation": "32.5986149642", "rating": "1492.23571936", "ratingsMin": "1113.3012755", "ratingsMax": "2311.07074344", "volatility": "0.0672514257883"}}, "This language has a good library distribution mechanism.": {"Coq": {"deviation": "49.7182196282", "rating": "1310.07318324", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0603948557374"}, "Eiffel": {"deviation": "37.9176682342", "rating": "1456.25759133", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0611211074418"}, "Java": {"deviation": "41.3946431852", "rating": "1579.00401869", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0606235935543"}, "Scala": {"deviation": "40.0611869197", "rating": "1618.40946324", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0608043296552"}, "Delphi": {"deviation": "39.199665855", "rating": "1479.47114322", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0631425725557"}, "Ada": {"deviation": "34.6178617981", "rating": "1428.4194067", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0609932834814"}, "Perl": {"deviation": "44.2833203169", "rating": "1909.92882956", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0602062139587"}, "Lua": {"deviation": "39.8405141778", "rating": "1502.3067088", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0642092823007"}, "Shell": {"deviation": "40.9919996389", "rating": "1234.34379553", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0599043327875"}, "Matlab": {"deviation": "39.5950914697", "rating": "1278.3403267", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0617431439658"}, "Factor": {"deviation": "43.1483969067", "rating": "1445.0428078", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0621527698464"}, "Haxe": {"deviation": "45.1699451392", "rating": "1649.16324082", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600455933326"}, "Erlang": {"deviation": "37.8346793659", "rating": "1453.90474223", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.063901546302"}, "Forth": {"deviation": "37.5738440488", "rating": "1267.61733203", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.060091705729"}, "Scheme": {"deviation": "39.3287772002", "rating": "1427.81906381", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0638690806582"}, "Objective C": {"deviation": "39.9104186377", "rating": "1465.73683868", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.062141775375"}, "C#": {"deviation": "41.8118530438", "rating": "1662.17369407", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0647196243171"}, "Javascript": {"deviation": "45.1634019371", "rating": "1515.18440294", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0840588331931"}, "Common Lisp": {"deviation": "40.338419018", "rating": "1487.25411393", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0687308202317"}, "TCL": {"deviation": "37.3829042374", "rating": "1438.75076689", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0613789994248"}, "F#": {"deviation": "39.1836417406", "rating": "1564.54023088", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0612159307589"}, "AWK": {"deviation": "39.5415258716", "rating": "1239.47432574", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600464456669"}, "Ruby": {"deviation": "45.7393986594", "rating": "1923.31528241", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0599158543065"}, "Agda": {"deviation": "60.5838663115", "rating": "1415.24127795", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0601061806917"}, "Groovy": {"deviation": "38.1324555032", "rating": "1586.57499337", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600687129251"}, "C": {"deviation": "45.775773083", "rating": "1475.06043284", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0764146943931"}, "Mathematica": {"deviation": "38.1313606508", "rating": "1400.25741806", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0605203496232"}, "D": {"deviation": "37.9603416477", "rating": "1351.27747233", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.060422567049"}, "O'Caml": {"deviation": "37.4331922445", "rating": "1464.378634", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0640869366839"}, "Io": {"deviation": "39.8546925932", "rating": "1295.46011172", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0601286020344"}, "J": {"deviation": "61.5972140503", "rating": "1395.1371674", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600600126041"}, "ELisp": {"deviation": "35.0849783455", "rating": "1464.34661374", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0619740987586"}, "C++": {"deviation": "44.5340280138", "rating": "1404.74686025", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.075828861257"}, "Standard ML": {"deviation": "40.3338957671", "rating": "1211.58813501", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0599681650904"}, "R": {"deviation": "37.8169197653", "rating": "1701.43841354", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0605225472762"}, "Clojure": {"deviation": "36.914327617", "rating": "1624.36715996", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0599475197338"}, "Prolog": {"deviation": "34.6117670194", "rating": "1348.1237273", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0606533235797"}, "REBOL": {"deviation": "81.1908735595", "rating": "1384.56227449", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0601684472998"}, "Fortran": {"deviation": "37.2605836266", "rating": "1375.27792312", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0604642138683"}, "Assembler": {"deviation": "49.0982833648", "rating": "1001.16606644", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0599394957936"}, "Python": {"deviation": "46.6604710072", "rating": "1850.90872087", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0596172885494"}, "Pascal": {"deviation": "38.5810638756", "rating": "1312.22658283", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.060326285993"}, "Haskell": {"deviation": "41.3097858676", "rating": "1659.45760911", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0603610807208"}, "Cobol": {"deviation": "40.6787127142", "rating": "1191.18733595", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0602758317149"}, "APL": {"deviation": "47.6461662621", "rating": "1144.09972281", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600144062544"}, "ActionScript": {"deviation": "111.865418769", "rating": "1279.05253713", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600098799801"}, "Go": {"deviation": "37.4752222927", "rating": "1538.36887097", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0619998890647"}, "Visual Basic": {"deviation": "40.6675486873", "rating": "1391.9481735", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0603592795086"}, "PHP": {"deviation": "43.3664439736", "rating": "1498.69735073", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0735250950198"}, "Mozart-Oz": {"deviation": "78.9042802616", "rating": "1616.82233203", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0600981850348"}, "Smalltalk": {"deviation": "36.233254376", "rating": "1613.27499818", "ratingsMin": "1001.16606644", "ratingsMax": "1923.31528241", "volatility": "0.0622399691923"}}, "I would use this language for writing server programs": {"Coq": {"deviation": "39.1576123805", "rating": "1279.79994241", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0620149950363"}, "Eiffel": {"deviation": "35.5543027633", "rating": "1454.18458949", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0614660658522"}, "Java": {"deviation": "45.2418591638", "rating": "1717.08452677", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0635980826344"}, "Scala": {"deviation": "41.7380880123", "rating": "1817.57432581", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0598560367477"}, "Delphi": {"deviation": "39.3003615515", "rating": "1270.23719844", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0608411178571"}, "Ada": {"deviation": "35.9494336475", "rating": "1498.65640024", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0649622750302"}, "Perl": {"deviation": "49.8190970901", "rating": "1572.71591869", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0998499576113"}, "Lua": {"deviation": "38.8752037665", "rating": "1342.06165239", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0625511112659"}, "Shell": {"deviation": "41.0141572376", "rating": "1256.02015601", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0605551631502"}, "Matlab": {"deviation": "41.3907869267", "rating": "1151.03017955", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0603263663149"}, "Factor": {"deviation": "37.7003745994", "rating": "1409.55526802", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0601819780731"}, "Haxe": {"deviation": "41.8402888111", "rating": "1512.96720279", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0608896518084"}, "Erlang": {"deviation": "43.2252793051", "rating": "1883.91441145", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0600338543813"}, "Forth": {"deviation": "34.8191309049", "rating": "1312.65610508", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0604351932708"}, "Scheme": {"deviation": "43.1423952266", "rating": "1376.2145271", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0739137433802"}, "Objective C": {"deviation": "39.1213767326", "rating": "1334.70059195", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0627186744462"}, "C#": {"deviation": "42.8268342625", "rating": "1681.09833722", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0633543131824"}, "Javascript": {"deviation": "43.4367134659", "rating": "1349.37339187", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0715382976459"}, "Common Lisp": {"deviation": "42.7370830668", "rating": "1512.1597664", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0710763227135"}, "TCL": {"deviation": "36.8699840916", "rating": "1335.28292894", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0607271599243"}, "F#": {"deviation": "39.4164116189", "rating": "1717.88988456", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0609445912135"}, "AWK": {"deviation": "38.3655902738", "rating": "1296.43503774", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0600872217013"}, "Ruby": {"deviation": "44.9341916223", "rating": "1570.78206065", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0778004093651"}, "Agda": {"deviation": "77.2138185237", "rating": "1132.71514906", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0602112513763"}, "Groovy": {"deviation": "39.0773050402", "rating": "1484.64583806", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0660744271776"}, "C": {"deviation": "127.268589314", "rating": "1416.75218567", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "1.04547851536"}, "Mathematica": {"deviation": "47.8525861139", "rating": "1130.69066039", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0603164666628"}, "D": {"deviation": "36.2780877837", "rating": "1525.39264512", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0619330404264"}, "O'Caml": {"deviation": "38.1302628398", "rating": "1437.77650189", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0714378283316"}, "Io": {"deviation": "37.6505864763", "rating": "1287.55754178", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0605133937435"}, "J": {"deviation": "38.0440144958", "rating": "1262.29431134", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0603184516725"}, "ELisp": {"deviation": "38.5602744954", "rating": "1146.18531773", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0603550089719"}, "C++": {"deviation": "64.5155898892", "rating": "1551.0116466", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.156135171526"}, "Standard ML": {"deviation": "35.0023327253", "rating": "1429.72203376", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.062158829311"}, "R": {"deviation": "38.4640751672", "rating": "1227.05808587", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0600897293366"}, "Clojure": {"deviation": "41.1587045933", "rating": "1684.34434227", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0607007597938"}, "Prolog": {"deviation": "35.8900666741", "rating": "1332.48489962", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0598143154139"}, "REBOL": {"deviation": "127.474257267", "rating": "1458.07317207", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0600040279098"}, "Fortran": {"deviation": "40.849428937", "rating": "1173.88554677", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0598851395101"}, "Assembler": {"deviation": "42.5538598909", "rating": "1176.49151934", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.060258262343"}, "Python": {"deviation": "42.8635361732", "rating": "1659.19253098", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0653816204814"}, "Pascal": {"deviation": "40.1430869881", "rating": "1241.66887595", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0599775690011"}, "Haskell": {"deviation": "44.5567402241", "rating": "1563.91986498", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0760255501109"}, "Cobol": {"deviation": "39.2158254272", "rating": "1251.61433575", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0602076000104"}, "APL": {"deviation": "38.8524701399", "rating": "1143.26231178", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0599990297216"}, "ActionScript": {"deviation": "132.361942628", "rating": "1231.59617971", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0600750172505"}, "Go": {"deviation": "37.1307206858", "rating": "1559.04747078", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0613694664766"}, "Visual Basic": {"deviation": "42.349745213", "rating": "1220.21701847", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0597867382538"}, "PHP": {"deviation": "52.9680147732", "rating": "1427.96463338", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.099879849858"}, "Mozart-Oz": {"deviation": "34.6591917835", "rating": "1507.5480244", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0616299015567"}, "Smalltalk": {"deviation": "36.8498008348", "rating": "1370.3428876", "ratingsMin": "1130.69066039", "ratingsMax": "1883.91441145", "volatility": "0.0671811224061"}}, "This language is best for very small projects": {"Coq": {"deviation": "36.2076496673", "rating": "1420.53499709", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0628722593097"}, "Eiffel": {"deviation": "36.2691539191", "rating": "1287.88014929", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0601030694238"}, "Java": {"deviation": "43.5638676543", "rating": "1341.18119745", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0689155523156"}, "Scala": {"deviation": "42.9316656596", "rating": "1488.74524447", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0758363116628"}, "Delphi": {"deviation": "37.3384114418", "rating": "1401.32233588", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.061893457982"}, "Ada": {"deviation": "35.9220821129", "rating": "1341.38027387", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0602879668543"}, "Perl": {"deviation": "39.9349263559", "rating": "1689.4258249", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0601481023046"}, "Lua": {"deviation": "40.5077314175", "rating": "1617.46290732", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0645171285498"}, "Shell": {"deviation": "39.1383439776", "rating": "1683.56370599", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0603844886441"}, "Matlab": {"deviation": "37.9829562936", "rating": "1542.24694862", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0613481914059"}, "Factor": {"deviation": "36.801346171", "rating": "1683.87773715", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0625869223061"}, "Haxe": {"deviation": "37.4397803954", "rating": "1571.92541616", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0603685472871"}, "Erlang": {"deviation": "37.0665488154", "rating": "1357.13916769", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0610187788153"}, "Forth": {"deviation": "34.3479858777", "rating": "1639.23631925", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0634536898788"}, "Scheme": {"deviation": "38.0256941218", "rating": "1706.48941873", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0662353482416"}, "Objective C": {"deviation": "41.1055253185", "rating": "1327.89885668", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0632614291015"}, "C#": {"deviation": "45.5902073133", "rating": "1417.71337896", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0778919163868"}, "Javascript": {"deviation": "46.0930266288", "rating": "1507.75649714", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.081001419602"}, "Common Lisp": {"deviation": "40.9350865389", "rating": "1554.3608431", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0751564833998"}, "TCL": {"deviation": "36.5939935936", "rating": "1684.26716756", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0625630232437"}, "F#": {"deviation": "38.5547649358", "rating": "1512.80068473", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0668810677902"}, "AWK": {"deviation": "38.8767260378", "rating": "1873.0062935", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0608567893831"}, "Ruby": {"deviation": "40.7889923998", "rating": "1779.10517608", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.060051594074"}, "Agda": {"deviation": "69.8169583234", "rating": "1578.26307522", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0600212683967"}, "Groovy": {"deviation": "39.3699711144", "rating": "1548.42903555", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0613301049601"}, "C": {"deviation": "97.6012800351", "rating": "1655.11192571", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.409784952268"}, "Mathematica": {"deviation": "40.2988524069", "rating": "1607.02907451", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0604263968434"}, "D": {"deviation": "33.543982314", "rating": "1475.21919924", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0635963162061"}, "O'Caml": {"deviation": "37.8924002286", "rating": "1487.64403928", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0665519051398"}, "Io": {"deviation": "41.8214840791", "rating": "1696.69160662", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0600736969803"}, "J": {"deviation": "38.0291806567", "rating": "1515.054812", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0609866703466"}, "ELisp": {"deviation": "35.0714018008", "rating": "1688.07761365", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0617448535191"}, "C++": {"deviation": "42.1122360708", "rating": "1267.39424593", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0633410717806"}, "Standard ML": {"deviation": "34.6123997516", "rating": "1411.62723427", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0623040788815"}, "R": {"deviation": "39.5747219339", "rating": "1515.41463685", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0648551030508"}, "Clojure": {"deviation": "37.8100803431", "rating": "1605.37284515", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0663274817726"}, "Prolog": {"deviation": "38.7297536048", "rating": "1518.66406223", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0750547681817"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.06"}, "Fortran": {"deviation": "38.5533257108", "rating": "1366.32946874", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0619436351887"}, "Assembler": {"deviation": "63.8470514822", "rating": "1449.53270352", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.141481458968"}, "Python": {"deviation": "44.2343587774", "rating": "1771.151825", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0622159030761"}, "Pascal": {"deviation": "37.616969602", "rating": "1360.41355552", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0611868108441"}, "Haskell": {"deviation": "43.1611904443", "rating": "1607.98159774", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0794517806146"}, "Cobol": {"deviation": "40.7678971825", "rating": "1268.28533707", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0601071628956"}, "APL": {"deviation": "37.2276443172", "rating": "1465.13391904", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0611181656209"}, "ActionScript": {"deviation": "92.9088421344", "rating": "1538.65528975", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.060027946512"}, "Go": {"deviation": "33.856510631", "rating": "1501.24106073", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0610278607996"}, "Visual Basic": {"deviation": "42.8632390265", "rating": "1455.82474753", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0715928478947"}, "PHP": {"deviation": "48.2373482474", "rating": "1539.96165524", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0846464680082"}, "Mozart-Oz": {"deviation": "38.0114885164", "rating": "1378.02298239", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0603870753028"}, "Smalltalk": {"deviation": "37.6933927767", "rating": "1472.49237557", "ratingsMin": "1267.39424593", "ratingsMax": "1873.0062935", "volatility": "0.0669372858534"}}, "This language is likely to be a passing fad": {"Coq": {"deviation": "34.9442556453", "rating": "1572.06651089", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.063308370722"}, "Eiffel": {"deviation": "34.4236690781", "rating": "1536.42980927", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0619551804268"}, "Java": {"deviation": "48.8072540733", "rating": "1376.17011775", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0898865275132"}, "Scala": {"deviation": "42.7866112386", "rating": "1702.8374248", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0670034969549"}, "Delphi": {"deviation": "36.9844412563", "rating": "1682.24897705", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0613850707945"}, "Ada": {"deviation": "34.6651476856", "rating": "1330.6858733", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0663448296121"}, "Perl": {"deviation": "40.9784338077", "rating": "1450.03852982", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.073210927429"}, "Lua": {"deviation": "41.8077480825", "rating": "1501.04781673", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0779606211999"}, "Shell": {"deviation": "37.0898836442", "rating": "1295.19374951", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0600092413721"}, "Matlab": {"deviation": "37.4528653762", "rating": "1529.496244", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0630215250458"}, "Factor": {"deviation": "35.6608438267", "rating": "1628.79759051", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0669736757744"}, "Haxe": {"deviation": "41.9912014257", "rating": "1587.10075432", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0605856269797"}, "Erlang": {"deviation": "36.1130158329", "rating": "1435.4508036", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0696580325737"}, "Forth": {"deviation": "33.5095388011", "rating": "1565.98657048", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0671093767825"}, "Scheme": {"deviation": "34.94910647", "rating": "1347.05317751", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0622322716858"}, "Objective C": {"deviation": "39.1530813896", "rating": "1589.20703289", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0677251517258"}, "C#": {"deviation": "40.6988877583", "rating": "1445.34340647", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0775966616908"}, "Javascript": {"deviation": "46.2600290035", "rating": "1439.34203657", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0864182188808"}, "Common Lisp": {"deviation": "34.4715776369", "rating": "1308.3652228", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0614175144349"}, "TCL": {"deviation": "36.3292476893", "rating": "1542.42757632", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0618167731192"}, "F#": {"deviation": "35.5683108608", "rating": "1576.24593161", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.06394513954"}, "AWK": {"deviation": "36.0652504097", "rating": "1460.74040036", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0636778485786"}, "Ruby": {"deviation": "39.9962853948", "rating": "1625.11515279", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0678030534809"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.06"}, "Groovy": {"deviation": "43.5350032025", "rating": "1800.46757151", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0600057205616"}, "C": {"deviation": "43.0083305325", "rating": "1149.11348207", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0593633776475"}, "Mathematica": {"deviation": "35.6645310581", "rating": "1399.22433812", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0612337047255"}, "D": {"deviation": "41.4324367364", "rating": "1634.58178779", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0656565177357"}, "O'Caml": {"deviation": "34.4212250938", "rating": "1432.51958978", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0678759075351"}, "Io": {"deviation": "35.726454863", "rating": "1693.94243064", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0648960073443"}, "J": {"deviation": "33.3275721933", "rating": "1443.44869591", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0628135435059"}, "ELisp": {"deviation": "34.1048312452", "rating": "1319.93798027", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0649725143999"}, "C++": {"deviation": "39.4744874045", "rating": "1368.57656655", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0641532046246"}, "Standard ML": {"deviation": "35.3169586609", "rating": "1525.97949696", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0655016494389"}, "R": {"deviation": "34.417703382", "rating": "1487.83338846", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0624971573016"}, "Clojure": {"deviation": "40.1941534091", "rating": "1598.55208106", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0635075772818"}, "Prolog": {"deviation": "34.1356017782", "rating": "1379.31040824", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0676597728232"}, "REBOL": {"deviation": "65.1417523714", "rating": "1777.56661872", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0603050641844"}, "Fortran": {"deviation": "35.4867803698", "rating": "1233.46344519", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.060737418392"}, "Assembler": {"deviation": "39.1259155895", "rating": "1205.55488349", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0601788809339"}, "Python": {"deviation": "45.7516178616", "rating": "1384.07325067", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0776040050558"}, "Pascal": {"deviation": "36.1401922048", "rating": "1473.06495801", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0721883239117"}, "Haskell": {"deviation": "42.5186924259", "rating": "1405.80862651", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0784520748231"}, "Cobol": {"deviation": "34.2517717541", "rating": "1318.61345801", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0638310237851"}, "APL": {"deviation": "30.5186671605", "rating": "1334.97495864", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0618990510988"}, "ActionScript": {"deviation": "146.596140211", "rating": "1806.93300406", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0600670306947"}, "Go": {"deviation": "37.5876740702", "rating": "1683.05772312", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0620508868579"}, "Visual Basic": {"deviation": "40.7750888028", "rating": "1600.74337125", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0646225168876"}, "PHP": {"deviation": "41.4222395098", "rating": "1523.93161061", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.069512842927"}, "Mozart-Oz": {"deviation": "30.5653957403", "rating": "1522.50410406", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0620202260491"}, "Smalltalk": {"deviation": "33.9856197561", "rating": "1385.91778137", "ratingsMin": "1149.11348207", "ratingsMax": "1806.93300406", "volatility": "0.0662106390885"}}, "There is a lot of accidental complexity when writing code in this language": {"Coq": {"deviation": "33.6612626891", "rating": "1573.6773869", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0634812729575"}, "Eiffel": {"deviation": "31.9697535609", "rating": "1347.24163127", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.060963300482"}, "Java": {"deviation": "44.9019480193", "rating": "1556.38925173", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0789943498121"}, "Scala": {"deviation": "40.5519253145", "rating": "1355.23770944", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.065728725432"}, "Delphi": {"deviation": "36.0739423803", "rating": "1577.64984842", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0640469794704"}, "Ada": {"deviation": "33.544633868", "rating": "1597.3642218", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0699662199504"}, "Perl": {"deviation": "37.2935367144", "rating": "1609.65822611", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0671098402586"}, "Lua": {"deviation": "35.2270510767", "rating": "1353.77152302", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0609394647438"}, "Shell": {"deviation": "34.8957004139", "rating": "1519.99687841", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0657326812733"}, "Matlab": {"deviation": "38.7596171911", "rating": "1450.22158788", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.062569694942"}, "Factor": {"deviation": "30.3282137656", "rating": "1344.55261911", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0629896004595"}, "Haxe": {"deviation": "42.9350185034", "rating": "1241.07026722", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0600384957251"}, "Erlang": {"deviation": "34.2758247569", "rating": "1334.30610493", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0622898829832"}, "Forth": {"deviation": "34.3620798666", "rating": "1521.94148263", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0668780014841"}, "Scheme": {"deviation": "35.0312376897", "rating": "1264.79437901", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0599571348461"}, "Objective C": {"deviation": "35.6378649289", "rating": "1561.87173353", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0635959180525"}, "C#": {"deviation": "42.2480932086", "rating": "1551.17969164", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0705451488003"}, "Javascript": {"deviation": "47.2564380069", "rating": "1503.11895256", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0925584641272"}, "Common Lisp": {"deviation": "37.3130034035", "rating": "1353.19362573", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0699284954694"}, "TCL": {"deviation": "34.8774071057", "rating": "1578.66219138", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0662802585594"}, "F#": {"deviation": "35.3654590236", "rating": "1318.71493942", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0604512148747"}, "AWK": {"deviation": "38.2445293839", "rating": "1402.96927458", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.066592081036"}, "Ruby": {"deviation": "39.1313766532", "rating": "1405.86461227", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0660077540535"}, "Agda": {"deviation": "73.5745857831", "rating": "1507.39958494", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0600115969282"}, "Groovy": {"deviation": "37.3811814539", "rating": "1400.17194403", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0631857904319"}, "C": {"deviation": "46.2677442211", "rating": "1618.09366522", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0821667745049"}, "Mathematica": {"deviation": "36.8404514714", "rating": "1450.71576317", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.060939340019"}, "D": {"deviation": "33.9838118223", "rating": "1593.93999469", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0636450504724"}, "O'Caml": {"deviation": "33.9853966306", "rating": "1390.39353397", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0623317571712"}, "Io": {"deviation": "34.9086388855", "rating": "1474.7247501", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.060232272602"}, "J": {"deviation": "35.0376592509", "rating": "1248.22775088", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0604465793861"}, "ELisp": {"deviation": "31.2021275161", "rating": "1447.22050963", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0641614316723"}, "C++": {"deviation": "40.0938595082", "rating": "1755.2294931", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0593766385763"}, "Standard ML": {"deviation": "32.2516732356", "rating": "1386.31899101", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0601785144626"}, "R": {"deviation": "35.6704543511", "rating": "1451.78592467", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0610228886197"}, "Clojure": {"deviation": "37.2381137945", "rating": "1306.28095981", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0599002792031"}, "Prolog": {"deviation": "36.325964317", "rating": "1560.56878716", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0724048031537"}, "REBOL": {"deviation": "125.394469649", "rating": "1319.83428553", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0600512992389"}, "Fortran": {"deviation": "34.2580862616", "rating": "1470.79271742", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0691431751086"}, "Assembler": {"deviation": "39.0285198966", "rating": "1691.22835281", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0698241658665"}, "Python": {"deviation": "40.0609547334", "rating": "1328.26331335", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0645227722787"}, "Pascal": {"deviation": "35.8342626395", "rating": "1441.99862529", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0644072603864"}, "Haskell": {"deviation": "39.0852217086", "rating": "1307.87637859", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0651450858702"}, "Cobol": {"deviation": "32.7712031779", "rating": "1545.03888602", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0670180119317"}, "APL": {"deviation": "30.645227021", "rating": "1482.29460745", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0647412030366"}, "ActionScript": {"deviation": "83.6818194203", "rating": "1480.51909965", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0600401095061"}, "Go": {"deviation": "37.3469479188", "rating": "1331.07594697", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0602673974823"}, "Visual Basic": {"deviation": "38.5301072788", "rating": "1556.52687664", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0736066031765"}, "PHP": {"deviation": "39.7923482253", "rating": "1592.49020264", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0693817417587"}, "Mozart-Oz": {"deviation": "33.5177784354", "rating": "1338.59082222", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.0607028011914"}, "Smalltalk": {"deviation": "34.3287368636", "rating": "1403.51979222", "ratingsMin": "1241.07026722", "ratingsMax": "1755.2294931", "volatility": "0.060824710709"}}, "The semantics of this language are much different than other languages I know.": {"Coq": {"deviation": "42.4151629026", "rating": "1787.15648038", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0604757301634"}, "Eiffel": {"deviation": "38.1592113399", "rating": "1447.61964319", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0604387997618"}, "Java": {"deviation": "41.6317697941", "rating": "1190.53319403", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0593927077462"}, "Scala": {"deviation": "40.0106217215", "rating": "1577.91051358", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0605030418371"}, "Delphi": {"deviation": "35.9885286729", "rating": "1370.12367773", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0606064296432"}, "Ada": {"deviation": "36.3312601032", "rating": "1453.68344052", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0613922438448"}, "Perl": {"deviation": "39.3482484825", "rating": "1504.21008625", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0688538244947"}, "Lua": {"deviation": "37.2603966273", "rating": "1442.61932134", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0627189150094"}, "Shell": {"deviation": "43.4197883538", "rating": "1468.83469727", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0716532668359"}, "Matlab": {"deviation": "38.4588149181", "rating": "1652.73672271", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0617902766005"}, "Factor": {"deviation": "49.1041748061", "rating": "2009.26376357", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0604040700111"}, "Haxe": {"deviation": "41.4273183815", "rating": "1289.75028394", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602611294152"}, "Erlang": {"deviation": "40.746592228", "rating": "1851.00939475", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0599856323363"}, "Forth": {"deviation": "39.8032949848", "rating": "1809.02160052", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0603364170934"}, "Scheme": {"deviation": "39.4720539246", "rating": "1632.97548667", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0618374117544"}, "Objective C": {"deviation": "37.634002288", "rating": "1477.64595217", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0655425465317"}, "C#": {"deviation": "38.1966922035", "rating": "1277.16787263", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0596990943737"}, "Javascript": {"deviation": "41.53857605", "rating": "1470.67384624", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0720773704371"}, "Common Lisp": {"deviation": "40.0692319725", "rating": "1670.79004318", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0614497388575"}, "TCL": {"deviation": "36.02259789", "rating": "1523.75932032", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0610180940691"}, "F#": {"deviation": "42.2715568128", "rating": "1749.75549961", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0611649078097"}, "AWK": {"deviation": "39.0801338862", "rating": "1674.05594193", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.060090234746"}, "Ruby": {"deviation": "37.8285666181", "rating": "1449.07454445", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0668319538192"}, "Agda": {"deviation": "60.5794486815", "rating": "1778.733309", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0600607301541"}, "Groovy": {"deviation": "36.8915675571", "rating": "1456.5335585", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602851686328"}, "C": {"deviation": "40.4570273494", "rating": "1218.68509725", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602262745134"}, "Mathematica": {"deviation": "39.8475535832", "rating": "1641.45658768", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602926706845"}, "D": {"deviation": "37.4597514906", "rating": "1369.92578647", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0605367243246"}, "O'Caml": {"deviation": "37.0865273444", "rating": "1637.64022652", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0613262724927"}, "Io": {"deviation": "40.0372101413", "rating": "1699.9173088", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602168436844"}, "J": {"deviation": "60.641738429", "rating": "2047.11917442", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0609617122255"}, "ELisp": {"deviation": "35.5645667791", "rating": "1609.49768915", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0623830163519"}, "C++": {"deviation": "39.3803589206", "rating": "1243.77185016", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0611307987876"}, "Standard ML": {"deviation": "36.130092858", "rating": "1628.09288371", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0618064938708"}, "R": {"deviation": "37.9229932436", "rating": "1576.60751025", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0615387093938"}, "Clojure": {"deviation": "38.1908109376", "rating": "1661.72762566", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602795729925"}, "Prolog": {"deviation": "54.0709094134", "rating": "2038.59977295", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0601826428225"}, "REBOL": {"deviation": "93.6742785284", "rating": "1780.47726394", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.06030221805"}, "Fortran": {"deviation": "37.7113810951", "rating": "1456.45825416", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0615118003883"}, "Assembler": {"deviation": "40.0198338437", "rating": "1626.76484168", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0688881561924"}, "Python": {"deviation": "44.8566882498", "rating": "1440.17429649", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0696198777609"}, "Pascal": {"deviation": "37.2400901772", "rating": "1329.91584004", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0620074471027"}, "Haskell": {"deviation": "46.1049968851", "rating": "1846.53095614", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0602346233674"}, "Cobol": {"deviation": "36.4511049953", "rating": "1562.82140015", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0615537035665"}, "APL": {"deviation": "50.4644541091", "rating": "1840.77204187", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.060264933675"}, "ActionScript": {"deviation": "90.5802929575", "rating": "1586.7799081", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0600823843378"}, "Go": {"deviation": "36.5018430005", "rating": "1465.34103605", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0623477126282"}, "Visual Basic": {"deviation": "38.2382610157", "rating": "1350.51915063", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0661484052333"}, "PHP": {"deviation": "41.6341088643", "rating": "1252.79302046", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0635224338687"}, "Mozart-Oz": {"deviation": "47.5463887346", "rating": "1777.12938841", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0601113316471"}, "Smalltalk": {"deviation": "37.2941942197", "rating": "1702.41209605", "ratingsMin": "1190.53319403", "ratingsMax": "2047.11917442", "volatility": "0.0604503237773"}}, "This language has a high quality implementation": {"Coq": {"deviation": "34.5196561446", "rating": "1508.24778304", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0603989851622"}, "Eiffel": {"deviation": "38.2054054992", "rating": "1538.09541117", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0606837346757"}, "Java": {"deviation": "42.1600179258", "rating": "1661.43681094", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0658295579392"}, "Scala": {"deviation": "40.9913598319", "rating": "1500.1799124", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.068312794197"}, "Delphi": {"deviation": "35.1558808939", "rating": "1316.90124073", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0626293129867"}, "Ada": {"deviation": "33.8018840891", "rating": "1652.78145707", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0608762596515"}, "Perl": {"deviation": "40.6751256951", "rating": "1417.4656363", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0698323140523"}, "Lua": {"deviation": "39.434211947", "rating": "1478.82974116", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0657984765603"}, "Shell": {"deviation": "39.5513468795", "rating": "1370.79082179", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0681555739575"}, "Matlab": {"deviation": "36.8061849599", "rating": "1474.46510968", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0617515245361"}, "Factor": {"deviation": "35.5927887469", "rating": "1529.62675766", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0610733818741"}, "Haxe": {"deviation": "45.6772218595", "rating": "1631.59106798", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0604124367856"}, "Erlang": {"deviation": "36.6723723791", "rating": "1519.87792111", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0628220904625"}, "Forth": {"deviation": "33.1677462553", "rating": "1418.80885132", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0608017769596"}, "Scheme": {"deviation": "39.2059650126", "rating": "1461.07275129", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0689503816434"}, "Objective C": {"deviation": "35.1802924323", "rating": "1568.80191091", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0637592952635"}, "C#": {"deviation": "42.1663555969", "rating": "1729.14286433", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0618931607452"}, "Javascript": {"deviation": "43.7227049993", "rating": "1405.97882641", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0781991228607"}, "Common Lisp": {"deviation": "35.6526932392", "rating": "1497.55975879", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0653673013187"}, "TCL": {"deviation": "34.9841477206", "rating": "1381.57673531", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0611175763964"}, "F#": {"deviation": "33.3230360623", "rating": "1533.44545036", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0614704329314"}, "AWK": {"deviation": "38.0888318559", "rating": "1329.20945739", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0633628247296"}, "Ruby": {"deviation": "42.6246286106", "rating": "1397.2769861", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0723101773144"}, "Agda": {"deviation": "91.2660652357", "rating": "1173.65356961", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0599989061672"}, "Groovy": {"deviation": "35.8402938972", "rating": "1426.87729554", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0616392657976"}, "C": {"deviation": "40.7879791903", "rating": "1703.85600601", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0620590854604"}, "Mathematica": {"deviation": "36.4561793098", "rating": "1511.10068316", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0610498317213"}, "D": {"deviation": "36.7327483047", "rating": "1340.13913438", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0606879394994"}, "O'Caml": {"deviation": "33.2757201628", "rating": "1545.56572877", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0657760465872"}, "Io": {"deviation": "37.2695360056", "rating": "1313.99385342", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0602862066924"}, "J": {"deviation": "38.9575342512", "rating": "1631.62497465", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0605475734185"}, "ELisp": {"deviation": "35.8195921953", "rating": "1419.70383053", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0607207175147"}, "C++": {"deviation": "43.8492678292", "rating": "1668.47136282", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0818487285389"}, "Standard ML": {"deviation": "32.2199313668", "rating": "1440.98099843", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0619074132265"}, "R": {"deviation": "33.4162033229", "rating": "1387.12661126", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0603099422296"}, "Clojure": {"deviation": "34.8457753633", "rating": "1562.6875238", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.061621475062"}, "Prolog": {"deviation": "32.5073549465", "rating": "1482.4138606", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0621073361901"}, "REBOL": {"deviation": "97.8032756854", "rating": "1024.65773952", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0604226917258"}, "Fortran": {"deviation": "36.4611022871", "rating": "1453.29762436", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0652535613512"}, "Assembler": {"deviation": "42.8479339262", "rating": "1484.33848128", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0973756615521"}, "Python": {"deviation": "42.0163950734", "rating": "1638.81377424", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0697104943877"}, "Pascal": {"deviation": "36.3292713522", "rating": "1335.84858957", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0612460363163"}, "Haskell": {"deviation": "36.4414968282", "rating": "1650.15552927", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0609726976534"}, "Cobol": {"deviation": "37.5996032638", "rating": "1356.72498045", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0608351271951"}, "APL": {"deviation": "40.1338182683", "rating": "1297.52516574", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0600375953445"}, "ActionScript": {"deviation": "111.993748176", "rating": "1137.71899925", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0600567572422"}, "Go": {"deviation": "38.6877329709", "rating": "1479.82223497", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0605031705633"}, "Visual Basic": {"deviation": "39.1096531422", "rating": "1292.13660916", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0612962437668"}, "PHP": {"deviation": "40.0363625859", "rating": "1234.19068082", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0600526171165"}, "Mozart-Oz": {"deviation": "37.4841406721", "rating": "1572.69383206", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.0608085058245"}, "Smalltalk": {"deviation": "35.0400503088", "rating": "1552.95748122", "ratingsMin": "1024.65773952", "ratingsMax": "1729.14286433", "volatility": "0.06403188458"}}, "Writing code in this language is a lot of work": {"Coq": {"deviation": "35.948575719", "rating": "1618.28901356", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0613454572305"}, "Eiffel": {"deviation": "32.7075552261", "rating": "1506.10062866", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.062076610682"}, "Java": {"deviation": "49.3046422979", "rating": "1561.45877071", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0831677664896"}, "Scala": {"deviation": "38.933932155", "rating": "1329.92661214", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0626603313206"}, "Delphi": {"deviation": "40.0119236173", "rating": "1476.14386393", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.076555891809"}, "Ada": {"deviation": "37.4844435749", "rating": "1663.09679877", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0621766839691"}, "Perl": {"deviation": "47.2055033739", "rating": "1377.2448053", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0915916060877"}, "Lua": {"deviation": "36.3238894736", "rating": "1425.40019004", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0609630714606"}, "Shell": {"deviation": "41.4971659152", "rating": "1500.90395871", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0830318463205"}, "Matlab": {"deviation": "38.5396270849", "rating": "1399.05272417", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.062214619656"}, "Factor": {"deviation": "35.9794333784", "rating": "1485.41942531", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0615270710799"}, "Haxe": {"deviation": "40.5796735543", "rating": "1315.96639187", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0600971186851"}, "Erlang": {"deviation": "37.6781188179", "rating": "1447.35366954", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0731716433455"}, "Forth": {"deviation": "34.6894850585", "rating": "1503.09492218", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0658118881076"}, "Scheme": {"deviation": "38.1533120958", "rating": "1307.57769665", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0617420641557"}, "Objective C": {"deviation": "36.3780207948", "rating": "1609.86710681", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0624558244672"}, "C#": {"deviation": "43.8771363308", "rating": "1441.580754", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0752332308077"}, "Javascript": {"deviation": "48.5932088129", "rating": "1594.50758438", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0974041111522"}, "Common Lisp": {"deviation": "38.0285021065", "rating": "1388.85586468", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0642069355721"}, "TCL": {"deviation": "37.7476176292", "rating": "1439.53026717", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0722819215038"}, "F#": {"deviation": "37.2840965432", "rating": "1390.21556614", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0603697064066"}, "AWK": {"deviation": "38.4445057195", "rating": "1365.30608164", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0692470058239"}, "Ruby": {"deviation": "41.6590035879", "rating": "1169.45959793", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0598509207526"}, "Agda": {"deviation": "91.1575972639", "rating": "1670.73157871", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0600886911029"}, "Groovy": {"deviation": "39.1172506824", "rating": "1386.35559168", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0602843055945"}, "C": {"deviation": "41.7547191269", "rating": "1679.81401895", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0603489493504"}, "Mathematica": {"deviation": "40.1660873127", "rating": "1418.88895664", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0604079974773"}, "D": {"deviation": "36.1922727175", "rating": "1436.60549298", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.061912468556"}, "O'Caml": {"deviation": "33.968162392", "rating": "1425.36254998", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0628424969526"}, "Io": {"deviation": "34.9929897956", "rating": "1368.78897279", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0610779848206"}, "J": {"deviation": "38.1927497832", "rating": "1529.43229495", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0623688934243"}, "ELisp": {"deviation": "36.3212917025", "rating": "1477.14686824", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0620584881752"}, "C++": {"deviation": "40.9094923785", "rating": "1760.80511472", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0595477668943"}, "Standard ML": {"deviation": "34.027336925", "rating": "1470.05872255", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0617481340052"}, "R": {"deviation": "35.3685481033", "rating": "1465.60918026", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0657303255297"}, "Clojure": {"deviation": "37.3791949944", "rating": "1281.89556307", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0602973042062"}, "Prolog": {"deviation": "40.5762713861", "rating": "1583.27851966", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0818828086952"}, "REBOL": {"deviation": "202.765108167", "rating": "1270.88389716", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0600060344147"}, "Fortran": {"deviation": "37.8567161391", "rating": "1685.86168134", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0604286152718"}, "Assembler": {"deviation": "55.5914751127", "rating": "2044.1506467", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0600644872159"}, "Python": {"deviation": "42.5282923037", "rating": "1245.78795016", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0601039433122"}, "Pascal": {"deviation": "36.5827460229", "rating": "1493.63210025", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0624524954773"}, "Haskell": {"deviation": "40.2264619122", "rating": "1362.47131241", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.073491511815"}, "Cobol": {"deviation": "40.9303101247", "rating": "1737.40024349", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0611066514316"}, "APL": {"deviation": "34.3982616493", "rating": "1406.33265747", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0622936050231"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.06"}, "Go": {"deviation": "35.8220765489", "rating": "1458.64766258", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0606369509758"}, "Visual Basic": {"deviation": "42.4739305699", "rating": "1484.35128757", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0746406447338"}, "PHP": {"deviation": "53.1984317359", "rating": "1467.35488207", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.103462848328"}, "Mozart-Oz": {"deviation": "36.3486804647", "rating": "1238.23492538", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.060257586752"}, "Smalltalk": {"deviation": "38.1675466949", "rating": "1286.98603188", "ratingsMin": "1169.45959793", "ratingsMax": "2044.1506467", "volatility": "0.0609996975646"}}, "I often feel like I am not smart enough to write this language": {"Coq": {"deviation": "56.329359681", "rating": "2087.03909352", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601681539997"}, "Eiffel": {"deviation": "56.6291028413", "rating": "1387.73625179", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601130401046"}, "Java": {"deviation": "40.3687211385", "rating": "1378.51055848", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0636148397606"}, "Scala": {"deviation": "41.5401097058", "rating": "1742.95791902", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0602401734083"}, "Delphi": {"deviation": "36.0452880774", "rating": "1353.13330764", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601385586107"}, "Ada": {"deviation": "37.9582394158", "rating": "1393.52596234", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0607172641278"}, "Perl": {"deviation": "40.7290032558", "rating": "1565.20043582", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0705720397987"}, "Lua": {"deviation": "37.4881133264", "rating": "1363.98645732", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0605708948682"}, "Shell": {"deviation": "38.0633627996", "rating": "1392.48546692", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.064455837541"}, "Matlab": {"deviation": "39.1228952499", "rating": "1425.37355905", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0620588943629"}, "Factor": {"deviation": "41.8468052649", "rating": "1757.01047808", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.060787544461"}, "Haxe": {"deviation": "41.3377310342", "rating": "1368.49032319", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601021717355"}, "Erlang": {"deviation": "36.0599398677", "rating": "1617.67597389", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0606933346028"}, "Forth": {"deviation": "35.8929323237", "rating": "1675.41973908", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.060202088998"}, "Scheme": {"deviation": "38.9809430769", "rating": "1631.80447556", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0611480103903"}, "Objective C": {"deviation": "37.9557952453", "rating": "1538.47381902", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0619373187008"}, "C#": {"deviation": "42.1197435432", "rating": "1306.46733584", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0628829817882"}, "Javascript": {"deviation": "39.8192515545", "rating": "1368.33837091", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0651844830368"}, "Common Lisp": {"deviation": "39.9000023749", "rating": "1733.00318922", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601138146347"}, "TCL": {"deviation": "35.8376798322", "rating": "1410.18759561", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0617126297661"}, "F#": {"deviation": "38.8946522664", "rating": "1690.26625788", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0606852156949"}, "AWK": {"deviation": "36.9845024432", "rating": "1425.37962318", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0636857514616"}, "Ruby": {"deviation": "38.8667542214", "rating": "1417.50211603", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0644139475469"}, "Agda": {"deviation": "88.1036484124", "rating": "2040.23395493", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0608959151618"}, "Groovy": {"deviation": "36.3597099162", "rating": "1391.56248142", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0606723559412"}, "C": {"deviation": "47.0242917615", "rating": "1603.05063024", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0855994423156"}, "Mathematica": {"deviation": "37.0546982597", "rating": "1767.3530012", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0603915769539"}, "D": {"deviation": "32.8059870212", "rating": "1546.43023881", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0613221775525"}, "O'Caml": {"deviation": "36.1827575566", "rating": "1616.16135264", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0602780773488"}, "Io": {"deviation": "39.6234586625", "rating": "1432.76061048", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0630262646995"}, "J": {"deviation": "59.6190332151", "rating": "1486.27736276", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0620701049103"}, "ELisp": {"deviation": "36.4716137409", "rating": "1583.79970135", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0613197234719"}, "C++": {"deviation": "42.1447182026", "rating": "1640.13800472", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0627334141235"}, "Standard ML": {"deviation": "37.9193401437", "rating": "1664.05621675", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0600482742474"}, "R": {"deviation": "35.7844098461", "rating": "1551.75201522", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0620075420723"}, "Clojure": {"deviation": "36.5330490494", "rating": "1585.00134474", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0606597610333"}, "Prolog": {"deviation": "38.3162722099", "rating": "1807.95104608", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0600210672222"}, "REBOL": {"deviation": "58.7891852704", "rating": "1512.06139145", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601770199476"}, "Fortran": {"deviation": "37.7437015303", "rating": "1471.67227865", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0621977325228"}, "Assembler": {"deviation": "41.0579209106", "rating": "1702.80838638", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0609635292844"}, "Python": {"deviation": "39.1147642748", "rating": "1379.31699169", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0609095311359"}, "Pascal": {"deviation": "37.3671493108", "rating": "1282.84628838", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601084312377"}, "Haskell": {"deviation": "44.9864091102", "rating": "1887.76387504", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601435193466"}, "Cobol": {"deviation": "35.1721414225", "rating": "1352.59285729", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0605337172983"}, "APL": {"deviation": "54.8725394095", "rating": "1871.69492101", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0601049292843"}, "ActionScript": {"deviation": "159.026933606", "rating": "1207.14225854", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0600415903775"}, "Go": {"deviation": "35.8911449563", "rating": "1448.98481218", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0611393318183"}, "Visual Basic": {"deviation": "39.8583968386", "rating": "1267.66054788", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0600979252488"}, "PHP": {"deviation": "39.9259608912", "rating": "1333.16304263", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0602169764137"}, "Mozart-Oz": {"deviation": "56.4405090532", "rating": "1548.67684181", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.0599984467989"}, "Smalltalk": {"deviation": "33.7249046206", "rating": "1507.15576359", "ratingsMin": "1207.14225854", "ratingsMax": "2087.03909352", "volatility": "0.062504881304"}}, "This language has a wide variety of agreed-upon conventions which are generally adhered to reasonably well and which increase my productivity": {"Coq": {"deviation": "34.9743419669", "rating": "1461.67564811", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0613497752312"}, "Eiffel": {"deviation": "35.9435431442", "rating": "1674.5023745", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0608686798819"}, "Java": {"deviation": "40.6635724236", "rating": "1816.46690702", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0609939706895"}, "Scala": {"deviation": "35.5136299648", "rating": "1534.59762796", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0656615377509"}, "Delphi": {"deviation": "39.4366179771", "rating": "1529.11799957", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0665095533055"}, "Ada": {"deviation": "34.8837495578", "rating": "1605.66088511", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0652658473832"}, "Perl": {"deviation": "40.3636513965", "rating": "1445.34113319", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0731956473244"}, "Lua": {"deviation": "41.3270780204", "rating": "1537.13230003", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0693871755592"}, "Shell": {"deviation": "36.335204056", "rating": "1401.53463231", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0633980308365"}, "Matlab": {"deviation": "39.4001335007", "rating": "1448.61933375", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0607603913757"}, "Factor": {"deviation": "44.280394267", "rating": "1483.23255168", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0607578790813"}, "Haxe": {"deviation": "44.2673976692", "rating": "1509.18774771", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0601756500821"}, "Erlang": {"deviation": "35.1710721586", "rating": "1596.46644501", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0671659820115"}, "Forth": {"deviation": "36.8617412013", "rating": "1352.00231422", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0628899152916"}, "Scheme": {"deviation": "41.0374925788", "rating": "1557.26906013", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0819702242496"}, "Objective C": {"deviation": "37.2449193858", "rating": "1655.20598333", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0611299879394"}, "C#": {"deviation": "39.3825972705", "rating": "1729.33672314", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0614033815108"}, "Javascript": {"deviation": "49.240087654", "rating": "1397.85576871", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0899471971133"}, "Common Lisp": {"deviation": "39.0048235875", "rating": "1510.26168642", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0701954070607"}, "TCL": {"deviation": "35.0967652103", "rating": "1437.08186258", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.062589154872"}, "F#": {"deviation": "37.5982214475", "rating": "1584.09385758", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0613303114144"}, "AWK": {"deviation": "36.0767823589", "rating": "1420.9209143", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0635130739632"}, "Ruby": {"deviation": "39.2354355257", "rating": "1692.75096992", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0622452763675"}, "Agda": {"deviation": "85.7970312636", "rating": "1599.19045394", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0603283003762"}, "Groovy": {"deviation": "35.9709096662", "rating": "1502.93242342", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0637054320339"}, "C": {"deviation": "46.9405099872", "rating": "1521.89671012", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.110441467385"}, "Mathematica": {"deviation": "38.3498516693", "rating": "1497.64670356", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0609054133763"}, "D": {"deviation": "34.4338770874", "rating": "1532.50977302", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0618792687277"}, "O'Caml": {"deviation": "35.0188119186", "rating": "1593.89546402", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0646127123577"}, "Io": {"deviation": "38.9397954969", "rating": "1512.24706071", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0610786796998"}, "J": {"deviation": "43.8197088815", "rating": "1620.76836392", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0601433799968"}, "ELisp": {"deviation": "35.1127592117", "rating": "1481.84154816", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0649227046025"}, "C++": {"deviation": "54.2812445616", "rating": "1366.75799306", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.173368643892"}, "Standard ML": {"deviation": "32.5908921314", "rating": "1568.1324157", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0611682633389"}, "R": {"deviation": "36.7176190698", "rating": "1505.35829172", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0618394903036"}, "Clojure": {"deviation": "38.1755921235", "rating": "1677.99162452", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0615634256823"}, "Prolog": {"deviation": "34.8680898596", "rating": "1441.81337569", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0638563049306"}, "REBOL": {"deviation": "204.151331681", "rating": "1225.10402719", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0600112267636"}, "Fortran": {"deviation": "34.4900192613", "rating": "1408.61153886", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0653660253206"}, "Assembler": {"deviation": "36.7079776725", "rating": "1370.56020153", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0611776558447"}, "Python": {"deviation": "38.6938795923", "rating": "1654.53889864", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0598048316911"}, "Pascal": {"deviation": "35.4448664452", "rating": "1553.58404103", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0642095435631"}, "Haskell": {"deviation": "34.9305731983", "rating": "1646.39702427", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0639283711318"}, "Cobol": {"deviation": "38.9802353091", "rating": "1401.74692383", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0614385829846"}, "APL": {"deviation": "38.4718678028", "rating": "1546.22565956", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0621001549411"}, "ActionScript": {"deviation": "190.741183766", "rating": "1651.408452", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0599991677251"}, "Go": {"deviation": "37.5320629111", "rating": "1669.88912372", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0602701740558"}, "Visual Basic": {"deviation": "38.1745329191", "rating": "1407.22383572", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0653662949817"}, "PHP": {"deviation": "40.8354260187", "rating": "1414.37537747", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.0656791921843"}, "Mozart-Oz": {"deviation": "36.8148198674", "rating": "1445.0509363", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.060931293695"}, "Smalltalk": {"deviation": "34.2682255194", "rating": "1685.07851002", "ratingsMin": "1225.10402719", "ratingsMax": "1816.46690702", "volatility": "0.061780825652"}}, "This language is large": {"Coq": {"deviation": "33.8277245669", "rating": "1361.12665942", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0661303440611"}, "Eiffel": {"deviation": "31.5081031931", "rating": "1517.2973938", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0617870560867"}, "Java": {"deviation": "44.301542627", "rating": "1786.04769854", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0595505148146"}, "Scala": {"deviation": "42.1085290551", "rating": "1756.06621661", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.062047984755"}, "Delphi": {"deviation": "37.5574956567", "rating": "1454.74229536", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0692194689066"}, "Ada": {"deviation": "37.0297541485", "rating": "1683.07832584", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0611174196237"}, "Perl": {"deviation": "38.549106858", "rating": "1687.17712931", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0608421477123"}, "Lua": {"deviation": "36.225311557", "rating": "1360.22745894", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0601873408637"}, "Shell": {"deviation": "36.8849444244", "rating": "1303.55668463", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0609991253812"}, "Matlab": {"deviation": "36.8784264841", "rating": "1472.28622887", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0610552191765"}, "Factor": {"deviation": "30.9201163303", "rating": "1310.45883396", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0605757507272"}, "Haxe": {"deviation": "38.2990894467", "rating": "1455.72431109", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0600718870294"}, "Erlang": {"deviation": "33.85120611", "rating": "1251.9420121", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0607734016687"}, "Forth": {"deviation": "36.3628652687", "rating": "1207.66871842", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0608233774957"}, "Scheme": {"deviation": "41.5191804863", "rating": "1064.98075479", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0599640945669"}, "Objective C": {"deviation": "37.513270289", "rating": "1492.051862", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.068932781385"}, "C#": {"deviation": "41.9765496136", "rating": "1817.62367953", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.059628330184"}, "Javascript": {"deviation": "39.1066862437", "rating": "1407.93990323", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0676361519441"}, "Common Lisp": {"deviation": "35.8084570181", "rating": "1640.45485412", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0658497445913"}, "TCL": {"deviation": "34.0590783173", "rating": "1244.25380847", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0601145233053"}, "F#": {"deviation": "37.2392467214", "rating": "1496.59810804", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0652244315806"}, "AWK": {"deviation": "37.4155196166", "rating": "1128.10871933", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0598354928418"}, "Ruby": {"deviation": "39.8306696767", "rating": "1528.51761617", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0689065351929"}, "Agda": {"deviation": "105.436794795", "rating": "1291.98563119", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0601149675041"}, "Groovy": {"deviation": "34.5924694565", "rating": "1437.85631294", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0650722902065"}, "C": {"deviation": "42.6465295172", "rating": "1302.7784908", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0693585335886"}, "Mathematica": {"deviation": "38.7341104779", "rating": "1535.63696366", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0610239325421"}, "D": {"deviation": "35.2803261116", "rating": "1504.79181613", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0609370932723"}, "O'Caml": {"deviation": "32.8216521355", "rating": "1487.95877382", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0627187535176"}, "Io": {"deviation": "40.370286668", "rating": "1036.32683612", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0600707400576"}, "J": {"deviation": "34.0523359723", "rating": "1525.19408005", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0619369345242"}, "ELisp": {"deviation": "35.3779505902", "rating": "1312.88985587", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0604434824996"}, "C++": {"deviation": "45.1464753339", "rating": "1917.20187257", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0598820100734"}, "Standard ML": {"deviation": "33.7100175429", "rating": "1432.70311057", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.060125715861"}, "R": {"deviation": "34.9023568956", "rating": "1470.72888832", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0625158011506"}, "Clojure": {"deviation": "37.1091566846", "rating": "1370.38446338", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0656762923872"}, "Prolog": {"deviation": "34.4504643846", "rating": "1239.75886777", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0600217419481"}, "REBOL": {"deviation": "86.884986992", "rating": "1244.80494986", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0600014230189"}, "Fortran": {"deviation": "32.275538998", "rating": "1345.47729426", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0625678144806"}, "Assembler": {"deviation": "40.6392572054", "rating": "1114.23335031", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0602101622866"}, "Python": {"deviation": "48.913402561", "rating": "1532.94000568", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0917276697654"}, "Pascal": {"deviation": "33.6498281216", "rating": "1352.3395205", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0605052589636"}, "Haskell": {"deviation": "45.2510146419", "rating": "1491.00519215", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0886922955953"}, "Cobol": {"deviation": "32.5184725649", "rating": "1589.47968483", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0636192332128"}, "APL": {"deviation": "32.7232578153", "rating": "1423.61434955", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0612779375892"}, "ActionScript": {"deviation": "93.0211907849", "rating": "1444.83587131", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0599944233651"}, "Go": {"deviation": "34.6415435813", "rating": "1357.60622924", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0600957873813"}, "Visual Basic": {"deviation": "35.769679578", "rating": "1463.70007642", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0729921788363"}, "PHP": {"deviation": "42.9568685957", "rating": "1537.54292168", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0806861433155"}, "Mozart-Oz": {"deviation": "30.5068012683", "rating": "1465.12843171", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0661333527984"}, "Smalltalk": {"deviation": "33.8707619065", "rating": "1436.52381364", "ratingsMin": "1036.32683612", "ratingsMax": "1917.20187257", "volatility": "0.0617134755513"}}, "This language is good for distributed computing": {"Coq": {"deviation": "40.2121441579", "rating": "1313.74998439", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0601350519818"}, "Eiffel": {"deviation": "36.8146105682", "rating": "1423.73209145", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0601644241967"}, "Java": {"deviation": "40.0617739195", "rating": "1751.18968324", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.059895002026"}, "Scala": {"deviation": "40.748975174", "rating": "1781.2986546", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0598898448491"}, "Delphi": {"deviation": "38.4356065327", "rating": "1436.65616728", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0611084823126"}, "Ada": {"deviation": "34.5496630635", "rating": "1580.65906226", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0649700221582"}, "Perl": {"deviation": "41.2489021387", "rating": "1345.26802746", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0672481755654"}, "Lua": {"deviation": "40.1904348143", "rating": "1464.67321697", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0636761229231"}, "Shell": {"deviation": "40.8957731018", "rating": "1271.37934407", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0601261553332"}, "Matlab": {"deviation": "36.0400140845", "rating": "1418.65533358", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0616281888929"}, "Factor": {"deviation": "39.0691212126", "rating": "1546.79876451", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0610088302522"}, "Haxe": {"deviation": "47.0623393155", "rating": "1352.78045167", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0602653764951"}, "Erlang": {"deviation": "57.3148061482", "rating": "2248.12761107", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0601965217606"}, "Forth": {"deviation": "33.5515930899", "rating": "1394.17125566", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0615893688825"}, "Scheme": {"deviation": "42.0357326482", "rating": "1496.27685232", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.082031158813"}, "Objective C": {"deviation": "38.6541591324", "rating": "1542.71647977", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0668218360658"}, "C#": {"deviation": "39.4687829146", "rating": "1697.8807256", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0615487130931"}, "Javascript": {"deviation": "47.4936739727", "rating": "1483.43446968", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0850561082581"}, "Common Lisp": {"deviation": "37.4250848877", "rating": "1556.49196141", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0682414803316"}, "TCL": {"deviation": "35.3710921888", "rating": "1313.76227851", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0603942912089"}, "F#": {"deviation": "43.5736457071", "rating": "1892.06442096", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0605085164145"}, "AWK": {"deviation": "40.5728303882", "rating": "1181.91726397", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0602677897235"}, "Ruby": {"deviation": "39.4581242468", "rating": "1552.312862", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0724982889359"}, "Agda": {"deviation": "105.264328512", "rating": "1377.79714947", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0603768722481"}, "Groovy": {"deviation": "39.4850560631", "rating": "1601.36463084", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0620738258136"}, "C": {"deviation": "62.296442913", "rating": "1369.40825908", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.150722435297"}, "Mathematica": {"deviation": "42.0895197137", "rating": "1366.85116068", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0603668816185"}, "D": {"deviation": "36.8543701159", "rating": "1588.76618454", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0602797664712"}, "O'Caml": {"deviation": "36.6453388636", "rating": "1623.7563834", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0622942396892"}, "Io": {"deviation": "36.02622172", "rating": "1440.82829697", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0611615908959"}, "J": {"deviation": "39.5848102526", "rating": "1388.76160989", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0600378067454"}, "ELisp": {"deviation": "38.0545652095", "rating": "1291.42647188", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.060177338318"}, "C++": {"deviation": "43.8780406915", "rating": "1595.05747758", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0761827202115"}, "Standard ML": {"deviation": "36.5127740443", "rating": "1504.18765066", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0637799173086"}, "R": {"deviation": "36.1599079652", "rating": "1410.83296864", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0618324254003"}, "Clojure": {"deviation": "40.6919847231", "rating": "1865.97198124", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0601703712631"}, "Prolog": {"deviation": "37.5210398036", "rating": "1373.85155287", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0625406638226"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.06"}, "Fortran": {"deviation": "35.7085876695", "rating": "1401.86693868", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.063210501883"}, "Assembler": {"deviation": "38.4369606076", "rating": "1243.19618079", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0605761513021"}, "Python": {"deviation": "41.4486024841", "rating": "1607.10591372", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.067951613138"}, "Pascal": {"deviation": "37.5315059999", "rating": "1321.63798092", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0599140447718"}, "Haskell": {"deviation": "38.8990905187", "rating": "1698.61273632", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0611141884962"}, "Cobol": {"deviation": "40.2735204806", "rating": "1181.20847687", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0600757518838"}, "APL": {"deviation": "35.7194811028", "rating": "1342.48140046", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0612192631091"}, "ActionScript": {"deviation": "100.861015677", "rating": "1324.3980516", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0600573131126"}, "Go": {"deviation": "35.1531487486", "rating": "1620.04947332", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.060206758825"}, "Visual Basic": {"deviation": "39.508198973", "rating": "1295.04873673", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0599633734439"}, "PHP": {"deviation": "43.5720291425", "rating": "1344.02314971", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0609448334488"}, "Mozart-Oz": {"deviation": "40.7712150695", "rating": "1835.79694911", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0608604928539"}, "Smalltalk": {"deviation": "38.6134913413", "rating": "1471.66169738", "ratingsMin": "1181.20847687", "ratingsMax": "2248.12761107", "volatility": "0.0669867812745"}}, "I would like to write more of this language than I currently do": {"Coq": {"deviation": "33.4030973574", "rating": "1554.6612396", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0609682021884"}, "Eiffel": {"deviation": "31.4462767972", "rating": "1441.65277575", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0625367401667"}, "Java": {"deviation": "38.7743949356", "rating": "1340.35096006", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0651053434636"}, "Scala": {"deviation": "43.3419817006", "rating": "1825.12207805", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0603292120142"}, "Delphi": {"deviation": "35.8388944069", "rating": "1297.98607896", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0601613429028"}, "Ada": {"deviation": "35.418718919", "rating": "1538.5608815", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0701093741399"}, "Perl": {"deviation": "37.4954264224", "rating": "1395.01581051", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0607793124879"}, "Lua": {"deviation": "41.7123819142", "rating": "1558.12902905", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0754009618011"}, "Shell": {"deviation": "39.1659990842", "rating": "1210.56854191", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0601137051043"}, "Matlab": {"deviation": "36.8585912914", "rating": "1356.86124582", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.060633750217"}, "Factor": {"deviation": "32.8699833178", "rating": "1435.42768976", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0618415913862"}, "Haxe": {"deviation": "34.6455591373", "rating": "1513.15315414", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0606967277916"}, "Erlang": {"deviation": "37.418329797", "rating": "1686.38966021", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0610371160402"}, "Forth": {"deviation": "35.5422533369", "rating": "1501.97469416", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0708542419654"}, "Scheme": {"deviation": "38.0960955471", "rating": "1645.00359711", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0684494701764"}, "Objective C": {"deviation": "37.1657921474", "rating": "1438.27697991", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0661879821571"}, "C#": {"deviation": "41.9299619435", "rating": "1416.95514509", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0728171243711"}, "Javascript": {"deviation": "47.4117797668", "rating": "1468.9970297", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.105696769992"}, "Common Lisp": {"deviation": "37.5073664443", "rating": "1662.25165289", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0635804416492"}, "TCL": {"deviation": "33.8245711187", "rating": "1419.10159395", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0604177662742"}, "F#": {"deviation": "37.1826650621", "rating": "1545.53779118", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0602192732034"}, "AWK": {"deviation": "34.5444138353", "rating": "1338.62275822", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0601174817995"}, "Ruby": {"deviation": "38.4727139379", "rating": "1513.75623466", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0704754036048"}, "Agda": {"deviation": "63.8239763052", "rating": "1633.59540714", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0602988712609"}, "Groovy": {"deviation": "38.0581821246", "rating": "1469.87191215", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0681676059214"}, "C": {"deviation": "42.2206950852", "rating": "1379.04344254", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.077875951225"}, "Mathematica": {"deviation": "41.264431154", "rating": "1366.91508842", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0605882987773"}, "D": {"deviation": "34.5751038574", "rating": "1613.90506313", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0614047248386"}, "O'Caml": {"deviation": "35.9238911494", "rating": "1610.70262524", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0620187510719"}, "Io": {"deviation": "34.2499434564", "rating": "1481.58797537", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0605936078009"}, "J": {"deviation": "34.3319615148", "rating": "1524.93712038", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0601291150189"}, "ELisp": {"deviation": "34.5802185027", "rating": "1542.08242249", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0609945761616"}, "C++": {"deviation": "40.0474822545", "rating": "1385.86072509", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.065356692756"}, "Standard ML": {"deviation": "34.6977811541", "rating": "1524.54985884", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0657626176415"}, "R": {"deviation": "35.0055586907", "rating": "1447.87815958", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0648575890613"}, "Clojure": {"deviation": "39.5346413784", "rating": "1813.72749126", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0602803747662"}, "Prolog": {"deviation": "44.5421608971", "rating": "1483.36730139", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0943325121256"}, "REBOL": {"deviation": "86.3537447211", "rating": "1897.60100901", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0616305922842"}, "Fortran": {"deviation": "36.2403504624", "rating": "1400.73442155", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.06125124461"}, "Assembler": {"deviation": "38.9387027968", "rating": "1328.70323039", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0624964773254"}, "Python": {"deviation": "44.8512610445", "rating": "1448.74345576", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0841485222301"}, "Pascal": {"deviation": "37.4825004293", "rating": "1169.3694218", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.060004823477"}, "Haskell": {"deviation": "44.3525094506", "rating": "1842.19616844", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0600640743527"}, "Cobol": {"deviation": "38.9501629526", "rating": "1134.21866013", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0614147335087"}, "APL": {"deviation": "33.8373870665", "rating": "1337.12152505", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0612124297967"}, "ActionScript": {"deviation": "112.562734929", "rating": "1281.95160561", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0600102119491"}, "Go": {"deviation": "35.3796926365", "rating": "1730.9754179", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0631796211978"}, "Visual Basic": {"deviation": "44.3202651295", "rating": "1041.68824198", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0598490416627"}, "PHP": {"deviation": "43.402143643", "rating": "1175.97514828", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0593962092369"}, "Mozart-Oz": {"deviation": "33.4301582463", "rating": "1514.78678796", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0603954078041"}, "Smalltalk": {"deviation": "37.552283685", "rating": "1687.74440772", "ratingsMin": "1041.68824198", "ratingsMax": "1897.60100901", "volatility": "0.0631404533871"}}, "This language has a very dogmatic community": {"Coq": {"deviation": "34.4045068305", "rating": "1597.35322089", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0615375669973"}, "Eiffel": {"deviation": "35.264100663", "rating": "1531.74209422", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0626078523343"}, "Java": {"deviation": "44.1930725886", "rating": "1733.02398076", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0676269481654"}, "Scala": {"deviation": "40.7159459346", "rating": "1449.50784836", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0701537142599"}, "Delphi": {"deviation": "35.4088681064", "rating": "1444.94038301", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0634496096139"}, "Ada": {"deviation": "34.3106362177", "rating": "1641.68706441", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0631916367933"}, "Perl": {"deviation": "43.2018550059", "rating": "1538.46796558", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0876803074585"}, "Lua": {"deviation": "37.5767537665", "rating": "1337.48937753", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0607204131682"}, "Shell": {"deviation": "35.7828922789", "rating": "1383.02529705", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0604635868774"}, "Matlab": {"deviation": "34.5607118159", "rating": "1418.83061224", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0613409408376"}, "Factor": {"deviation": "37.1338329828", "rating": "1455.88258653", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0601336014084"}, "Haxe": {"deviation": "44.3196840857", "rating": "1141.72294374", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0600280278224"}, "Erlang": {"deviation": "38.0055633183", "rating": "1439.87949215", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0683690285615"}, "Forth": {"deviation": "35.8471681481", "rating": "1412.06737299", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0648918730239"}, "Scheme": {"deviation": "43.8489464278", "rating": "1510.06341391", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0858683002556"}, "Objective C": {"deviation": "36.2792027517", "rating": "1530.2891771", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0632645028133"}, "C#": {"deviation": "45.9818852986", "rating": "1652.47114443", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0799206759389"}, "Javascript": {"deviation": "40.1046644808", "rating": "1466.87629205", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0706089794809"}, "Common Lisp": {"deviation": "39.3160576846", "rating": "1784.5732605", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0654216468871"}, "TCL": {"deviation": "30.6044831041", "rating": "1368.63975985", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0613403699766"}, "F#": {"deviation": "32.1055963236", "rating": "1391.9677674", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0609431996283"}, "AWK": {"deviation": "36.9495886726", "rating": "1329.10774815", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0612018536772"}, "Ruby": {"deviation": "41.8192342749", "rating": "1630.36738739", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0701826745918"}, "Agda": {"deviation": "163.721197803", "rating": "1887.02005153", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0600727766351"}, "Groovy": {"deviation": "35.649174839", "rating": "1369.25733811", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0621143679533"}, "C": {"deviation": "66.8529333471", "rating": "1438.38000039", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.216369968148"}, "Mathematica": {"deviation": "32.9292215736", "rating": "1543.15842816", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0620185252984"}, "D": {"deviation": "34.7614060534", "rating": "1528.1449037", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0612440173658"}, "O'Caml": {"deviation": "35.0841782748", "rating": "1666.88029462", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0649577874886"}, "Io": {"deviation": "36.585734891", "rating": "1291.74466917", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0601469500557"}, "J": {"deviation": "36.5498459281", "rating": "1346.64342635", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0664205161332"}, "ELisp": {"deviation": "36.7222721629", "rating": "1524.39994658", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0667661227548"}, "C++": {"deviation": "43.8693094364", "rating": "1485.22296929", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0873343055043"}, "Standard ML": {"deviation": "35.2491904348", "rating": "1626.41893537", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.062406410232"}, "R": {"deviation": "35.0790995631", "rating": "1478.239432", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.061209493266"}, "Clojure": {"deviation": "38.8538332222", "rating": "1425.7993611", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0682122889937"}, "Prolog": {"deviation": "37.1069240758", "rating": "1446.93290555", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0685695629035"}, "REBOL": {"deviation": "87.1189126942", "rating": "1138.44215557", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0605325507728"}, "Fortran": {"deviation": "34.3919746964", "rating": "1395.60483369", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0626090064829"}, "Assembler": {"deviation": "39.0677631201", "rating": "1353.62680415", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0644268900117"}, "Python": {"deviation": "45.0898785597", "rating": "1596.90902141", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0845642945427"}, "Pascal": {"deviation": "34.5019961181", "rating": "1477.90877695", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0652280154921"}, "Haskell": {"deviation": "39.4359930913", "rating": "1563.42921204", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0657687965158"}, "Cobol": {"deviation": "35.392455304", "rating": "1436.59820544", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0681504590042"}, "APL": {"deviation": "32.2054563186", "rating": "1507.91539436", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0619074813499"}, "ActionScript": {"deviation": "138.222995575", "rating": "1488.66335829", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0600029425224"}, "Go": {"deviation": "32.0093531157", "rating": "1484.2451645", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0640162658233"}, "Visual Basic": {"deviation": "39.4979161145", "rating": "1361.75293097", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0657496773272"}, "PHP": {"deviation": "40.7346220441", "rating": "1374.61041441", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0714373063191"}, "Mozart-Oz": {"deviation": "34.0819821548", "rating": "1438.08327865", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0608361155243"}, "Smalltalk": {"deviation": "36.8916596305", "rating": "1561.16377487", "ratingsMin": "1138.44215557", "ratingsMax": "1887.02005153", "volatility": "0.0692003119631"}}, "Learning this language improved my ability as a programmer": {"Coq": {"deviation": "34.8005665478", "rating": "1783.55850767", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0611567720875"}, "Eiffel": {"deviation": "33.7589315458", "rating": "1655.24568061", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0611031999089"}, "Java": {"deviation": "49.9636647011", "rating": "1367.93545624", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0959012221582"}, "Scala": {"deviation": "42.3182822602", "rating": "1699.23371143", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0613920327131"}, "Delphi": {"deviation": "37.1706232267", "rating": "1342.82584242", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.061003619799"}, "Ada": {"deviation": "34.6538542572", "rating": "1558.42441862", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0654896931381"}, "Perl": {"deviation": "38.9796924741", "rating": "1215.09338707", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0657497067872"}, "Lua": {"deviation": "37.4839069929", "rating": "1349.65088278", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0623942462476"}, "Shell": {"deviation": "37.1480060386", "rating": "1292.24033279", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0598878504705"}, "Matlab": {"deviation": "39.4255900071", "rating": "1209.69979176", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0604879159105"}, "Factor": {"deviation": "34.8495826934", "rating": "1599.86785223", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0601669754111"}, "Haxe": {"deviation": "36.3556229137", "rating": "1394.05808577", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0631494118557"}, "Erlang": {"deviation": "37.6395162163", "rating": "1562.88482102", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0623965355385"}, "Forth": {"deviation": "37.6433083004", "rating": "1552.42173263", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0658274341331"}, "Scheme": {"deviation": "37.3680115934", "rating": "1648.3517285", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0616183654409"}, "Objective C": {"deviation": "38.3036511801", "rating": "1363.55204433", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0651648928524"}, "C#": {"deviation": "43.7085954613", "rating": "1335.37835036", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0677708800941"}, "Javascript": {"deviation": "40.0879723417", "rating": "1428.05464371", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0658760333174"}, "Common Lisp": {"deviation": "38.2209816195", "rating": "1782.3276259", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.061550850842"}, "TCL": {"deviation": "35.4609473951", "rating": "1310.77056109", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0614645243629"}, "F#": {"deviation": "40.44563457", "rating": "1576.36216354", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0622855663814"}, "AWK": {"deviation": "34.8707777348", "rating": "1323.22808721", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0602721063082"}, "Ruby": {"deviation": "48.5035183503", "rating": "1624.53096936", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0899369558105"}, "Agda": {"deviation": "53.6946984713", "rating": "1815.87097622", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0640832824242"}, "Groovy": {"deviation": "39.0946356451", "rating": "1315.65411512", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0607601077851"}, "C": {"deviation": "180.350811115", "rating": "1787.94433916", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "1.40494679429"}, "Mathematica": {"deviation": "38.4442664351", "rating": "1355.56502589", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0605303173359"}, "D": {"deviation": "35.5873375193", "rating": "1398.94673661", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0615467304384"}, "O'Caml": {"deviation": "36.8021958021", "rating": "1581.53737906", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0605361142139"}, "Io": {"deviation": "37.2098581394", "rating": "1527.90511356", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0646901729308"}, "J": {"deviation": "34.2831860265", "rating": "1690.62182236", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0600049543219"}, "ELisp": {"deviation": "36.4797460452", "rating": "1369.71405691", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0629262155689"}, "C++": {"deviation": "91.3993114096", "rating": "1732.56301658", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.300298282015"}, "Standard ML": {"deviation": "35.1720949368", "rating": "1676.91903668", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0603803024299"}, "R": {"deviation": "37.4476434769", "rating": "1294.25623957", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0603058724175"}, "Clojure": {"deviation": "44.6043149635", "rating": "1818.35310293", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0612082575645"}, "Prolog": {"deviation": "36.8608310497", "rating": "1674.94779612", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0682454583291"}, "REBOL": {"deviation": "69.5667049899", "rating": "1391.2465827", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0601552873225"}, "Fortran": {"deviation": "35.4434981188", "rating": "1277.15730468", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0601845658306"}, "Assembler": {"deviation": "40.8366059784", "rating": "1495.34437998", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0718826284828"}, "Python": {"deviation": "82.0015457034", "rating": "1617.98499572", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.242877115478"}, "Pascal": {"deviation": "36.7570886596", "rating": "1385.08062105", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0635713799173"}, "Haskell": {"deviation": "42.825316819", "rating": "1755.53169532", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0600683552438"}, "Cobol": {"deviation": "42.5786441188", "rating": "1080.37736173", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0607737602292"}, "APL": {"deviation": "33.3911333656", "rating": "1512.3774018", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.063076170156"}, "ActionScript": {"deviation": "108.738082999", "rating": "1523.78569607", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.06002514661"}, "Go": {"deviation": "36.719267121", "rating": "1463.97783844", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0618107468821"}, "Visual Basic": {"deviation": "43.0972640616", "rating": "1100.53419061", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0602810092734"}, "PHP": {"deviation": "41.8972858681", "rating": "1142.47626743", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0597459677821"}, "Mozart-Oz": {"deviation": "33.4257242464", "rating": "1701.78801882", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0621046557651"}, "Smalltalk": {"deviation": "39.1547059296", "rating": "1702.36587681", "ratingsMin": "1080.37736173", "ratingsMax": "1818.35310293", "volatility": "0.0630446316316"}}, "This language is well documented": {"Coq": {"deviation": "35.3459400215", "rating": "1504.89227574", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0615510217661"}, "Eiffel": {"deviation": "32.8654590839", "rating": "1638.65559486", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0636184793517"}, "Java": {"deviation": "38.5597643375", "rating": "1790.43189833", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0593188456511"}, "Scala": {"deviation": "35.7477008689", "rating": "1489.76602677", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0742150935197"}, "Delphi": {"deviation": "40.8831280802", "rating": "1409.78242408", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0673529546545"}, "Ada": {"deviation": "31.7448602178", "rating": "1607.08408369", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0620075786081"}, "Perl": {"deviation": "37.7402114245", "rating": "1563.08577291", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0764735039776"}, "Lua": {"deviation": "36.0255347415", "rating": "1544.98936366", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0724855898986"}, "Shell": {"deviation": "40.2691013314", "rating": "1387.16030354", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0645895932442"}, "Matlab": {"deviation": "38.1430290161", "rating": "1554.34446779", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0628000693265"}, "Factor": {"deviation": "32.6498848809", "rating": "1516.48252563", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0611262735989"}, "Haxe": {"deviation": "37.3786389036", "rating": "1560.19830901", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0615383870898"}, "Erlang": {"deviation": "36.1367690801", "rating": "1401.68807848", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0697660858611"}, "Forth": {"deviation": "33.5391377608", "rating": "1428.95536823", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0640199493074"}, "Scheme": {"deviation": "38.9661793221", "rating": "1471.56326776", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0788371650515"}, "Objective C": {"deviation": "33.4642449984", "rating": "1546.48905003", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0642427662822"}, "C#": {"deviation": "38.7156407331", "rating": "1719.80042706", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0600447702441"}, "Javascript": {"deviation": "52.7450880822", "rating": "1519.71254593", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.118116527918"}, "Common Lisp": {"deviation": "35.7704464405", "rating": "1372.75424357", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0726576655783"}, "TCL": {"deviation": "39.2106414356", "rating": "1481.80043756", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0769526038518"}, "F#": {"deviation": "33.9464837737", "rating": "1531.1018066", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0646630161525"}, "AWK": {"deviation": "38.4764688671", "rating": "1458.3268439", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0667957423781"}, "Ruby": {"deviation": "38.2421842235", "rating": "1669.94428875", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0700608064009"}, "Agda": {"deviation": "65.4976667262", "rating": "1458.24397357", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0600525464198"}, "Groovy": {"deviation": "41.9178436909", "rating": "1409.41326131", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0634709747806"}, "C": {"deviation": "39.1663784945", "rating": "1653.93442083", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0666834655398"}, "Mathematica": {"deviation": "34.6526083265", "rating": "1709.84319019", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0607883208929"}, "D": {"deviation": "35.843382817", "rating": "1448.28716327", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0614573557197"}, "O'Caml": {"deviation": "35.1116129", "rating": "1410.35906773", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0670772145268"}, "Io": {"deviation": "35.9904556717", "rating": "1396.26038158", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0601710242207"}, "J": {"deviation": "32.7227050946", "rating": "1435.40689815", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0608724505519"}, "ELisp": {"deviation": "36.5590864162", "rating": "1527.43921941", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0650733155596"}, "C++": {"deviation": "52.6186324739", "rating": "1498.92240401", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.112182388303"}, "Standard ML": {"deviation": "33.3866632495", "rating": "1585.89576855", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0684967995922"}, "R": {"deviation": "34.7968537615", "rating": "1519.44883727", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0626687285427"}, "Clojure": {"deviation": "40.0139954417", "rating": "1517.83524258", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0672780255014"}, "Prolog": {"deviation": "33.2017072482", "rating": "1527.44961987", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0643757767109"}, "REBOL": {"deviation": "135.343354664", "rating": "1467.69539626", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0599824442239"}, "Fortran": {"deviation": "38.1709799949", "rating": "1458.14181514", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0715256442226"}, "Assembler": {"deviation": "47.6321576398", "rating": "1266.94480515", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0911080198302"}, "Python": {"deviation": "38.7434048776", "rating": "1771.15458264", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0605579718281"}, "Pascal": {"deviation": "35.894343665", "rating": "1524.32778923", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0641947517399"}, "Haskell": {"deviation": "37.1633934475", "rating": "1479.24938448", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0692227839137"}, "Cobol": {"deviation": "38.1812978001", "rating": "1307.46154652", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0605130788752"}, "APL": {"deviation": "30.7283113311", "rating": "1464.88808027", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0606161800738"}, "ActionScript": {"deviation": "108.487503053", "rating": "1554.09138475", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0599774512983"}, "Go": {"deviation": "34.4894184833", "rating": "1464.34535003", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0630731195194"}, "Visual Basic": {"deviation": "40.6541855625", "rating": "1529.1523619", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.072369978255"}, "PHP": {"deviation": "44.1319872929", "rating": "1682.34231982", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0776261060197"}, "Mozart-Oz": {"deviation": "31.8641237077", "rating": "1449.7800387", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0606393976676"}, "Smalltalk": {"deviation": "33.6660393447", "rating": "1512.16560096", "ratingsMin": "1266.94480515", "ratingsMax": "1790.43189833", "volatility": "0.0657957755369"}}, "Code written in this language will usually run in all the major implementations if it runs in one of them.": {"Coq": {"deviation": "42.3215956537", "rating": "1651.51425456", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.06029259087"}, "Eiffel": {"deviation": "41.0856036705", "rating": "1373.74974284", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0601923965712"}, "Java": {"deviation": "39.8345101821", "rating": "1695.28034294", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0597267074717"}, "Scala": {"deviation": "38.2062799837", "rating": "1794.41926621", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0599544891234"}, "Delphi": {"deviation": "37.8803041149", "rating": "1436.89758499", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0658664973587"}, "Ada": {"deviation": "35.2933795526", "rating": "1705.91429283", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0616322628137"}, "Perl": {"deviation": "39.3548024359", "rating": "1593.19142914", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0623096089012"}, "Lua": {"deviation": "36.4373948329", "rating": "1706.56782067", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0600595413351"}, "Shell": {"deviation": "40.4187681185", "rating": "1511.98845963", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0655325971772"}, "Matlab": {"deviation": "38.5307166915", "rating": "1538.9163442", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.062928403663"}, "Factor": {"deviation": "53.998737035", "rating": "1753.27342517", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0601452861018"}, "Haxe": {"deviation": "47.6009330041", "rating": "1839.73171853", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0605713869996"}, "Erlang": {"deviation": "34.6579869634", "rating": "1687.19347057", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0605206566218"}, "Forth": {"deviation": "37.9840862739", "rating": "1279.5094672", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0605249545943"}, "Scheme": {"deviation": "40.5278381957", "rating": "1490.11772293", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0690686493475"}, "Objective C": {"deviation": "36.613201291", "rating": "1473.79801924", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0620200884657"}, "C#": {"deviation": "40.8912708497", "rating": "1591.96684513", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0630475419593"}, "Javascript": {"deviation": "45.3060457768", "rating": "1588.34373263", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0844353817852"}, "Common Lisp": {"deviation": "38.5745602159", "rating": "1532.30229014", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0699017608079"}, "TCL": {"deviation": "35.8416643658", "rating": "1633.99155121", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0619212993444"}, "F#": {"deviation": "37.9735990316", "rating": "1563.97675605", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0608223523061"}, "AWK": {"deviation": "37.3276949314", "rating": "1600.13883882", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.062355164231"}, "Ruby": {"deviation": "39.9850233304", "rating": "1683.51823994", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0621633931348"}, "Agda": {"deviation": "79.7262961296", "rating": "1671.56933001", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0601396439155"}, "Groovy": {"deviation": "36.8316311147", "rating": "1746.37934746", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0600214649851"}, "C": {"deviation": "53.8442083728", "rating": "1541.74541731", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.113387244211"}, "Mathematica": {"deviation": "42.4351880832", "rating": "1738.51177878", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0603234964675"}, "D": {"deviation": "38.541770462", "rating": "1454.29134798", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0601732008858"}, "O'Caml": {"deviation": "35.1054582073", "rating": "1709.87838769", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0623844945848"}, "Io": {"deviation": "40.8210404314", "rating": "1459.68713072", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0602462489565"}, "J": {"deviation": "57.3906580239", "rating": "1958.03978328", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0616333719083"}, "ELisp": {"deviation": "35.0267839594", "rating": "1505.30546422", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0619139411837"}, "C++": {"deviation": "45.9953541698", "rating": "1484.62424315", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0844636169587"}, "Standard ML": {"deviation": "34.7557378636", "rating": "1619.90920577", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0607620948131"}, "R": {"deviation": "35.8769290662", "rating": "1694.33173281", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0600525191895"}, "Clojure": {"deviation": "37.9322960137", "rating": "1682.15282201", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0611162903083"}, "Prolog": {"deviation": "37.4860380631", "rating": "1438.45006103", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0615076923384"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.06"}, "Fortran": {"deviation": "38.5380669788", "rating": "1442.3857081", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0636031321706"}, "Assembler": {"deviation": "45.555839221", "rating": "1243.23990855", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0603998843376"}, "Python": {"deviation": "41.4325763529", "rating": "1736.18541723", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0600096706328"}, "Pascal": {"deviation": "39.1173472312", "rating": "1491.72526432", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0691796965741"}, "Haskell": {"deviation": "36.8145792543", "rating": "1602.11127262", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0620448384677"}, "Cobol": {"deviation": "37.8751725057", "rating": "1481.59775749", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0606619671343"}, "APL": {"deviation": "38.763032035", "rating": "1448.3368479", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0622479772878"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.06"}, "Go": {"deviation": "35.6373125133", "rating": "1570.99637705", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0625129820125"}, "Visual Basic": {"deviation": "42.7137276072", "rating": "1384.09803929", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0687131008774"}, "PHP": {"deviation": "40.5334190356", "rating": "1528.45939674", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0642645300846"}, "Mozart-Oz": {"deviation": "42.8888717913", "rating": "1657.40769799", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0601708390952"}, "Smalltalk": {"deviation": "37.4920101553", "rating": "1442.76518666", "ratingsMin": "1243.23990855", "ratingsMax": "1958.03978328", "volatility": "0.0618906037452"}}, "I use a lot of code written in this language which I really don't want to have to make changes to": {"Coq": {"deviation": "48.1182118006", "rating": "1404.18116304", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0604112444768"}, "Eiffel": {"deviation": "47.9299918614", "rating": "1465.14000829", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0604410472208"}, "Java": {"deviation": "41.6117449264", "rating": "1680.8265096", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0697318419711"}, "Scala": {"deviation": "37.7054071082", "rating": "1440.50827954", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0618418651611"}, "Delphi": {"deviation": "34.8252488307", "rating": "1405.90416808", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0621250758932"}, "Ada": {"deviation": "38.293617677", "rating": "1432.71330544", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0611875012146"}, "Perl": {"deviation": "35.6269567234", "rating": "1599.35494969", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0625110222387"}, "Lua": {"deviation": "35.4861195437", "rating": "1412.31423116", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.060742828287"}, "Shell": {"deviation": "36.8171697859", "rating": "1603.04217418", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0634973023151"}, "Matlab": {"deviation": "37.4157609202", "rating": "1614.17630042", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0637214813711"}, "Factor": {"deviation": "47.7644999121", "rating": "1439.09850451", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0600562745956"}, "Haxe": {"deviation": "39.8259323518", "rating": "1428.76364565", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0613921824988"}, "Erlang": {"deviation": "37.7027994196", "rating": "1442.80534647", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.060744456845"}, "Forth": {"deviation": "36.8330533371", "rating": "1500.36017107", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0608105492248"}, "Scheme": {"deviation": "37.9618191782", "rating": "1435.70614565", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0634305707336"}, "Objective C": {"deviation": "37.4593651023", "rating": "1520.41893782", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0618310115327"}, "C#": {"deviation": "36.7733694275", "rating": "1570.72737826", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0653157003338"}, "Javascript": {"deviation": "40.1689489611", "rating": "1633.70783572", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0684600732827"}, "Common Lisp": {"deviation": "34.7874780416", "rating": "1345.77879634", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0623928526306"}, "TCL": {"deviation": "37.0860251568", "rating": "1471.9344418", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0617855518403"}, "F#": {"deviation": "35.710353541", "rating": "1291.6092666", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0601848463769"}, "AWK": {"deviation": "36.7931045262", "rating": "1477.03581409", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0611405133209"}, "Ruby": {"deviation": "37.047106132", "rating": "1550.59978648", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0634546759581"}, "Agda": {"deviation": "81.9743184804", "rating": "1206.42251761", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0600609997329"}, "Groovy": {"deviation": "37.4064593576", "rating": "1404.29215963", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0605874510657"}, "C": {"deviation": "39.0989399598", "rating": "1686.03202031", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0630503666531"}, "Mathematica": {"deviation": "35.9779811731", "rating": "1473.4720884", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0612375809015"}, "D": {"deviation": "43.1966642745", "rating": "1576.495004", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0604728101303"}, "O'Caml": {"deviation": "40.5315766701", "rating": "1375.26875671", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0608440870219"}, "Io": {"deviation": "43.8863323397", "rating": "1432.58415053", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0611594477772"}, "J": {"deviation": "50.3002973708", "rating": "1405.34537093", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0601428375076"}, "ELisp": {"deviation": "59.1699535598", "rating": "1596.0590723", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0601280447133"}, "C++": {"deviation": "37.6645676844", "rating": "1698.47715572", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0605534474369"}, "Standard ML": {"deviation": "58.0302225904", "rating": "1351.59301035", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0600226954255"}, "R": {"deviation": "36.8202958093", "rating": "1592.87243596", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0606047169358"}, "Clojure": {"deviation": "36.4066354667", "rating": "1423.49717018", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0606668424559"}, "Prolog": {"deviation": "37.8888783792", "rating": "1328.3171122", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0604193757047"}, "REBOL": {"deviation": "235.132387273", "rating": "1468.55095613", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.059996090501"}, "Fortran": {"deviation": "36.9206793784", "rating": "1550.92945037", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0620296072613"}, "Assembler": {"deviation": "36.7746032436", "rating": "1571.14190365", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0659743675425"}, "Python": {"deviation": "40.6506602616", "rating": "1442.72303856", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0729978864163"}, "Pascal": {"deviation": "36.0735093403", "rating": "1500.77551684", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0644411448059"}, "Haskell": {"deviation": "37.0413181519", "rating": "1403.04273865", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0617506652466"}, "Cobol": {"deviation": "36.651965269", "rating": "1511.75840661", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0618041846789"}, "APL": {"deviation": "60.7059631419", "rating": "1479.79015168", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0607970271732"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.06"}, "Go": {"deviation": "34.2923015972", "rating": "1440.18543899", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0610584548624"}, "Visual Basic": {"deviation": "35.1108511858", "rating": "1599.99812524", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0652935140852"}, "PHP": {"deviation": "36.4623510727", "rating": "1680.77459162", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0619698648981"}, "Mozart-Oz": {"deviation": "82.7405845606", "rating": "1667.09129953", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0601815516784"}, "Smalltalk": {"deviation": "35.8041190272", "rating": "1450.54585854", "ratingsMin": "1206.42251761", "ratingsMax": "1698.47715572", "volatility": "0.0611290184871"}}, "It is easy to debug programs written in this language when it goes wrong": {"Coq": {"deviation": "34.9745418169", "rating": "1567.03693006", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0605626175991"}, "Eiffel": {"deviation": "35.7347667897", "rating": "1720.65081125", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.060190707444"}, "Java": {"deviation": "42.7812560721", "rating": "1759.29562725", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0616759501472"}, "Scala": {"deviation": "37.8427679104", "rating": "1624.30693595", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0634725518036"}, "Delphi": {"deviation": "39.3192002541", "rating": "1579.89853753", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0630577827032"}, "Ada": {"deviation": "35.9391227852", "rating": "1493.08019519", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0683230854122"}, "Perl": {"deviation": "41.8835083646", "rating": "1482.66388222", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0700700609432"}, "Lua": {"deviation": "39.4704463485", "rating": "1451.47778925", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0675247252732"}, "Shell": {"deviation": "37.2622839255", "rating": "1425.11933926", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0626023045292"}, "Matlab": {"deviation": "39.9749047705", "rating": "1527.5134873", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0627550120913"}, "Factor": {"deviation": "41.1909513233", "rating": "1383.41365291", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0603245141989"}, "Haxe": {"deviation": "40.8876549696", "rating": "1511.24347154", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.061376356182"}, "Erlang": {"deviation": "35.2208621825", "rating": "1494.01095881", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0685602016019"}, "Forth": {"deviation": "36.5623705698", "rating": "1286.04577893", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0631124365219"}, "Scheme": {"deviation": "40.0601442145", "rating": "1527.21360349", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0759200816037"}, "Objective C": {"deviation": "40.2394609562", "rating": "1484.65380728", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0656378854278"}, "C#": {"deviation": "42.7806719867", "rating": "1846.53217554", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0600579724853"}, "Javascript": {"deviation": "55.7312052705", "rating": "1445.31255971", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.129396162256"}, "Common Lisp": {"deviation": "38.4132851474", "rating": "1626.35214361", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0736761514817"}, "TCL": {"deviation": "35.8043001282", "rating": "1407.95893345", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.063995156508"}, "F#": {"deviation": "39.3104078181", "rating": "1671.13071386", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0603053923486"}, "AWK": {"deviation": "36.7119302329", "rating": "1424.23749388", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0615032936084"}, "Ruby": {"deviation": "43.7983119121", "rating": "1590.11870942", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.075637514439"}, "Agda": {"deviation": "122.545911009", "rating": "1828.69124395", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0601702443966"}, "Groovy": {"deviation": "39.6713467143", "rating": "1476.99532121", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0668940489943"}, "C": {"deviation": "117.913738176", "rating": "1282.60593378", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "1.185413741"}, "Mathematica": {"deviation": "41.059680962", "rating": "1365.77318505", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0604436546044"}, "D": {"deviation": "35.0725054482", "rating": "1464.97934928", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0640010590473"}, "O'Caml": {"deviation": "36.4306370082", "rating": "1625.86484222", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0613407702995"}, "Io": {"deviation": "34.2718580066", "rating": "1444.11356259", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0615264474068"}, "J": {"deviation": "38.228074157", "rating": "1444.51928157", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0614382251591"}, "ELisp": {"deviation": "35.8250853479", "rating": "1499.90831399", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.065670524053"}, "C++": {"deviation": "64.3052968403", "rating": "1425.99499985", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.180404734097"}, "Standard ML": {"deviation": "35.0281579304", "rating": "1466.23055424", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0656679720522"}, "R": {"deviation": "37.4057672324", "rating": "1374.09867649", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0610609077924"}, "Clojure": {"deviation": "38.9788701516", "rating": "1445.4489654", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0670931938701"}, "Prolog": {"deviation": "38.149192112", "rating": "1334.21983521", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0614126594618"}, "REBOL": {"deviation": "130.643703953", "rating": "1339.46933523", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0600244708253"}, "Fortran": {"deviation": "41.302002821", "rating": "1421.71079917", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.066433423513"}, "Assembler": {"deviation": "41.6732751133", "rating": "1230.55832867", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0607528836398"}, "Python": {"deviation": "43.8472819175", "rating": "1663.39557433", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0682860961789"}, "Pascal": {"deviation": "38.2255895486", "rating": "1491.5443138", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0653248916363"}, "Haskell": {"deviation": "53.8518753167", "rating": "1501.18793734", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.117177532812"}, "Cobol": {"deviation": "38.8811057103", "rating": "1308.2513476", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0609114665523"}, "APL": {"deviation": "34.9497046157", "rating": "1353.17902832", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.06198554074"}, "ActionScript": {"deviation": "131.987622554", "rating": "1267.19980824", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0600521370888"}, "Go": {"deviation": "37.7400521669", "rating": "1504.08555685", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0613565825939"}, "Visual Basic": {"deviation": "41.9573595532", "rating": "1621.71085465", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0724227933728"}, "PHP": {"deviation": "42.8743914064", "rating": "1458.45000835", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0705055201682"}, "Mozart-Oz": {"deviation": "36.4488967379", "rating": "1534.69835784", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.060040483631"}, "Smalltalk": {"deviation": "40.9227565249", "rating": "1843.59392737", "ratingsMin": "1230.55832867", "ratingsMax": "1846.53217554", "volatility": "0.0614242013956"}}, "This language is built on a small core of orthogonal features": {"Coq": {"deviation": "35.6725214423", "rating": "1815.86850695", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0599967244094"}, "Eiffel": {"deviation": "32.4786284742", "rating": "1556.79325097", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0617606777363"}, "Java": {"deviation": "38.8394069267", "rating": "1376.55672288", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0666478675733"}, "Scala": {"deviation": "36.6195869653", "rating": "1445.29682472", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0751464248163"}, "Delphi": {"deviation": "34.1586594281", "rating": "1442.32617153", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0602187673564"}, "Ada": {"deviation": "34.757915171", "rating": "1524.60937011", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0660461476587"}, "Perl": {"deviation": "37.3866404314", "rating": "1268.76275909", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.059768991919"}, "Lua": {"deviation": "35.0451327746", "rating": "1586.65505659", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0617818858102"}, "Shell": {"deviation": "37.6036569979", "rating": "1353.31779253", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.06278864747"}, "Matlab": {"deviation": "36.636682932", "rating": "1358.07773257", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0604461121546"}, "Factor": {"deviation": "34.9483354979", "rating": "1613.18092551", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0608367914627"}, "Haxe": {"deviation": "40.6692519902", "rating": "1528.8795823", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0612865917485"}, "Erlang": {"deviation": "35.9607654964", "rating": "1699.33768044", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0605432176605"}, "Forth": {"deviation": "38.0815607336", "rating": "1760.55185129", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0609002319402"}, "Scheme": {"deviation": "46.7932120384", "rating": "1990.71311456", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0599805970979"}, "Objective C": {"deviation": "34.3058797519", "rating": "1511.65712555", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0635551979726"}, "C#": {"deviation": "36.8952867054", "rating": "1337.3583952", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0601028795437"}, "Javascript": {"deviation": "51.076562982", "rating": "1527.22827369", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.11932271959"}, "Common Lisp": {"deviation": "35.8109799155", "rating": "1578.0980563", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0645931984003"}, "TCL": {"deviation": "34.4245545726", "rating": "1466.22597121", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0679596760325"}, "F#": {"deviation": "35.5621285535", "rating": "1528.80418", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0647645262052"}, "AWK": {"deviation": "38.2550777847", "rating": "1424.6553296", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0753957421599"}, "Ruby": {"deviation": "38.0103667293", "rating": "1493.02584906", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0709458652928"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.06"}, "Groovy": {"deviation": "34.7460962594", "rating": "1300.6037984", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0603217615924"}, "C": {"deviation": "41.9310962489", "rating": "1556.43358326", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0753111164499"}, "Mathematica": {"deviation": "43.5867046009", "rating": "1594.53157886", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0605265501607"}, "D": {"deviation": "33.2969366885", "rating": "1352.51435418", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0609569705125"}, "O'Caml": {"deviation": "35.0548727259", "rating": "1557.67575751", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0654106393656"}, "Io": {"deviation": "39.7485083794", "rating": "1887.4634868", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0600422238714"}, "J": {"deviation": "36.727283998", "rating": "1521.92398998", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0641591918968"}, "ELisp": {"deviation": "35.1516047773", "rating": "1526.47870121", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0645852076048"}, "C++": {"deviation": "39.2903423131", "rating": "1194.54476945", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0601953254052"}, "Standard ML": {"deviation": "36.3670035764", "rating": "1819.59580774", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0604868258852"}, "R": {"deviation": "34.0853298311", "rating": "1331.26516771", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0609882060248"}, "Clojure": {"deviation": "35.4131938188", "rating": "1694.18238334", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0604848753026"}, "Prolog": {"deviation": "36.0201028272", "rating": "1643.74664931", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0613889454526"}, "REBOL": {"deviation": "89.6958172726", "rating": "1667.38203991", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0600901276007"}, "Fortran": {"deviation": "36.1600338267", "rating": "1364.42310489", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0680950479165"}, "Assembler": {"deviation": "49.5224269433", "rating": "1507.50357664", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.130909546668"}, "Python": {"deviation": "46.4444380545", "rating": "1436.39143599", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0867271829584"}, "Pascal": {"deviation": "34.4893085234", "rating": "1530.33756329", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0667916782565"}, "Haskell": {"deviation": "36.2898081627", "rating": "1684.95204584", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0622328235602"}, "Cobol": {"deviation": "35.0721153247", "rating": "1233.60051426", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0611281933087"}, "APL": {"deviation": "33.8107745423", "rating": "1750.4410744", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0616265269923"}, "ActionScript": {"deviation": "138.098257478", "rating": "1430.66628857", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0599873867858"}, "Go": {"deviation": "35.4016583261", "rating": "1539.7275008", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0618830885933"}, "Visual Basic": {"deviation": "35.6696027089", "rating": "1263.11685443", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0599605229119"}, "PHP": {"deviation": "37.681494414", "rating": "1256.43770917", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0596355419411"}, "Mozart-Oz": {"deviation": "31.7633121238", "rating": "1610.6203759", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0628985974856"}, "Smalltalk": {"deviation": "37.9571874219", "rating": "1742.2800755", "ratingsMin": "1194.54476945", "ratingsMax": "1990.71311456", "volatility": "0.0642121922079"}}, "I am sometimes embarrassed to admit to my peers that I know this language": {"Coq": {"deviation": "35.6650942004", "rating": "1339.47421119", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0609831917822"}, "Eiffel": {"deviation": "34.7272371535", "rating": "1468.54121263", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0614890574972"}, "Java": {"deviation": "89.7148861488", "rating": "1615.95735327", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.504971251307"}, "Scala": {"deviation": "38.1410346837", "rating": "1279.49604565", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0600973981858"}, "Delphi": {"deviation": "39.4762329186", "rating": "1705.38724201", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0609151283036"}, "Ada": {"deviation": "34.7756557864", "rating": "1543.16750856", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0631039639616"}, "Perl": {"deviation": "37.9350990971", "rating": "1581.14869355", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0699505576662"}, "Lua": {"deviation": "37.7646219854", "rating": "1434.88346876", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0669491919529"}, "Shell": {"deviation": "37.4144498544", "rating": "1493.39231223", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0633003166714"}, "Matlab": {"deviation": "37.725936165", "rating": "1497.16523217", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0607398881343"}, "Factor": {"deviation": "35.0923319752", "rating": "1393.01313864", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0609982185797"}, "Haxe": {"deviation": "41.7080194513", "rating": "1442.81089173", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0603283027837"}, "Erlang": {"deviation": "34.8532271998", "rating": "1238.02331249", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0620856094335"}, "Forth": {"deviation": "34.030329697", "rating": "1475.72983654", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0655902052835"}, "Scheme": {"deviation": "38.2197648286", "rating": "1254.04577142", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0652024527274"}, "Objective C": {"deviation": "34.8887675621", "rating": "1459.55791989", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0639546053077"}, "C#": {"deviation": "43.5935405562", "rating": "1546.79389968", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0816167170267"}, "Javascript": {"deviation": "44.0919707269", "rating": "1523.17306408", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.090609151183"}, "Common Lisp": {"deviation": "34.5580227143", "rating": "1394.64367921", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0632419377962"}, "TCL": {"deviation": "36.8039590789", "rating": "1744.07050905", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0605116273517"}, "F#": {"deviation": "35.6569406964", "rating": "1262.42272688", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0608987793383"}, "AWK": {"deviation": "36.6749648941", "rating": "1576.55393123", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0651352630689"}, "Ruby": {"deviation": "37.272169195", "rating": "1447.87800481", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0661857328941"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.06"}, "Groovy": {"deviation": "36.7121331352", "rating": "1400.40220948", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0624590802364"}, "C": {"deviation": "39.4817208802", "rating": "1365.76896009", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0653954520044"}, "Mathematica": {"deviation": "37.7440292569", "rating": "1469.66228057", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0603324593014"}, "D": {"deviation": "35.7729025101", "rating": "1341.93390149", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.062084602317"}, "O'Caml": {"deviation": "38.2250212714", "rating": "1185.09151473", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0604693799905"}, "Io": {"deviation": "35.1992171751", "rating": "1442.66990078", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.060346216825"}, "J": {"deviation": "38.7862223448", "rating": "1264.11024063", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0602848085596"}, "ELisp": {"deviation": "36.6559812524", "rating": "1526.78627806", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.062894751795"}, "C++": {"deviation": "50.2014827705", "rating": "1503.33864745", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.114434101852"}, "Standard ML": {"deviation": "33.5924792781", "rating": "1346.75248091", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.060551071511"}, "R": {"deviation": "35.9198580055", "rating": "1394.34217984", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0607412247484"}, "Clojure": {"deviation": "36.1192169826", "rating": "1306.19738803", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0613423086357"}, "Prolog": {"deviation": "36.7498904386", "rating": "1456.00478219", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.069147563872"}, "REBOL": {"deviation": "124.267320076", "rating": "1277.38633491", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0601155125266"}, "Fortran": {"deviation": "37.582732777", "rating": "1684.87221717", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.061987499995"}, "Assembler": {"deviation": "38.5936300067", "rating": "1494.45124288", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0701480943149"}, "Python": {"deviation": "37.7938264022", "rating": "1357.19491232", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0615315707651"}, "Pascal": {"deviation": "35.6184774943", "rating": "1709.05220372", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0606933471349"}, "Haskell": {"deviation": "36.4757402622", "rating": "1235.61553176", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0603825061699"}, "Cobol": {"deviation": "42.789426214", "rating": "1915.67595235", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0600531307089"}, "APL": {"deviation": "33.0388858417", "rating": "1370.58935489", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0619923401567"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.06"}, "Go": {"deviation": "33.9604047557", "rating": "1424.3939704", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0615577394706"}, "Visual Basic": {"deviation": "48.6471157346", "rating": "1975.3560379", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0600501098461"}, "PHP": {"deviation": "44.4337495655", "rating": "1804.5559412", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0603538008542"}, "Mozart-Oz": {"deviation": "33.9083498388", "rating": "1303.75841077", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.0604656437375"}, "Smalltalk": {"deviation": "34.0020373584", "rating": "1339.4091898", "ratingsMin": "1185.09151473", "ratingsMax": "1975.3560379", "volatility": "0.061210287735"}}, "I find this language easy to prototype in": {"Coq": {"deviation": "36.9594328963", "rating": "1365.57969287", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0604534286818"}, "Eiffel": {"deviation": "33.3009237398", "rating": "1396.42292487", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0617160925201"}, "Java": {"deviation": "55.192613762", "rating": "1550.06492037", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.132428110587"}, "Scala": {"deviation": "36.4028501209", "rating": "1620.20718627", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0621503456959"}, "Delphi": {"deviation": "37.8982557339", "rating": "1418.672022", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0643641698915"}, "Ada": {"deviation": "36.6769825926", "rating": "1250.33540005", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0602306970957"}, "Perl": {"deviation": "41.1432794454", "rating": "1539.43055015", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0803415704451"}, "Lua": {"deviation": "35.8249551605", "rating": "1574.06644555", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0655911120903"}, "Shell": {"deviation": "40.1430720006", "rating": "1475.84529785", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0800907983895"}, "Matlab": {"deviation": "42.9253664174", "rating": "1606.70237562", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0620089541469"}, "Factor": {"deviation": "35.6407786196", "rating": "1479.27349848", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0606065759234"}, "Haxe": {"deviation": "41.7497954778", "rating": "1635.2934007", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0603141501938"}, "Erlang": {"deviation": "37.7165214249", "rating": "1461.49597248", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.069593247448"}, "Forth": {"deviation": "36.5846319183", "rating": "1360.78538134", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0613992816074"}, "Scheme": {"deviation": "36.350173823", "rating": "1565.49174132", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0641343005116"}, "Objective C": {"deviation": "36.9735175064", "rating": "1400.70382883", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0628218427484"}, "C#": {"deviation": "42.7690235672", "rating": "1597.47545312", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0855950643421"}, "Javascript": {"deviation": "47.650218832", "rating": "1617.79819433", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0992044638958"}, "Common Lisp": {"deviation": "39.3015786286", "rating": "1681.23302864", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0714963425436"}, "TCL": {"deviation": "38.7295310091", "rating": "1523.04087718", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0681914021298"}, "F#": {"deviation": "37.1255284299", "rating": "1625.62852879", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0635134326098"}, "AWK": {"deviation": "38.0752860264", "rating": "1540.62054734", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0697497159058"}, "Ruby": {"deviation": "41.4494951453", "rating": "1737.59962466", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0597636732474"}, "Agda": {"deviation": "48.8978556573", "rating": "1580.58594415", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0605544131819"}, "Groovy": {"deviation": "38.4665642298", "rating": "1691.39560015", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0614143951085"}, "C": {"deviation": "41.8834487688", "rating": "1236.76195841", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0603589304893"}, "Mathematica": {"deviation": "43.1145048996", "rating": "1615.94816957", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0602948209821"}, "D": {"deviation": "34.8376198428", "rating": "1497.72672347", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0637071587242"}, "O'Caml": {"deviation": "39.0011727251", "rating": "1591.72361714", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0621266164258"}, "Io": {"deviation": "37.9362036322", "rating": "1530.90087309", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0611442501112"}, "J": {"deviation": "40.8951526542", "rating": "1588.5987116", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0611522232857"}, "ELisp": {"deviation": "36.4893796186", "rating": "1479.68552545", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0672966921734"}, "C++": {"deviation": "39.235697339", "rating": "1282.91539289", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0619569312512"}, "Standard ML": {"deviation": "37.5436449314", "rating": "1425.24264013", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0671956832082"}, "R": {"deviation": "37.5437670661", "rating": "1511.45504939", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0629147603721"}, "Clojure": {"deviation": "36.6728028145", "rating": "1706.87735392", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0615295094597"}, "Prolog": {"deviation": "36.5491910417", "rating": "1421.87846764", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0682221718282"}, "REBOL": {"deviation": "85.6651688483", "rating": "1478.57488198", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.05995199684"}, "Fortran": {"deviation": "39.7628795297", "rating": "1183.89482152", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0598765668242"}, "Assembler": {"deviation": "53.8367548413", "rating": "860.873238854", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0598770463862"}, "Python": {"deviation": "41.4543116794", "rating": "1677.17417018", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.05980631595"}, "Pascal": {"deviation": "36.649042968", "rating": "1385.73029663", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0605753900127"}, "Haskell": {"deviation": "42.7411374681", "rating": "1636.03526374", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0855500915298"}, "Cobol": {"deviation": "41.1538342393", "rating": "1104.84922822", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0602852436998"}, "APL": {"deviation": "35.9859792308", "rating": "1574.98759622", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0605538932907"}, "ActionScript": {"deviation": "86.4219159309", "rating": "1750.9740891", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0600405989526"}, "Go": {"deviation": "37.3506330591", "rating": "1556.05496733", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0619889858738"}, "Visual Basic": {"deviation": "39.1516873112", "rating": "1433.86795187", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0683120992068"}, "PHP": {"deviation": "43.0040267782", "rating": "1459.39192378", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0990587658379"}, "Mozart-Oz": {"deviation": "36.0022802714", "rating": "1394.8459578", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0605718402866"}, "Smalltalk": {"deviation": "38.4174177126", "rating": "1649.86262279", "ratingsMin": "860.873238854", "ratingsMax": "1750.9740891", "volatility": "0.0619205624859"}}, "I would use this language for writing programs for an embedded hardware platform": {"Coq": {"deviation": "35.9617948652", "rating": "1365.26398612", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0613507735917"}, "Eiffel": {"deviation": "34.3326196866", "rating": "1441.31690989", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0625501311276"}, "Java": {"deviation": "47.4216127294", "rating": "1693.75279666", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0731181178119"}, "Scala": {"deviation": "37.9685808427", "rating": "1531.96494676", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.063694776087"}, "Delphi": {"deviation": "38.3688806409", "rating": "1324.06489361", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0642224133703"}, "Ada": {"deviation": "36.4728968289", "rating": "1642.02108037", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0610379440257"}, "Perl": {"deviation": "39.7320007037", "rating": "1388.50756817", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0620108653011"}, "Lua": {"deviation": "39.8353466356", "rating": "1543.3404911", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0622979565425"}, "Shell": {"deviation": "41.25116052", "rating": "1319.32663945", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0618868615391"}, "Matlab": {"deviation": "42.313621616", "rating": "1302.47629241", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0606280475411"}, "Factor": {"deviation": "41.6102367903", "rating": "1432.36977991", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0600394868785"}, "Haxe": {"deviation": "40.9179517883", "rating": "1483.45017426", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0610919797877"}, "Erlang": {"deviation": "39.6828570589", "rating": "1571.06957511", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0687574830785"}, "Forth": {"deviation": "41.4062556383", "rating": "1946.65902218", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0603348407287"}, "Scheme": {"deviation": "39.8730839431", "rating": "1568.09020725", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0667858739524"}, "Objective C": {"deviation": "37.556286411", "rating": "1612.5908081", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0625467178569"}, "C#": {"deviation": "40.4452402848", "rating": "1523.28656062", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.071812807307"}, "Javascript": {"deviation": "41.9731469952", "rating": "1457.19265628", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0621338840271"}, "Common Lisp": {"deviation": "42.037102794", "rating": "1540.33533349", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.075308354194"}, "TCL": {"deviation": "37.1384879583", "rating": "1456.77761904", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.063035465712"}, "F#": {"deviation": "39.2058727446", "rating": "1455.07963817", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0616272052896"}, "AWK": {"deviation": "42.712276849", "rating": "1278.87676145", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0600833582154"}, "Ruby": {"deviation": "36.6274287612", "rating": "1393.65429365", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0608550685372"}, "Agda": {"deviation": "62.8447278298", "rating": "1386.95978496", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0600208694277"}, "Groovy": {"deviation": "35.3970483037", "rating": "1309.68660915", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0604489671253"}, "C": {"deviation": "58.634634414", "rating": "2172.20889942", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0595628979122"}, "Mathematica": {"deviation": "43.2286804687", "rating": "1321.80393056", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0603090908403"}, "D": {"deviation": "39.2807156186", "rating": "1766.44518583", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0599993681663"}, "O'Caml": {"deviation": "37.6446334273", "rating": "1580.74725433", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.061370035506"}, "Io": {"deviation": "36.112569615", "rating": "1416.7149783", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0613052473299"}, "J": {"deviation": "45.1366354251", "rating": "1254.92700026", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0600832636867"}, "ELisp": {"deviation": "38.4643659517", "rating": "1207.82424697", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0599925737247"}, "C++": {"deviation": "42.6819156176", "rating": "1780.45736675", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0596315904139"}, "Standard ML": {"deviation": "36.6390679714", "rating": "1523.51767235", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0643372005526"}, "R": {"deviation": "43.9712455087", "rating": "1176.82226281", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0599698770439"}, "Clojure": {"deviation": "36.3819887544", "rating": "1544.40386585", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0646286204566"}, "Prolog": {"deviation": "36.636498072", "rating": "1302.99867529", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0602797686652"}, "REBOL": {"deviation": "147.717297819", "rating": "1196.9300905", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0600628310398"}, "Fortran": {"deviation": "39.8305775274", "rating": "1483.66331042", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0659689779512"}, "Assembler": {"deviation": "43.0376192164", "rating": "1916.24683062", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0598559854475"}, "Python": {"deviation": "46.5336150153", "rating": "1531.9934615", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0827300178874"}, "Pascal": {"deviation": "37.7197024602", "rating": "1424.76768606", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.065930179348"}, "Haskell": {"deviation": "44.7186931973", "rating": "1400.47611047", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0863724851274"}, "Cobol": {"deviation": "39.6138411263", "rating": "1229.8415727", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0599942930401"}, "APL": {"deviation": "38.3220499621", "rating": "1240.51191112", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0602196776587"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.06"}, "Go": {"deviation": "37.3160920462", "rating": "1653.31038458", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0600962794714"}, "Visual Basic": {"deviation": "40.059242041", "rating": "1241.30529903", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0599196579747"}, "PHP": {"deviation": "47.2751999515", "rating": "1194.37124629", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0594964371145"}, "Mozart-Oz": {"deviation": "35.969421769", "rating": "1358.03167766", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0601065357383"}, "Smalltalk": {"deviation": "34.814367346", "rating": "1484.60519775", "ratingsMin": "1176.82226281", "ratingsMax": "2172.20889942", "volatility": "0.0623923027351"}}, "When I write code in this language I can be very sure it is correct": {"Coq": {"deviation": "53.1595832563", "rating": "2178.33294306", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0604005336817"}, "Eiffel": {"deviation": "42.7699223818", "rating": "1851.49721901", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.060068398893"}, "Java": {"deviation": "50.5723116484", "rating": "1596.70845758", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0929687118654"}, "Scala": {"deviation": "37.77793172", "rating": "1578.53814241", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0610411572963"}, "Delphi": {"deviation": "39.9126861384", "rating": "1489.08526703", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0649057520811"}, "Ada": {"deviation": "35.8500904135", "rating": "1676.6530072", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0621178753743"}, "Perl": {"deviation": "40.0997504961", "rating": "1288.78156709", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0601988934696"}, "Lua": {"deviation": "36.4198382663", "rating": "1438.26907176", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0652013472655"}, "Shell": {"deviation": "36.7053043856", "rating": "1302.93776368", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0602287189428"}, "Matlab": {"deviation": "38.460911029", "rating": "1338.59137116", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0605997716739"}, "Factor": {"deviation": "34.9169767305", "rating": "1345.03841401", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0615634123006"}, "Haxe": {"deviation": "37.1700651709", "rating": "1473.51558064", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0603549635251"}, "Erlang": {"deviation": "36.5983986432", "rating": "1551.35064537", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0686405086841"}, "Forth": {"deviation": "33.9819719672", "rating": "1366.95415627", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0629876329139"}, "Scheme": {"deviation": "44.467004566", "rating": "1480.05963219", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0935560068058"}, "Objective C": {"deviation": "37.8500205054", "rating": "1425.48052512", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0637933724346"}, "C#": {"deviation": "43.9696886231", "rating": "1482.62050203", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0686910273593"}, "Javascript": {"deviation": "41.2153087418", "rating": "1377.87824134", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0622869473713"}, "Common Lisp": {"deviation": "43.316350884", "rating": "1496.54759852", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.10036128516"}, "TCL": {"deviation": "34.627932482", "rating": "1384.81566003", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.060559965647"}, "F#": {"deviation": "38.7840761947", "rating": "1744.11469692", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0600143281463"}, "AWK": {"deviation": "38.4302724361", "rating": "1329.03003785", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0661103641561"}, "Ruby": {"deviation": "42.6741591598", "rating": "1463.12571369", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0771324165301"}, "Agda": {"deviation": "79.0863498376", "rating": "2097.8086353", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0603152221036"}, "Groovy": {"deviation": "35.3333816229", "rating": "1364.46777172", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0607393680918"}, "C": {"deviation": "45.1441214592", "rating": "1393.50789229", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0795741166878"}, "Mathematica": {"deviation": "41.1445154561", "rating": "1475.10915738", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.062917632412"}, "D": {"deviation": "36.988154051", "rating": "1640.89427764", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0664631386675"}, "O'Caml": {"deviation": "36.4052411572", "rating": "1662.50010761", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0603806575439"}, "Io": {"deviation": "34.2105251774", "rating": "1433.07373093", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0611939153177"}, "J": {"deviation": "32.4957406757", "rating": "1546.59832374", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0616634156093"}, "ELisp": {"deviation": "35.7797425923", "rating": "1411.39548051", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0647851700274"}, "C++": {"deviation": "41.7968194027", "rating": "1387.8467859", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0697145807262"}, "Standard ML": {"deviation": "37.6007558411", "rating": "1762.48174648", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0617204050746"}, "R": {"deviation": "35.8262214703", "rating": "1494.4970177", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0635644516661"}, "Clojure": {"deviation": "35.642055044", "rating": "1511.56327249", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0631975357928"}, "Prolog": {"deviation": "40.0581388356", "rating": "1367.27676078", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0742943381264"}, "REBOL": {"deviation": "128.014835141", "rating": "1513.34232688", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0599788712321"}, "Fortran": {"deviation": "34.9238089103", "rating": "1409.82666413", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0638789161041"}, "Assembler": {"deviation": "38.6197826131", "rating": "1210.52142124", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0600356142083"}, "Python": {"deviation": "58.6527190761", "rating": "1591.32756573", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.126743210649"}, "Pascal": {"deviation": "38.0293289193", "rating": "1458.05625321", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0671756415759"}, "Haskell": {"deviation": "46.4120898227", "rating": "1934.82640264", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0605743897249"}, "Cobol": {"deviation": "36.9667990745", "rating": "1278.70045648", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0617863650138"}, "APL": {"deviation": "34.2804283463", "rating": "1577.05103301", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0645733192787"}, "ActionScript": {"deviation": "126.828273623", "rating": "1479.65064018", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0599787868779"}, "Go": {"deviation": "34.7135901183", "rating": "1541.78712953", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0621800381251"}, "Visual Basic": {"deviation": "40.4533872923", "rating": "1258.58888605", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0620351221526"}, "PHP": {"deviation": "38.4616794627", "rating": "1318.04643185", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0615077652777"}, "Mozart-Oz": {"deviation": "32.2311042974", "rating": "1441.44738761", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0638241219632"}, "Smalltalk": {"deviation": "38.0017769176", "rating": "1447.71328844", "ratingsMin": "1210.52142124", "ratingsMax": "2178.33294306", "volatility": "0.0705883781429"}}, "This language would be good for teaching children to write software": {"Coq": {"deviation": "53.2066106769", "rating": "1192.8122576", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0603649994438"}, "Eiffel": {"deviation": "43.7348807831", "rating": "1520.93506898", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0606657399224"}, "Java": {"deviation": "43.8261364805", "rating": "1467.29379397", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.08264738625"}, "Scala": {"deviation": "35.6435360096", "rating": "1493.21803412", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.064827226298"}, "Delphi": {"deviation": "38.7911205759", "rating": "1600.14645497", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0636269188739"}, "Ada": {"deviation": "35.0897096279", "rating": "1425.48138441", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0614943513051"}, "Perl": {"deviation": "36.83007334", "rating": "1460.22644402", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0613884763977"}, "Lua": {"deviation": "44.0536584789", "rating": "1814.23305546", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0606346004587"}, "Shell": {"deviation": "37.4053652803", "rating": "1319.87640311", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0626243722809"}, "Matlab": {"deviation": "40.0262266443", "rating": "1425.68818866", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0640964081204"}, "Factor": {"deviation": "39.5945352826", "rating": "1530.71955949", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0608917096152"}, "Haxe": {"deviation": "43.3754817414", "rating": "1549.3769531", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0601126850843"}, "Erlang": {"deviation": "36.4890261769", "rating": "1325.86320792", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0614953923724"}, "Forth": {"deviation": "35.797955627", "rating": "1517.66568741", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0636092021692"}, "Scheme": {"deviation": "40.0527846398", "rating": "1877.33822062", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0600995939126"}, "Objective C": {"deviation": "39.3789727069", "rating": "1290.90015361", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0599004840121"}, "C#": {"deviation": "42.344426887", "rating": "1560.19441468", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0702190030736"}, "Javascript": {"deviation": "40.3867817444", "rating": "1513.30895753", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0726340514788"}, "Common Lisp": {"deviation": "37.846618413", "rating": "1568.76777667", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0700017951707"}, "TCL": {"deviation": "36.0057752641", "rating": "1462.43928369", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0613449355866"}, "F#": {"deviation": "35.0019058193", "rating": "1409.2583671", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0616616134977"}, "AWK": {"deviation": "39.5933324331", "rating": "1239.06388935", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0602198871098"}, "Ruby": {"deviation": "39.5192474847", "rating": "1793.71955177", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0601707381343"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.06"}, "Groovy": {"deviation": "35.1702242577", "rating": "1578.46736097", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.061085989916"}, "C": {"deviation": "43.0374746579", "rating": "1456.94509413", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0695067993614"}, "Mathematica": {"deviation": "37.2540548148", "rating": "1511.07520125", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0617579287699"}, "D": {"deviation": "34.0853925433", "rating": "1459.68116354", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0613775925303"}, "O'Caml": {"deviation": "34.6516770207", "rating": "1389.62374987", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0617558538102"}, "Io": {"deviation": "41.0158409604", "rating": "1617.71051912", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0603705470553"}, "J": {"deviation": "53.1850748195", "rating": "1471.6667681", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0600543353049"}, "ELisp": {"deviation": "35.4240092772", "rating": "1369.21022307", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0601667682645"}, "C++": {"deviation": "43.1391535158", "rating": "1227.68876125", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0597639173146"}, "Standard ML": {"deviation": "35.623399795", "rating": "1507.39695981", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0611698873842"}, "R": {"deviation": "40.5056496448", "rating": "1346.7641338", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0601869976131"}, "Clojure": {"deviation": "35.8181294799", "rating": "1584.7685731", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0606766156538"}, "Prolog": {"deviation": "34.955489292", "rating": "1334.75960236", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0631880832975"}, "REBOL": {"deviation": "89.594068701", "rating": "1531.63657506", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0601539888701"}, "Fortran": {"deviation": "37.666493749", "rating": "1252.17869179", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0599666775239"}, "Assembler": {"deviation": "38.556951083", "rating": "1318.97239837", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0605096204377"}, "Python": {"deviation": "43.6112628481", "rating": "1780.40928636", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0598082787681"}, "Pascal": {"deviation": "39.1378602899", "rating": "1696.43813918", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.067531206733"}, "Haskell": {"deviation": "41.6613520373", "rating": "1552.63674424", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0780425873184"}, "Cobol": {"deviation": "37.6960624275", "rating": "1200.61423276", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0602556328307"}, "APL": {"deviation": "45.328864794", "rating": "1119.95332232", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0606409395022"}, "ActionScript": {"deviation": "66.9672100228", "rating": "1495.91088956", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0599763765312"}, "Go": {"deviation": "35.9788217367", "rating": "1456.7259471", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.061477663951"}, "Visual Basic": {"deviation": "41.5996841218", "rating": "1592.35524004", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0744584862014"}, "PHP": {"deviation": "41.166415891", "rating": "1446.22888345", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0736953335427"}, "Mozart-Oz": {"deviation": "54.0668189906", "rating": "1476.82645819", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.06046313369"}, "Smalltalk": {"deviation": "41.336165593", "rating": "1836.51327033", "ratingsMin": "1119.95332232", "ratingsMax": "1877.33822062", "volatility": "0.0604014813029"}}, "There are many good open-source tools for this language": {"Coq": {"deviation": "36.6261404764", "rating": "1454.13088742", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0643601716932"}, "Eiffel": {"deviation": "35.5930528854", "rating": "1352.62064404", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.064776384596"}, "Java": {"deviation": "41.7348347122", "rating": "1909.02809322", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0595428304398"}, "Scala": {"deviation": "39.7103853584", "rating": "1634.47404897", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0655219548055"}, "Delphi": {"deviation": "43.3638223441", "rating": "1242.47028698", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0626383905038"}, "Ada": {"deviation": "38.2262783939", "rating": "1384.22151907", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0615833681059"}, "Perl": {"deviation": "36.4208553843", "rating": "1670.88527258", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.060811619779"}, "Lua": {"deviation": "43.621438982", "rating": "1465.84911391", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0635725869904"}, "Shell": {"deviation": "41.0147817142", "rating": "1606.56632565", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0738403932239"}, "Matlab": {"deviation": "41.256027497", "rating": "1367.88109748", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.060423762432"}, "Factor": {"deviation": "37.7523952431", "rating": "1375.37812808", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0667026839432"}, "Haxe": {"deviation": "39.3846216935", "rating": "1551.69212572", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0610180414813"}, "Erlang": {"deviation": "37.6381186662", "rating": "1486.66890468", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0656130476791"}, "Forth": {"deviation": "39.1044754897", "rating": "1273.89950086", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0604233390237"}, "Scheme": {"deviation": "41.9170384944", "rating": "1512.9524963", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0707899011918"}, "Objective C": {"deviation": "41.2227630813", "rating": "1414.64745638", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0668648342528"}, "C#": {"deviation": "45.601663387", "rating": "1495.28237042", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0781649005457"}, "Javascript": {"deviation": "41.5906382614", "rating": "1730.71021199", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0628231763494"}, "Common Lisp": {"deviation": "42.6899436155", "rating": "1461.41976044", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.074749389538"}, "TCL": {"deviation": "37.8973675447", "rating": "1397.87361809", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0643648182072"}, "F#": {"deviation": "39.8903333228", "rating": "1328.54805483", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0605737031264"}, "AWK": {"deviation": "41.0113466725", "rating": "1354.52214922", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0629948303261"}, "Ruby": {"deviation": "38.7219988768", "rating": "1724.24000922", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0599739514609"}, "Agda": {"deviation": "44.5871339185", "rating": "1244.43297793", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0600188934317"}, "Groovy": {"deviation": "37.4110023038", "rating": "1612.28036733", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0621086444587"}, "C": {"deviation": "41.9563356302", "rating": "1784.0329542", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0602006726468"}, "Mathematica": {"deviation": "44.150860531", "rating": "1175.46269199", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0600198840165"}, "D": {"deviation": "39.9435821041", "rating": "1355.75395068", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0608773148984"}, "O'Caml": {"deviation": "39.8853871988", "rating": "1577.12628794", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0655232243334"}, "Io": {"deviation": "35.3627230027", "rating": "1359.74067869", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0638526188758"}, "J": {"deviation": "37.9858959963", "rating": "1460.80162131", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0627772001535"}, "ELisp": {"deviation": "35.1636542545", "rating": "1635.13440852", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0630989300892"}, "C++": {"deviation": "40.6882234169", "rating": "1770.02922061", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0603772370239"}, "Standard ML": {"deviation": "34.9731818408", "rating": "1470.70342466", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0620871575723"}, "R": {"deviation": "39.5857708045", "rating": "1589.24932076", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0648755674983"}, "Clojure": {"deviation": "37.9769505169", "rating": "1738.52005036", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0646841036122"}, "Prolog": {"deviation": "39.2251614864", "rating": "1398.9017655", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0609849197363"}, "REBOL": {"deviation": "89.6228618034", "rating": "1461.47875431", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0600190050214"}, "Fortran": {"deviation": "40.7901720872", "rating": "1371.90559646", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0620295367877"}, "Assembler": {"deviation": "42.7558253332", "rating": "1436.24068547", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.069003681229"}, "Python": {"deviation": "41.2457526275", "rating": "1841.11897561", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.060577130044"}, "Pascal": {"deviation": "41.8495182273", "rating": "1375.49923973", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0602404648951"}, "Haskell": {"deviation": "40.6669531556", "rating": "1646.00248552", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0673933196469"}, "Cobol": {"deviation": "42.8243370116", "rating": "1204.1615531", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0642850437447"}, "APL": {"deviation": "35.5508879009", "rating": "1323.49250435", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0627320961143"}, "ActionScript": {"deviation": "96.4636843539", "rating": "1411.98605143", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0600400927402"}, "Go": {"deviation": "38.9203711885", "rating": "1509.12077656", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.06621495872"}, "Visual Basic": {"deviation": "46.2344405265", "rating": "1302.13020157", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0606178640068"}, "PHP": {"deviation": "41.3460509873", "rating": "1650.68025317", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0663121436855"}, "Mozart-Oz": {"deviation": "32.4159625106", "rating": "1362.33569565", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.0605169814863"}, "Smalltalk": {"deviation": "36.2161998471", "rating": "1580.58630051", "ratingsMin": "1175.46269199", "ratingsMax": "1909.02809322", "volatility": "0.068348809445"}}, "Libraries in this language tend to be well documented.": {"Coq": {"deviation": "37.7698259541", "rating": "1399.43110992", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0605430323011"}, "Eiffel": {"deviation": "34.8885215563", "rating": "1484.82611909", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0616012602764"}, "Java": {"deviation": "44.8150834859", "rating": "1882.72532322", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0595221721454"}, "Scala": {"deviation": "37.2628609774", "rating": "1636.23259524", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0619775300423"}, "Delphi": {"deviation": "38.8738713894", "rating": "1564.04748395", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0656497831573"}, "Ada": {"deviation": "35.6873898402", "rating": "1518.16500268", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0626744838673"}, "Perl": {"deviation": "39.2733877723", "rating": "1607.95182895", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0634490377636"}, "Lua": {"deviation": "37.9661602966", "rating": "1464.40474123", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0639209959877"}, "Shell": {"deviation": "40.5992732286", "rating": "1365.40352585", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0608166777618"}, "Matlab": {"deviation": "40.1521808431", "rating": "1585.07049198", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0639958538658"}, "Factor": {"deviation": "45.4436317581", "rating": "1449.55833359", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0604075020364"}, "Haxe": {"deviation": "39.1163316591", "rating": "1459.23484622", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0602724717895"}, "Erlang": {"deviation": "37.712457076", "rating": "1456.3562209", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0626418864097"}, "Forth": {"deviation": "39.9099208817", "rating": "1177.43010287", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060076724316"}, "Scheme": {"deviation": "43.2105745838", "rating": "1432.65289841", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0656570498214"}, "Objective C": {"deviation": "37.392854738", "rating": "1650.43852018", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0605096081492"}, "C#": {"deviation": "41.6660309269", "rating": "1856.72395653", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060182711986"}, "Javascript": {"deviation": "44.0353747366", "rating": "1475.55393598", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0845317039836"}, "Common Lisp": {"deviation": "38.1882382268", "rating": "1496.34504491", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0699715195554"}, "TCL": {"deviation": "36.3279004611", "rating": "1450.10837556", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0629248614597"}, "F#": {"deviation": "35.9157948599", "rating": "1595.98223587", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0633670037161"}, "AWK": {"deviation": "39.2979856141", "rating": "1250.53165982", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060473320681"}, "Ruby": {"deviation": "41.1398310459", "rating": "1691.40033718", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0621565437803"}, "Agda": {"deviation": "62.6895234783", "rating": "1270.47767514", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0600014945603"}, "Groovy": {"deviation": "37.8007698887", "rating": "1549.13323629", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0617652252522"}, "C": {"deviation": "44.7824232528", "rating": "1561.78051052", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0730912148373"}, "Mathematica": {"deviation": "34.9800595683", "rating": "1608.26305709", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0612312025651"}, "D": {"deviation": "34.8586023764", "rating": "1376.85421766", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0603523923209"}, "O'Caml": {"deviation": "36.0052462955", "rating": "1508.97588026", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.062311559112"}, "Io": {"deviation": "43.7964890111", "rating": "1350.73553941", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0600479366356"}, "J": {"deviation": "49.290675836", "rating": "1403.21656082", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060492975927"}, "ELisp": {"deviation": "35.7643232066", "rating": "1622.872451", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060644530229"}, "C++": {"deviation": "41.5398250695", "rating": "1570.20118217", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.068856323508"}, "Standard ML": {"deviation": "37.3408779385", "rating": "1282.78761384", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0602358239094"}, "R": {"deviation": "33.676713882", "rating": "1495.4871117", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0625319784932"}, "Clojure": {"deviation": "35.6503922577", "rating": "1519.40817355", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0612840981121"}, "Prolog": {"deviation": "39.052425521", "rating": "1301.07925143", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0602249761511"}, "REBOL": {"deviation": "99.6022298241", "rating": "1437.00983286", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060060826691"}, "Fortran": {"deviation": "37.5725704845", "rating": "1333.07056915", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0627410275573"}, "Assembler": {"deviation": "42.300854585", "rating": "1181.78935804", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060052038961"}, "Python": {"deviation": "40.6671388058", "rating": "1731.48868998", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0597218466506"}, "Pascal": {"deviation": "39.5832008274", "rating": "1469.74445463", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0634501536104"}, "Haskell": {"deviation": "38.7050413126", "rating": "1676.48788048", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0622779240396"}, "Cobol": {"deviation": "38.195626425", "rating": "1330.77897521", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0603734256217"}, "APL": {"deviation": "50.7665087328", "rating": "1201.95743365", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0600277471006"}, "ActionScript": {"deviation": "62.2981254929", "rating": "1311.43276166", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.060032511309"}, "Go": {"deviation": "36.0036503657", "rating": "1505.32943436", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0626521322657"}, "Visual Basic": {"deviation": "42.9009349406", "rating": "1560.38149325", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0743647128155"}, "PHP": {"deviation": "41.5118754893", "rating": "1564.61470917", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0724875993811"}, "Mozart-Oz": {"deviation": "42.5751709618", "rating": "1398.52777328", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0599773603225"}, "Smalltalk": {"deviation": "37.3879999949", "rating": "1515.58805409", "ratingsMin": "1177.43010287", "ratingsMax": "1882.72532322", "volatility": "0.0616397236133"}}, "I enjoy playing with this language but would never use it for \"real code\"": {"Coq": {"deviation": "39.9712121967", "rating": "1487.73482011", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0600389228824"}, "Eiffel": {"deviation": "31.4713050948", "rating": "1644.52195459", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0649143481109"}, "Java": {"deviation": "38.3414626348", "rating": "1310.54725658", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0608227852876"}, "Scala": {"deviation": "35.4466951436", "rating": "1389.66698804", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0624611478703"}, "Delphi": {"deviation": "33.3599414298", "rating": "1468.76813976", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0621595294853"}, "Ada": {"deviation": "34.1150732846", "rating": "1378.27837989", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0626911830346"}, "Perl": {"deviation": "40.125377976", "rating": "1459.18912185", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0767143912463"}, "Lua": {"deviation": "37.07790105", "rating": "1499.02767434", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0690809874692"}, "Shell": {"deviation": "37.6523069861", "rating": "1456.62616458", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0729885919161"}, "Matlab": {"deviation": "38.2599142681", "rating": "1616.73392996", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0608242937015"}, "Factor": {"deviation": "40.9510337113", "rating": "1715.2790591", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0605307429011"}, "Haxe": {"deviation": "37.0800195577", "rating": "1390.47970523", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0617657555662"}, "Erlang": {"deviation": "36.1909182423", "rating": "1537.47466483", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0708086267599"}, "Forth": {"deviation": "33.0632402644", "rating": "1541.4438624", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0608155376889"}, "Scheme": {"deviation": "39.0022102878", "rating": "1659.49283028", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0689286258243"}, "Objective C": {"deviation": "36.0279219291", "rating": "1384.45095278", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0612805317045"}, "C#": {"deviation": "39.9238612518", "rating": "1230.7617947", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0601994096965"}, "Javascript": {"deviation": "41.621178638", "rating": "1450.08927472", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0800728709245"}, "Common Lisp": {"deviation": "40.0468480411", "rating": "1570.93010118", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0858860226041"}, "TCL": {"deviation": "34.8794125623", "rating": "1546.35975008", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0665147684175"}, "F#": {"deviation": "36.891778522", "rating": "1465.74061703", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0633752463131"}, "AWK": {"deviation": "35.4418037537", "rating": "1547.57159959", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0639588104577"}, "Ruby": {"deviation": "39.4972370734", "rating": "1538.53111259", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0806492507724"}, "Agda": {"deviation": "108.93580355", "rating": "1103.15914981", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0604247168332"}, "Groovy": {"deviation": "34.8459810221", "rating": "1478.55031737", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0638171911055"}, "C": {"deviation": "39.4960495979", "rating": "1258.83877077", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0613246758926"}, "Mathematica": {"deviation": "39.5368976811", "rating": "1628.31964664", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.060151083669"}, "D": {"deviation": "31.8536636289", "rating": "1532.24973212", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0655430265853"}, "O'Caml": {"deviation": "36.6787749474", "rating": "1454.50351279", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0714413118057"}, "Io": {"deviation": "36.5542504572", "rating": "1592.09231412", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0600444617989"}, "J": {"deviation": "38.021651927", "rating": "1675.62196589", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0601504200304"}, "ELisp": {"deviation": "33.7548788638", "rating": "1694.36725272", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0609579366783"}, "C++": {"deviation": "39.5549271058", "rating": "1313.12168371", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0625508773307"}, "Standard ML": {"deviation": "34.9893934689", "rating": "1566.97063825", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.061536672628"}, "R": {"deviation": "35.1702583672", "rating": "1583.8987233", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0624341256613"}, "Clojure": {"deviation": "36.3898903044", "rating": "1517.92984048", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0681406426749"}, "Prolog": {"deviation": "36.2712352726", "rating": "1605.8914705", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.060404009823"}, "REBOL": {"deviation": "208.815654681", "rating": "1684.588262", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0600012668268"}, "Fortran": {"deviation": "34.7338694246", "rating": "1476.39785546", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0626663463326"}, "Assembler": {"deviation": "44.5303442306", "rating": "1604.84244821", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0830290078432"}, "Python": {"deviation": "39.8460863822", "rating": "1336.36914362", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.064863527941"}, "Pascal": {"deviation": "37.8977251782", "rating": "1626.86075787", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0643965908781"}, "Haskell": {"deviation": "50.3128211456", "rating": "1489.95263449", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.104873890256"}, "Cobol": {"deviation": "34.2804494232", "rating": "1538.93822853", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0654398214178"}, "APL": {"deviation": "34.7773064816", "rating": "1628.3905479", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0606177014617"}, "ActionScript": {"deviation": "96.4448924682", "rating": "1562.70962751", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0600542446541"}, "Go": {"deviation": "33.2608228954", "rating": "1392.48712997", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0632501776893"}, "Visual Basic": {"deviation": "40.5006757071", "rating": "1473.17665671", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0742887576671"}, "PHP": {"deviation": "40.676095352", "rating": "1388.27635476", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0708228111195"}, "Mozart-Oz": {"deviation": "36.1110796656", "rating": "1635.18049258", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0605915123686"}, "Smalltalk": {"deviation": "33.7424078497", "rating": "1439.48729725", "ratingsMin": "1103.15914981", "ratingsMax": "1715.2790591", "volatility": "0.0692392953373"}}, "Code written in this language is very readable": {"Coq": {"deviation": "32.143437483", "rating": "1460.39633207", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0613085059743"}, "Eiffel": {"deviation": "35.8349749645", "rating": "1684.67005874", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0602868207311"}, "Java": {"deviation": "64.0522036889", "rating": "1446.26262049", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.18471464879"}, "Scala": {"deviation": "44.4194036104", "rating": "1569.65310021", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0689090153603"}, "Delphi": {"deviation": "36.9475185972", "rating": "1445.64132962", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0656024171604"}, "Ada": {"deviation": "36.4160720085", "rating": "1510.09694734", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.069565693143"}, "Perl": {"deviation": "38.905233067", "rating": "1226.38993245", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0599533837781"}, "Lua": {"deviation": "36.5914652645", "rating": "1474.20649456", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0670585695927"}, "Shell": {"deviation": "36.6739047466", "rating": "1280.53494603", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0602422268469"}, "Matlab": {"deviation": "38.4324171125", "rating": "1440.99515502", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0639323072157"}, "Factor": {"deviation": "38.4033575286", "rating": "1299.72541715", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0603974333899"}, "Haxe": {"deviation": "39.666045231", "rating": "1708.39627298", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0599758511305"}, "Erlang": {"deviation": "43.2129780009", "rating": "1433.80869554", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0825830971865"}, "Forth": {"deviation": "35.4001316887", "rating": "1287.37627206", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0610590252626"}, "Scheme": {"deviation": "52.1713821073", "rating": "1629.61792748", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.116465447476"}, "Objective C": {"deviation": "37.9164859873", "rating": "1448.00989692", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0717635454139"}, "C#": {"deviation": "41.1006986093", "rating": "1535.33537071", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0688516339935"}, "Javascript": {"deviation": "53.4546481721", "rating": "1339.45585486", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.121129616149"}, "Common Lisp": {"deviation": "47.1385984824", "rating": "1549.71168404", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.10393648124"}, "TCL": {"deviation": "35.6175347454", "rating": "1462.51159285", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0621349092527"}, "F#": {"deviation": "36.5537143627", "rating": "1625.21052319", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0613658385084"}, "AWK": {"deviation": "36.1872733514", "rating": "1418.96497551", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0629147535673"}, "Ruby": {"deviation": "39.234280425", "rating": "1633.65967654", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0634199832873"}, "Agda": {"deviation": "83.8699392228", "rating": "1434.10277334", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0600667040571"}, "Groovy": {"deviation": "39.0931664073", "rating": "1551.83142726", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0631445435064"}, "C": {"deviation": "43.0116311388", "rating": "1442.29667223", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0757121758907"}, "Mathematica": {"deviation": "38.4553473981", "rating": "1426.3496187", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0610260902931"}, "D": {"deviation": "32.4809695915", "rating": "1521.42944731", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0637253687614"}, "O'Caml": {"deviation": "37.9969288957", "rating": "1487.46662673", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0690084741422"}, "Io": {"deviation": "34.6384062145", "rating": "1497.61022412", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0606656822293"}, "J": {"deviation": "37.5264176898", "rating": "1508.58761831", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0636065151524"}, "ELisp": {"deviation": "35.2362804448", "rating": "1447.52123268", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0615138020923"}, "C++": {"deviation": "40.6890151099", "rating": "1316.74045092", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0615675118288"}, "Standard ML": {"deviation": "35.5983557366", "rating": "1533.83691273", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0612488346253"}, "R": {"deviation": "33.7435241532", "rating": "1477.45698546", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0624198892741"}, "Clojure": {"deviation": "39.0572654478", "rating": "1662.30954843", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0655367387999"}, "Prolog": {"deviation": "40.4027292435", "rating": "1352.81540769", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0687015429174"}, "REBOL": {"deviation": "51.7614685235", "rating": "1346.01820673", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0600753658723"}, "Fortran": {"deviation": "38.4646798164", "rating": "1381.23703227", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0614309393329"}, "Assembler": {"deviation": "51.3080266974", "rating": "933.671034449", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0598170794608"}, "Python": {"deviation": "47.8073701288", "rating": "1903.57850515", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0604361425854"}, "Pascal": {"deviation": "35.4189144873", "rating": "1495.95946857", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0685123607445"}, "Haskell": {"deviation": "42.9407017875", "rating": "1586.45448565", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0755819255292"}, "Cobol": {"deviation": "36.1899105958", "rating": "1500.83942074", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0677931436398"}, "APL": {"deviation": "33.1805845035", "rating": "1281.68420788", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.061062220136"}, "ActionScript": {"deviation": "65.3657435158", "rating": "1468.30447296", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0600394802806"}, "Go": {"deviation": "32.4251698419", "rating": "1439.04725499", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0624406854226"}, "Visual Basic": {"deviation": "39.3621468134", "rating": "1464.60252681", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0682516542214"}, "PHP": {"deviation": "39.240278882", "rating": "1475.75960496", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0663931927265"}, "Mozart-Oz": {"deviation": "33.8758500733", "rating": "1279.62873779", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.0602963238316"}, "Smalltalk": {"deviation": "38.5408834649", "rating": "1699.40758857", "ratingsMin": "933.671034449", "ratingsMax": "1903.57850515", "volatility": "0.067085192685"}}, "This language has a niche outside of which I would not use it": {"Coq": {"deviation": "37.966308425", "rating": "1742.33582886", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0600558548069"}, "Eiffel": {"deviation": "35.9167871854", "rating": "1373.5746972", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0608861542349"}, "Java": {"deviation": "39.8407625527", "rating": "1254.47541735", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0604862229717"}, "Scala": {"deviation": "40.2585269383", "rating": "1176.32448119", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0603774979612"}, "Delphi": {"deviation": "40.1048488034", "rating": "1531.35773931", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0638389308773"}, "Ada": {"deviation": "35.4580324759", "rating": "1497.1993255", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0656100344244"}, "Perl": {"deviation": "45.8091943961", "rating": "1526.07390239", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0926253448815"}, "Lua": {"deviation": "40.0701692193", "rating": "1527.93077137", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.074004896531"}, "Shell": {"deviation": "39.4479201467", "rating": "1608.28532524", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0614806717556"}, "Matlab": {"deviation": "41.9161172715", "rating": "1788.5482656", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0599412023952"}, "Factor": {"deviation": "32.8691915969", "rating": "1448.50953755", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0612760359219"}, "Haxe": {"deviation": "38.198251473", "rating": "1477.56569768", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0604476307088"}, "Erlang": {"deviation": "40.6210428438", "rating": "1621.46917865", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0668832795288"}, "Forth": {"deviation": "36.8825406181", "rating": "1600.258215", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0614873238194"}, "Scheme": {"deviation": "40.4835822332", "rating": "1376.19438891", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0708685776012"}, "Objective C": {"deviation": "40.0438158345", "rating": "1559.07298263", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0679679241994"}, "C#": {"deviation": "40.1815195233", "rating": "1329.73872332", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0605844789333"}, "Javascript": {"deviation": "45.7351742066", "rating": "1616.43620659", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0824804243467"}, "Common Lisp": {"deviation": "39.4483878602", "rating": "1374.68703051", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0627216738737"}, "TCL": {"deviation": "34.7348045542", "rating": "1689.60637635", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0603040758298"}, "F#": {"deviation": "36.5349105166", "rating": "1331.53061127", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0611873587371"}, "AWK": {"deviation": "39.3912627147", "rating": "1777.15791761", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0602294074045"}, "Ruby": {"deviation": "40.3908286492", "rating": "1351.69450361", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0623513951934"}, "Agda": {"deviation": "178.136113026", "rating": "1676.1185106", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0600029946068"}, "Groovy": {"deviation": "38.4433395521", "rating": "1430.01468268", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0625348890872"}, "C": {"deviation": "43.4819367545", "rating": "1403.84269865", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0773295498647"}, "Mathematica": {"deviation": "43.4994173195", "rating": "1778.13929926", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0601145268766"}, "D": {"deviation": "36.8161183359", "rating": "1379.4134036", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0602714654063"}, "O'Caml": {"deviation": "34.0042637139", "rating": "1362.55208373", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0613978790574"}, "Io": {"deviation": "38.0653302257", "rating": "1470.9371941", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0614662879919"}, "J": {"deviation": "38.4095118334", "rating": "1529.45851792", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.061203315811"}, "ELisp": {"deviation": "39.5477552608", "rating": "1745.27424445", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0602546965298"}, "C++": {"deviation": "40.5607077741", "rating": "1361.12310691", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0646952909941"}, "Standard ML": {"deviation": "35.3965472605", "rating": "1426.09089372", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0653727819101"}, "R": {"deviation": "39.0491279637", "rating": "1722.87831649", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0600352562074"}, "Clojure": {"deviation": "36.1227729237", "rating": "1311.06376836", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0602406093591"}, "Prolog": {"deviation": "38.6376195728", "rating": "1766.3267714", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0603293263496"}, "REBOL": {"deviation": "92.0893113238", "rating": "1178.72282698", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0605384898759"}, "Fortran": {"deviation": "36.8980568619", "rating": "1644.07609623", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0604180175432"}, "Assembler": {"deviation": "43.1691841465", "rating": "1830.46596495", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.061077781491"}, "Python": {"deviation": "40.6302439754", "rating": "1185.68291582", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0594916015736"}, "Pascal": {"deviation": "37.1301546375", "rating": "1490.85351336", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0662110650193"}, "Haskell": {"deviation": "39.4295642876", "rating": "1299.05585224", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0645155330913"}, "Cobol": {"deviation": "38.8065745534", "rating": "1758.93184484", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0603093669576"}, "APL": {"deviation": "36.5195079496", "rating": "1765.99408161", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0601386242584"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.06"}, "Go": {"deviation": "37.1525835682", "rating": "1450.92443527", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.061561091329"}, "Visual Basic": {"deviation": "39.1694056769", "rating": "1590.09398249", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0624817163787"}, "PHP": {"deviation": "43.2793047735", "rating": "1771.06651405", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0629254562682"}, "Mozart-Oz": {"deviation": "35.0505587456", "rating": "1565.0187593", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0620281777333"}, "Smalltalk": {"deviation": "37.3516470438", "rating": "1314.69068103", "ratingsMin": "1176.32448119", "ratingsMax": "1830.46596495", "volatility": "0.0652172674399"}}, "I would recommend most programmers learn this language regardless of whether they have a specific need for it": {"Coq": {"deviation": "36.1157074922", "rating": "1717.3938095", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0611471055719"}, "Eiffel": {"deviation": "32.8954739087", "rating": "1515.79297724", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.06155471851"}, "Java": {"deviation": "63.2708923652", "rating": "1560.43431181", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.17034324212"}, "Scala": {"deviation": "34.715243926", "rating": "1665.35789738", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0599716914436"}, "Delphi": {"deviation": "38.1579824718", "rating": "1330.21104349", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0602544721474"}, "Ada": {"deviation": "34.4148906517", "rating": "1468.30316994", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0649933412809"}, "Perl": {"deviation": "41.0596034257", "rating": "1349.97324875", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0739215016542"}, "Lua": {"deviation": "38.3289839288", "rating": "1579.1558278", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0648616490573"}, "Shell": {"deviation": "44.4169497391", "rating": "1536.9491621", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0830838639011"}, "Matlab": {"deviation": "40.1981594523", "rating": "1421.07907238", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0625850543232"}, "Factor": {"deviation": "38.1498593721", "rating": "1695.39504462", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0610640311531"}, "Haxe": {"deviation": "39.2294814542", "rating": "1479.15343796", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0609637710488"}, "Erlang": {"deviation": "35.1983029712", "rating": "1537.94912603", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0608167883627"}, "Forth": {"deviation": "36.1823598991", "rating": "1620.87927392", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0671038686868"}, "Scheme": {"deviation": "37.5969776745", "rating": "1682.88725846", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0609830660593"}, "Objective C": {"deviation": "38.9257655702", "rating": "1368.82123589", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0600726542455"}, "C#": {"deviation": "38.739494578", "rating": "1527.18903718", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0701728280028"}, "Javascript": {"deviation": "43.5169553017", "rating": "1638.04084123", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.08688045042"}, "Common Lisp": {"deviation": "36.1142963354", "rating": "1669.91807405", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0621443022233"}, "TCL": {"deviation": "37.1200784143", "rating": "1324.5514218", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0613062135455"}, "F#": {"deviation": "35.5784342584", "rating": "1521.13926072", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0644233331742"}, "AWK": {"deviation": "35.6366158431", "rating": "1407.21569708", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0643013728951"}, "Ruby": {"deviation": "37.3013588647", "rating": "1666.95558271", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0670130572661"}, "Agda": {"deviation": "46.142406245", "rating": "1654.56855023", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0611001916102"}, "Groovy": {"deviation": "36.0011331008", "rating": "1384.37331827", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0618129286607"}, "C": {"deviation": "39.4200070422", "rating": "1736.79267879", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0621061048818"}, "Mathematica": {"deviation": "37.545758928", "rating": "1505.14999836", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0633057934912"}, "D": {"deviation": "34.4859474613", "rating": "1497.54162837", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0618336473136"}, "O'Caml": {"deviation": "33.901372578", "rating": "1679.66263882", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0607218007169"}, "Io": {"deviation": "36.1865055166", "rating": "1585.81823218", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0605133080447"}, "J": {"deviation": "49.9726885918", "rating": "1640.35403093", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.060451103276"}, "ELisp": {"deviation": "34.5117151422", "rating": "1349.59178867", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0608376761985"}, "C++": {"deviation": "53.7494054234", "rating": "1449.23249663", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.124215329511"}, "Standard ML": {"deviation": "32.7820121137", "rating": "1612.5068028", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0605142772772"}, "R": {"deviation": "37.9881992144", "rating": "1498.35034098", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0624294008044"}, "Clojure": {"deviation": "34.5403497619", "rating": "1718.5397665", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0606543893334"}, "Prolog": {"deviation": "34.654240779", "rating": "1614.42338202", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0623448500157"}, "REBOL": {"deviation": "79.1756374676", "rating": "1598.22798258", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0600928529228"}, "Fortran": {"deviation": "42.3737909081", "rating": "1230.07431113", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0600191576311"}, "Assembler": {"deviation": "39.3776794504", "rating": "1611.78298642", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0752461212334"}, "Python": {"deviation": "38.1656312165", "rating": "1721.2303396", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.062811735024"}, "Pascal": {"deviation": "37.5967453744", "rating": "1304.58351371", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0611795251731"}, "Haskell": {"deviation": "39.1607916806", "rating": "1803.08080242", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0603305372771"}, "Cobol": {"deviation": "41.8859565737", "rating": "1120.62276282", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.060287333646"}, "APL": {"deviation": "36.9202364909", "rating": "1424.34140929", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0610450122431"}, "ActionScript": {"deviation": "106.053653124", "rating": "1164.14011685", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0601302561398"}, "Go": {"deviation": "35.587733314", "rating": "1631.17956098", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0622402547756"}, "Visual Basic": {"deviation": "41.8754115985", "rating": "1214.02131132", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0598987648136"}, "PHP": {"deviation": "40.665034439", "rating": "1300.818181", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0600789576293"}, "Mozart-Oz": {"deviation": "53.2611652068", "rating": "1663.53735832", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0614226214943"}, "Smalltalk": {"deviation": "35.3851463936", "rating": "1732.9978455", "ratingsMin": "1120.62276282", "ratingsMax": "1803.08080242", "volatility": "0.0608476404893"}}, "This language has unusual features that I often miss when using other languages": {"Coq": {"deviation": "40.1027382596", "rating": "1701.35444473", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0600194954005"}, "Eiffel": {"deviation": "32.8385342842", "rating": "1448.326248", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0651502162716"}, "Java": {"deviation": "38.0307393506", "rating": "1298.4604711", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0593615562992"}, "Scala": {"deviation": "43.512901243", "rating": "1797.15245697", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0600831385603"}, "Delphi": {"deviation": "38.7524464476", "rating": "1187.33614656", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.059809183475"}, "Ada": {"deviation": "35.9756893123", "rating": "1388.25841402", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0691038461143"}, "Perl": {"deviation": "42.0056978837", "rating": "1458.35448059", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0828092654011"}, "Lua": {"deviation": "38.497509835", "rating": "1484.28241265", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0659996251717"}, "Shell": {"deviation": "37.2522413703", "rating": "1271.79932949", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0606584709411"}, "Matlab": {"deviation": "37.5467884164", "rating": "1326.47709229", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0609923873982"}, "Factor": {"deviation": "35.9727153869", "rating": "1540.80485883", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0603629865479"}, "Haxe": {"deviation": "37.5315588008", "rating": "1455.73344808", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0611225018988"}, "Erlang": {"deviation": "38.4350188095", "rating": "1751.18871186", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0621708338543"}, "Forth": {"deviation": "36.4014231467", "rating": "1446.18810503", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0766520892442"}, "Scheme": {"deviation": "42.7236607371", "rating": "1636.7558634", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0776658275858"}, "Objective C": {"deviation": "36.8463868373", "rating": "1403.46054761", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0622677186395"}, "C#": {"deviation": "42.9791020069", "rating": "1370.2002051", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0712797699511"}, "Javascript": {"deviation": "41.5221367799", "rating": "1395.10510275", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0742933771957"}, "Common Lisp": {"deviation": "40.0124571266", "rating": "1728.95827206", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0634003128055"}, "TCL": {"deviation": "36.1950629563", "rating": "1299.39259294", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0622724826406"}, "F#": {"deviation": "36.7688046035", "rating": "1617.84716077", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0602447775978"}, "AWK": {"deviation": "35.649091545", "rating": "1301.69718896", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0617024811953"}, "Ruby": {"deviation": "42.9556780585", "rating": "1512.7677602", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0736388447897"}, "Agda": {"deviation": "128.610118724", "rating": "1962.86162221", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0600240447334"}, "Groovy": {"deviation": "37.9194722625", "rating": "1427.61151237", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0624108797366"}, "C": {"deviation": "40.3379383839", "rating": "1204.49222951", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0593576932102"}, "Mathematica": {"deviation": "38.5742505161", "rating": "1407.16457888", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.060762697692"}, "D": {"deviation": "37.083870313", "rating": "1538.00061509", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.062251171109"}, "O'Caml": {"deviation": "40.1853207351", "rating": "1635.53286044", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0602259856826"}, "Io": {"deviation": "37.1951650736", "rating": "1514.51062666", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0611827381182"}, "J": {"deviation": "42.1079457242", "rating": "1708.9377646", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0612376917616"}, "ELisp": {"deviation": "36.1850629304", "rating": "1385.1820278", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.063192147766"}, "C++": {"deviation": "41.064465434", "rating": "1462.29623296", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0684877551876"}, "Standard ML": {"deviation": "38.1035962565", "rating": "1644.85532211", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0612820092296"}, "R": {"deviation": "38.1576384148", "rating": "1337.64614245", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0627376601524"}, "Clojure": {"deviation": "42.9864350329", "rating": "1802.22261461", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0601743539958"}, "Prolog": {"deviation": "41.1406875869", "rating": "1548.1455926", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0780782593532"}, "REBOL": {"deviation": "58.4011083277", "rating": "1746.43359064", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0599835637967"}, "Fortran": {"deviation": "37.3542810684", "rating": "1199.98136562", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0600470541647"}, "Assembler": {"deviation": "37.8432347211", "rating": "1246.68216454", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0601654818435"}, "Python": {"deviation": "52.13791831", "rating": "1550.70210095", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.108223651038"}, "Pascal": {"deviation": "38.9344188013", "rating": "1098.130258", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0598638351051"}, "Haskell": {"deviation": "45.99609716", "rating": "1853.96500731", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0603957046084"}, "Cobol": {"deviation": "38.5437337772", "rating": "1058.68443258", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0601085704646"}, "APL": {"deviation": "36.1588555074", "rating": "1427.55209766", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0640041170817"}, "ActionScript": {"deviation": "99.2632672439", "rating": "1146.4453029", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0601799327459"}, "Go": {"deviation": "36.4681631671", "rating": "1589.77906136", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0642660373663"}, "Visual Basic": {"deviation": "39.5668683071", "rating": "1138.44351506", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0600090875648"}, "PHP": {"deviation": "40.4342736176", "rating": "1085.78444093", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0598843853008"}, "Mozart-Oz": {"deviation": "34.5255787229", "rating": "1656.84587348", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0607024746225"}, "Smalltalk": {"deviation": "36.586939716", "rating": "1581.64136345", "ratingsMin": "1058.68443258", "ratingsMax": "1962.86162221", "volatility": "0.0619281711169"}}, "If this language didn't exist I would have trouble finding a satisfactory replacement": {"Coq": {"deviation": "31.7166957163", "rating": "1565.17881865", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0612916704479"}, "Eiffel": {"deviation": "30.1474907573", "rating": "1470.05471218", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0611355692006"}, "Java": {"deviation": "56.3327635311", "rating": "1398.12288155", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.136676498224"}, "Scala": {"deviation": "40.3868294279", "rating": "1611.88131716", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0663006374953"}, "Delphi": {"deviation": "34.6900004399", "rating": "1360.25251013", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0609059851155"}, "Ada": {"deviation": "32.7846439454", "rating": "1373.74139452", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0630296772695"}, "Perl": {"deviation": "39.381214587", "rating": "1413.44191364", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0720099198587"}, "Lua": {"deviation": "36.709150638", "rating": "1565.80490401", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0686179746911"}, "Shell": {"deviation": "42.9103369613", "rating": "1544.86232057", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0780205147127"}, "Matlab": {"deviation": "38.5421501895", "rating": "1409.48805454", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0622970316673"}, "Factor": {"deviation": "33.3507879583", "rating": "1411.92676022", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0647392508506"}, "Haxe": {"deviation": "34.1258193125", "rating": "1422.13173463", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0606972519377"}, "Erlang": {"deviation": "34.5851470825", "rating": "1657.33747995", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0626954198337"}, "Forth": {"deviation": "33.1477352834", "rating": "1588.36082039", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0688852682619"}, "Scheme": {"deviation": "42.2479757524", "rating": "1424.54546985", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0906894026008"}, "Objective C": {"deviation": "36.9257495285", "rating": "1468.45532541", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0653058712014"}, "C#": {"deviation": "43.6842181371", "rating": "1411.29841974", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0729547384842"}, "Javascript": {"deviation": "57.5330954071", "rating": "1616.47949371", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.1464382582"}, "Common Lisp": {"deviation": "35.8538365738", "rating": "1481.29634088", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0713836931037"}, "TCL": {"deviation": "34.4149490766", "rating": "1413.97735692", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0612467719019"}, "F#": {"deviation": "35.8908809452", "rating": "1415.26391441", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0641893795377"}, "AWK": {"deviation": "37.4145103589", "rating": "1497.19166549", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0687541089002"}, "Ruby": {"deviation": "41.6960484485", "rating": "1467.55269009", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0822604787958"}, "Agda": {"deviation": "98.278684508", "rating": "1728.58663588", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0599938848657"}, "Groovy": {"deviation": "33.4842094475", "rating": "1331.6745542", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0618051846121"}, "C": {"deviation": "55.8583407235", "rating": "1737.62124419", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.124275043554"}, "Mathematica": {"deviation": "37.4691704224", "rating": "1620.35946939", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0617917435644"}, "D": {"deviation": "32.469008608", "rating": "1493.26291443", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.061907112604"}, "O'Caml": {"deviation": "36.2184486095", "rating": "1553.81044457", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0687567797632"}, "Io": {"deviation": "33.7841429252", "rating": "1333.6678519", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.060141485473"}, "J": {"deviation": "35.363427499", "rating": "1593.7609712", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0600677547139"}, "ELisp": {"deviation": "32.2946190711", "rating": "1402.86577623", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0630735552243"}, "C++": {"deviation": "84.2094877528", "rating": "1518.09998687", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.316433381184"}, "Standard ML": {"deviation": "32.7920924045", "rating": "1423.78580542", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0634651459498"}, "R": {"deviation": "35.0949637942", "rating": "1476.8711597", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0670230193022"}, "Clojure": {"deviation": "37.0137549041", "rating": "1571.93148104", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0695508794354"}, "Prolog": {"deviation": "38.4876363914", "rating": "1594.52414629", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0903785281641"}, "REBOL": {"deviation": "215.725590618", "rating": "1660.7159045", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0599994212001"}, "Fortran": {"deviation": "36.8561253486", "rating": "1376.74626311", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.063099598522"}, "Assembler": {"deviation": "49.5269012591", "rating": "1604.07591726", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.101149288816"}, "Python": {"deviation": "59.7344991124", "rating": "1427.60652429", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.157616237841"}, "Pascal": {"deviation": "37.6332636589", "rating": "1305.06870633", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.06010887444"}, "Haskell": {"deviation": "38.3539758087", "rating": "1582.37878358", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0654660465442"}, "Cobol": {"deviation": "33.1555384208", "rating": "1350.12681761", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0606411942773"}, "APL": {"deviation": "31.4200629485", "rating": "1515.03332218", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.062406529948"}, "ActionScript": {"deviation": "111.124517974", "rating": "1687.57126803", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0600018156618"}, "Go": {"deviation": "32.7646986975", "rating": "1588.2356447", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0693157881812"}, "Visual Basic": {"deviation": "40.6943368061", "rating": "1201.71074316", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0598605980937"}, "PHP": {"deviation": "40.5596056316", "rating": "1249.79984775", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0626219320296"}, "Mozart-Oz": {"deviation": "29.6809785726", "rating": "1514.39104245", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0628419923081"}, "Smalltalk": {"deviation": "32.6653799852", "rating": "1496.58578439", "ratingsMin": "1201.71074316", "ratingsMax": "1737.62124419", "volatility": "0.0655529868573"}}, "I usually use this language on projects with many other members": {"Coq": {"deviation": "37.384272116", "rating": "1193.26903306", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0680777074321"}, "Eiffel": {"deviation": "35.2700277778", "rating": "1527.69747986", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.064104353147"}, "Java": {"deviation": "41.1842665362", "rating": "1882.93647899", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0605225994781"}, "Scala": {"deviation": "38.3144869481", "rating": "1576.55821643", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0777675368527"}, "Delphi": {"deviation": "37.8476117349", "rating": "1448.903979", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0663863557689"}, "Ada": {"deviation": "39.1892861815", "rating": "1478.83613446", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0682247872734"}, "Perl": {"deviation": "44.1201228114", "rating": "1531.44980192", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0897688973842"}, "Lua": {"deviation": "34.9084459919", "rating": "1428.74929428", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0677625714989"}, "Shell": {"deviation": "35.4372255874", "rating": "1527.07348913", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0715415726873"}, "Matlab": {"deviation": "35.4410187834", "rating": "1451.15239388", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.064646388894"}, "Factor": {"deviation": "37.5392041273", "rating": "1227.8554614", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.060306062734"}, "Haxe": {"deviation": "37.025365763", "rating": "1438.71970795", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.061609870394"}, "Erlang": {"deviation": "35.2547817143", "rating": "1500.15388397", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0666162806978"}, "Forth": {"deviation": "39.3900655216", "rating": "1191.26595205", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0603683902367"}, "Scheme": {"deviation": "36.4207910076", "rating": "1384.48448083", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0631212426872"}, "Objective C": {"deviation": "39.1333842315", "rating": "1533.93298146", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0748435368312"}, "C#": {"deviation": "38.0538339357", "rating": "1706.64686038", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0604052433376"}, "Javascript": {"deviation": "37.1030377447", "rating": "1695.78787963", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0659333834272"}, "Common Lisp": {"deviation": "37.6109300766", "rating": "1419.0891696", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0642536434831"}, "TCL": {"deviation": "36.3024465781", "rating": "1342.54696035", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0624728861791"}, "F#": {"deviation": "38.7625964046", "rating": "1378.24557969", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0697721993622"}, "AWK": {"deviation": "34.0680835564", "rating": "1478.95794121", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.062510696513"}, "Ruby": {"deviation": "34.9964156461", "rating": "1584.16936639", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0643501390292"}, "Agda": {"deviation": "65.9093621118", "rating": "1698.24456992", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0604388006549"}, "Groovy": {"deviation": "37.3214765782", "rating": "1643.55003923", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0628528244028"}, "C": {"deviation": "44.5930272764", "rating": "1734.6792628", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.086072931066"}, "Mathematica": {"deviation": "37.1204259566", "rating": "1445.85335064", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0610076664949"}, "D": {"deviation": "35.1817685613", "rating": "1410.60253943", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0623840532511"}, "O'Caml": {"deviation": "37.1017817873", "rating": "1472.31401971", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0645216581533"}, "Io": {"deviation": "37.4125006953", "rating": "1291.31597347", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0607145280625"}, "J": {"deviation": "37.5089538204", "rating": "1321.35680963", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0615169212818"}, "ELisp": {"deviation": "38.3911082967", "rating": "1330.70901476", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.060873686151"}, "C++": {"deviation": "38.9158245751", "rating": "1730.11577709", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0684775999415"}, "Standard ML": {"deviation": "36.263038663", "rating": "1383.20279525", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.060430894035"}, "R": {"deviation": "36.045047506", "rating": "1428.40161635", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0619710525261"}, "Clojure": {"deviation": "38.6625790457", "rating": "1446.03369365", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0695471884097"}, "Prolog": {"deviation": "38.0245476607", "rating": "1263.58931538", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.060444518046"}, "REBOL": {"deviation": "79.8143837251", "rating": "1382.17110375", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0601407446078"}, "Fortran": {"deviation": "40.8528929863", "rating": "1273.3908185", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0657033409739"}, "Assembler": {"deviation": "38.1883374811", "rating": "1277.43906635", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0621223378334"}, "Python": {"deviation": "38.3483893452", "rating": "1661.86161204", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0643837980999"}, "Pascal": {"deviation": "33.887197583", "rating": "1417.4366238", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0602743116645"}, "Haskell": {"deviation": "40.5710734079", "rating": "1352.41218769", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0761641021499"}, "Cobol": {"deviation": "34.5644136382", "rating": "1386.50694763", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.066420174214"}, "APL": {"deviation": "34.2367076204", "rating": "1370.38006019", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0640429477239"}, "ActionScript": {"deviation": "99.9318063799", "rating": "1338.00089197", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0600507834517"}, "Go": {"deviation": "37.0575321686", "rating": "1417.18261144", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0626145086997"}, "Visual Basic": {"deviation": "40.6064927122", "rating": "1440.20081443", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0748741544908"}, "PHP": {"deviation": "39.6903441625", "rating": "1690.39781656", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0800919368199"}, "Mozart-Oz": {"deviation": "35.0825389906", "rating": "1302.86539739", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0601146589934"}, "Smalltalk": {"deviation": "37.2730149344", "rating": "1425.25066781", "ratingsMin": "1191.26595205", "ratingsMax": "1882.93647899", "volatility": "0.0640655319419"}}, "This language has many features which feel \"tacked on\"": {"Coq": {"deviation": "35.42520504", "rating": "1416.24853829", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0629551798579"}, "Eiffel": {"deviation": "32.4964286806", "rating": "1449.20502981", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0625099465099"}, "Java": {"deviation": "39.4257245097", "rating": "1771.32857849", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0622490508069"}, "Scala": {"deviation": "38.3735842467", "rating": "1580.00716981", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0656978161491"}, "Delphi": {"deviation": "37.4360907287", "rating": "1594.51367643", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0622165656901"}, "Ada": {"deviation": "36.126886381", "rating": "1563.1280676", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0647551169681"}, "Perl": {"deviation": "38.6860340414", "rating": "1823.29208806", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0597754663098"}, "Lua": {"deviation": "38.2040632964", "rating": "1457.37968501", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0637403079032"}, "Shell": {"deviation": "36.0475753002", "rating": "1611.04544799", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0652486341018"}, "Matlab": {"deviation": "39.4851948798", "rating": "1612.04821077", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0607881817003"}, "Factor": {"deviation": "33.8712476861", "rating": "1417.88408967", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0611434486738"}, "Haxe": {"deviation": "34.9377813346", "rating": "1583.13310982", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0608225221072"}, "Erlang": {"deviation": "35.8148941005", "rating": "1493.01658515", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0641523751125"}, "Forth": {"deviation": "34.5471076591", "rating": "1401.30344698", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0646768018259"}, "Scheme": {"deviation": "39.8871791181", "rating": "1350.4066581", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0606355894969"}, "Objective C": {"deviation": "36.4823571713", "rating": "1615.94287955", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0635187765306"}, "C#": {"deviation": "39.6747254964", "rating": "1679.36526183", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0616411500733"}, "Javascript": {"deviation": "39.0463861804", "rating": "1628.40894306", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0667222194481"}, "Common Lisp": {"deviation": "45.2551538853", "rating": "1523.59169001", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0946061074131"}, "TCL": {"deviation": "35.5440339225", "rating": "1532.28439468", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0654750952244"}, "F#": {"deviation": "36.0690730831", "rating": "1560.92773123", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0647348554303"}, "AWK": {"deviation": "35.3220281686", "rating": "1380.04565903", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0626684311991"}, "Ruby": {"deviation": "38.1391278215", "rating": "1620.24749507", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0640627841293"}, "Agda": {"deviation": "65.695422904", "rating": "1137.44251275", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0601059934243"}, "Groovy": {"deviation": "36.4821320476", "rating": "1660.96062643", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0614744791969"}, "C": {"deviation": "45.5059956294", "rating": "1432.56882652", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0905001379575"}, "Mathematica": {"deviation": "37.8930622261", "rating": "1540.77983504", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0616528571938"}, "D": {"deviation": "36.4273319769", "rating": "1624.7589533", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0626885313778"}, "O'Caml": {"deviation": "40.7420975712", "rating": "1508.72037725", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.077135513109"}, "Io": {"deviation": "33.5133589003", "rating": "1456.77273592", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0621586012621"}, "J": {"deviation": "32.3886532607", "rating": "1427.6850414", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0614789160434"}, "ELisp": {"deviation": "35.892773061", "rating": "1511.59066122", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0642364137382"}, "C++": {"deviation": "41.0784085614", "rating": "1871.32707319", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0598617375518"}, "Standard ML": {"deviation": "35.190528215", "rating": "1326.23445593", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0622886591126"}, "R": {"deviation": "38.4555368406", "rating": "1526.83268301", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0699598601412"}, "Clojure": {"deviation": "41.6876193783", "rating": "1385.99294051", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0696327728596"}, "Prolog": {"deviation": "36.5601263267", "rating": "1366.08421347", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0623500178978"}, "REBOL": {"deviation": "226.240754523", "rating": "1356.67875682", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0599985554854"}, "Fortran": {"deviation": "38.2736962268", "rating": "1554.69506797", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0651508037375"}, "Assembler": {"deviation": "41.8997870108", "rating": "1241.0415288", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0654576645303"}, "Python": {"deviation": "48.4715233172", "rating": "1574.0080161", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.10478083777"}, "Pascal": {"deviation": "38.5883801907", "rating": "1451.28507575", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0663141443796"}, "Haskell": {"deviation": "44.0644974078", "rating": "1388.4652184", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0733167941688"}, "Cobol": {"deviation": "34.9218414724", "rating": "1583.68926715", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0623031436464"}, "APL": {"deviation": "35.5751694698", "rating": "1382.74770211", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0647490821646"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.06"}, "Go": {"deviation": "33.8986332532", "rating": "1547.29825657", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0641398596816"}, "Visual Basic": {"deviation": "39.361022186", "rating": "1694.04782073", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0603844539222"}, "PHP": {"deviation": "37.5040495676", "rating": "1748.17021317", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0597592294691"}, "Mozart-Oz": {"deviation": "29.8830673428", "rating": "1506.59744332", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0606663114313"}, "Smalltalk": {"deviation": "33.7192340429", "rating": "1405.1659672", "ratingsMin": "1137.44251275", "ratingsMax": "1871.32707319", "volatility": "0.0615590150327"}}, "This language has a very rigid idea of how things should be done": {"Coq": {"deviation": "35.2532129294", "rating": "1709.57761883", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0613781147175"}, "Eiffel": {"deviation": "34.7835193133", "rating": "1776.89673615", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.063678093969"}, "Java": {"deviation": "44.3325017686", "rating": "1698.59565089", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0639184792456"}, "Scala": {"deviation": "36.8565201901", "rating": "1432.1071449", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0687522373484"}, "Delphi": {"deviation": "37.200304229", "rating": "1553.75296204", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.064421338753"}, "Ada": {"deviation": "33.6010193026", "rating": "1700.50925962", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0604670513124"}, "Perl": {"deviation": "38.2418734306", "rating": "1277.99228118", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0597738290828"}, "Lua": {"deviation": "37.3439886463", "rating": "1251.88890223", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0625540187223"}, "Shell": {"deviation": "37.2056264449", "rating": "1372.51956499", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.067487576129"}, "Matlab": {"deviation": "37.6270999449", "rating": "1533.8987278", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0639655733229"}, "Factor": {"deviation": "35.7151275582", "rating": "1406.31119757", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0652890857059"}, "Haxe": {"deviation": "41.0617506411", "rating": "1422.6922369", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0634283638429"}, "Erlang": {"deviation": "32.9496787667", "rating": "1432.88232491", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0737479782705"}, "Forth": {"deviation": "32.8802307146", "rating": "1437.64554956", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0674688841513"}, "Scheme": {"deviation": "40.1206539708", "rating": "1486.41383988", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0716599977586"}, "Objective C": {"deviation": "38.7138661772", "rating": "1510.48208844", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0741039409938"}, "C#": {"deviation": "43.759718939", "rating": "1318.62984519", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0804417513212"}, "Javascript": {"deviation": "42.551038077", "rating": "1317.85701274", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0620983967793"}, "Common Lisp": {"deviation": "36.9262944749", "rating": "1352.54214478", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0637872758651"}, "TCL": {"deviation": "36.6088178537", "rating": "1349.65179248", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0634067000366"}, "F#": {"deviation": "32.0233707672", "rating": "1504.89034522", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0668328257556"}, "AWK": {"deviation": "35.6855685727", "rating": "1486.02416819", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0702589180882"}, "Ruby": {"deviation": "36.374182561", "rating": "1402.34007664", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0625746632009"}, "Agda": {"deviation": "83.7063315964", "rating": "1940.02810927", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0602427227458"}, "Groovy": {"deviation": "35.8080515362", "rating": "1409.62279346", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0623988204361"}, "C": {"deviation": "128.824118517", "rating": "1564.51403046", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.770633947693"}, "Mathematica": {"deviation": "38.6345275988", "rating": "1518.92667232", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0607977340872"}, "D": {"deviation": "35.0198951966", "rating": "1499.9213712", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0642504876794"}, "O'Caml": {"deviation": "33.6368372225", "rating": "1425.88198647", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0712645705196"}, "Io": {"deviation": "38.6916826054", "rating": "1340.18069781", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0614382465302"}, "J": {"deviation": "34.5465510603", "rating": "1411.03892064", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0607625800869"}, "ELisp": {"deviation": "33.8876502264", "rating": "1230.89008598", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0604846075582"}, "C++": {"deviation": "62.2667491518", "rating": "1362.35850639", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.154657197751"}, "Standard ML": {"deviation": "33.0267542555", "rating": "1500.32077571", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0657917026187"}, "R": {"deviation": "35.4140994952", "rating": "1500.87540982", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0631618087729"}, "Clojure": {"deviation": "37.4000296571", "rating": "1522.62460853", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0707817462794"}, "Prolog": {"deviation": "34.3445838809", "rating": "1597.6839543", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0657436614649"}, "REBOL": {"deviation": "136.322066584", "rating": "1179.09638045", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0600090415169"}, "Fortran": {"deviation": "35.1814885603", "rating": "1581.32869723", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0606756187202"}, "Assembler": {"deviation": "40.3887265807", "rating": "1339.02392813", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0895996539927"}, "Python": {"deviation": "201.297165516", "rating": "1275.68179359", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "1.91922188136"}, "Pascal": {"deviation": "39.0293933392", "rating": "1703.01134589", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0615651625524"}, "Haskell": {"deviation": "40.8018494682", "rating": "1694.16077099", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0676472551653"}, "Cobol": {"deviation": "38.7713892224", "rating": "1821.29076373", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.060423754056"}, "APL": {"deviation": "31.6923867334", "rating": "1550.11490684", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0643175280024"}, "ActionScript": {"deviation": "124.450065307", "rating": "1396.73411487", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0599950507532"}, "Go": {"deviation": "37.0037913959", "rating": "1498.12753957", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.065702617395"}, "Visual Basic": {"deviation": "41.9171371436", "rating": "1515.70031242", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.082716322804"}, "PHP": {"deviation": "39.7492360252", "rating": "1446.79366118", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0675314211881"}, "Mozart-Oz": {"deviation": "32.9889357906", "rating": "1442.29759437", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.063935526216"}, "Smalltalk": {"deviation": "34.1650595156", "rating": "1575.38562075", "ratingsMin": "1179.09638045", "ratingsMax": "1940.02810927", "volatility": "0.0710481053466"}}, "This is a high level language": {"Coq": {"deviation": "39.8016218714", "rating": "1851.552683", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0601913263475"}, "Eiffel": {"deviation": "36.4857139212", "rating": "1469.64402821", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0606997218259"}, "Java": {"deviation": "48.0673744331", "rating": "1439.43061156", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.115993555189"}, "Scala": {"deviation": "39.5194284819", "rating": "1818.25193643", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0599789808553"}, "Delphi": {"deviation": "40.0255767936", "rating": "1396.50940562", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.063353016747"}, "Ada": {"deviation": "35.5521353762", "rating": "1460.03024675", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0625293194696"}, "Perl": {"deviation": "39.8240365781", "rating": "1520.68037072", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.080009057161"}, "Lua": {"deviation": "42.9016822413", "rating": "1534.03114305", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.077857174589"}, "Shell": {"deviation": "39.3051971068", "rating": "1458.45977562", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0682686524"}, "Matlab": {"deviation": "39.7211986625", "rating": "1615.84465122", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0615842246016"}, "Factor": {"deviation": "32.1018117743", "rating": "1567.52850964", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0616302449334"}, "Haxe": {"deviation": "38.8940877153", "rating": "1630.2231369", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0600783364945"}, "Erlang": {"deviation": "37.774370463", "rating": "1634.55836386", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0651438754793"}, "Forth": {"deviation": "39.0305662634", "rating": "1128.94101939", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0601031367888"}, "Scheme": {"deviation": "37.2332936432", "rating": "1702.15880197", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0635074478212"}, "Objective C": {"deviation": "37.9682583837", "rating": "1365.06772368", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0613241010178"}, "C#": {"deviation": "40.8773256277", "rating": "1454.55544086", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0815313902907"}, "Javascript": {"deviation": "42.914359717", "rating": "1549.31155338", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0848124802746"}, "Common Lisp": {"deviation": "37.2038039382", "rating": "1757.90436743", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.061715248658"}, "TCL": {"deviation": "35.8671157112", "rating": "1408.3285851", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0619964091437"}, "F#": {"deviation": "38.7668200359", "rating": "1794.64899976", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.059941108607"}, "AWK": {"deviation": "37.0335744392", "rating": "1421.44241447", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.071473208323"}, "Ruby": {"deviation": "39.1970111641", "rating": "1738.98905337", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0595127045408"}, "Agda": {"deviation": "99.70552085", "rating": "1691.06863076", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0601107339616"}, "Groovy": {"deviation": "37.8448859543", "rating": "1625.41295564", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0607198480946"}, "C": {"deviation": "45.8238327581", "rating": "1126.75421091", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0592521341015"}, "Mathematica": {"deviation": "44.9623151262", "rating": "1837.56604391", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0601467149758"}, "D": {"deviation": "37.3787508212", "rating": "1312.85956579", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0611140208549"}, "O'Caml": {"deviation": "39.7810713262", "rating": "1682.43766894", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.060259119484"}, "Io": {"deviation": "34.9886138504", "rating": "1639.49082357", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0620929101751"}, "J": {"deviation": "35.893229678", "rating": "1580.8768578", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0633783090763"}, "ELisp": {"deviation": "34.680557893", "rating": "1566.24728532", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0633725788835"}, "C++": {"deviation": "38.1344549592", "rating": "1299.13275056", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0598299617497"}, "Standard ML": {"deviation": "35.1572295059", "rating": "1647.87532805", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.060358860236"}, "R": {"deviation": "38.6558320049", "rating": "1724.31662188", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0612966976908"}, "Clojure": {"deviation": "37.8759793677", "rating": "1710.73325634", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0603191772884"}, "Prolog": {"deviation": "40.919834636", "rating": "1910.0553413", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0635980529362"}, "REBOL": {"deviation": "78.0123507732", "rating": "1537.26369581", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0599664396632"}, "Fortran": {"deviation": "43.285344608", "rating": "1142.54977706", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0609657341815"}, "Assembler": {"deviation": "72.6769425399", "rating": "526.072367817", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0602701945554"}, "Python": {"deviation": "36.7340015044", "rating": "1626.92264065", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0612495844096"}, "Pascal": {"deviation": "41.5303802006", "rating": "1243.23053472", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0601247327194"}, "Haskell": {"deviation": "49.2156194459", "rating": "1914.74978299", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0603752790247"}, "Cobol": {"deviation": "36.2310277048", "rating": "1253.69664659", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0627280324153"}, "APL": {"deviation": "34.7669912057", "rating": "1571.54176925", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0620847541405"}, "ActionScript": {"deviation": "131.219420852", "rating": "1821.55237995", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0601209248048"}, "Go": {"deviation": "36.1854408229", "rating": "1406.38417633", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0604898355691"}, "Visual Basic": {"deviation": "41.9980396248", "rating": "1508.81951521", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0738886587916"}, "PHP": {"deviation": "43.9471564451", "rating": "1388.51974581", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0732497586721"}, "Mozart-Oz": {"deviation": "33.1610188446", "rating": "1636.93685029", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0602420526585"}, "Smalltalk": {"deviation": "37.1718572156", "rating": "1699.48192828", "ratingsMin": "526.072367817", "ratingsMax": "1914.74978299", "volatility": "0.0600998311452"}}, "I enjoy using this language": {"Coq": {"deviation": "35.1652934511", "rating": "1668.96445783", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0601684355787"}, "Eiffel": {"deviation": "32.7046429222", "rating": "1519.13184654", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0641767181211"}, "Java": {"deviation": "121.793088257", "rating": "1671.81643866", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.695902490673"}, "Scala": {"deviation": "41.3290042271", "rating": "1814.69965558", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0605382014127"}, "Delphi": {"deviation": "37.1219367308", "rating": "1406.85283696", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0620669461175"}, "Ada": {"deviation": "34.8571830651", "rating": "1455.43471834", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0635686503196"}, "Perl": {"deviation": "44.0763317444", "rating": "1420.19776202", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.078506206036"}, "Lua": {"deviation": "44.1839546291", "rating": "1395.62508759", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0803056421872"}, "Shell": {"deviation": "36.1316699741", "rating": "1409.08241325", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0633882528131"}, "Matlab": {"deviation": "35.789798822", "rating": "1314.40994717", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0607173590003"}, "Factor": {"deviation": "29.647073128", "rating": "1593.76526346", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0617823286542"}, "Haxe": {"deviation": "35.155807303", "rating": "1508.07764506", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0606163292017"}, "Erlang": {"deviation": "35.8610480619", "rating": "1589.46152221", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0648742572157"}, "Forth": {"deviation": "39.1502526558", "rating": "1594.39904396", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0749678690467"}, "Scheme": {"deviation": "38.6282698443", "rating": "1637.05788218", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0702184972791"}, "Objective C": {"deviation": "40.8478646736", "rating": "1441.69166032", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.086294055991"}, "C#": {"deviation": "53.8339776136", "rating": "1601.02280215", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.123299846658"}, "Javascript": {"deviation": "80.6862825906", "rating": "1475.24450292", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.243248518438"}, "Common Lisp": {"deviation": "38.2724673761", "rating": "1536.01385374", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0729430832947"}, "TCL": {"deviation": "37.1551933283", "rating": "1255.21200866", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0604112588687"}, "F#": {"deviation": "38.6418237008", "rating": "1767.54562519", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0602229312694"}, "AWK": {"deviation": "36.8177705777", "rating": "1371.23830745", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0690358747232"}, "Ruby": {"deviation": "43.136427972", "rating": "1554.5730369", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0702988435239"}, "Agda": {"deviation": "46.4631180127", "rating": "1626.28599909", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0611624673851"}, "Groovy": {"deviation": "39.5450629999", "rating": "1582.79809835", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0670833770861"}, "C": {"deviation": "170.67202235", "rating": "1479.65732268", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "1.37171035114"}, "Mathematica": {"deviation": "35.2680328477", "rating": "1458.04762571", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0614200473211"}, "D": {"deviation": "34.816806892", "rating": "1533.91168358", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0677786262304"}, "O'Caml": {"deviation": "36.6711473467", "rating": "1766.25564095", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0606280302614"}, "Io": {"deviation": "30.8239796667", "rating": "1547.92251698", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0614646659197"}, "J": {"deviation": "32.5685335615", "rating": "1436.74238502", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0642179877699"}, "ELisp": {"deviation": "39.503640099", "rating": "1416.27983375", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0723603437268"}, "C++": {"deviation": "111.592377099", "rating": "1374.77274199", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.512213621241"}, "Standard ML": {"deviation": "35.3370445972", "rating": "1634.33344419", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0649447455066"}, "R": {"deviation": "34.3181227644", "rating": "1453.45456578", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0628732116442"}, "Clojure": {"deviation": "38.1885461404", "rating": "1655.61685778", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0620903106905"}, "Prolog": {"deviation": "41.0187663718", "rating": "1535.09731981", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0836729965198"}, "REBOL": {"deviation": "87.4741493305", "rating": "1983.53568751", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0616550544442"}, "Fortran": {"deviation": "36.9253750403", "rating": "1259.07643441", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0599323840151"}, "Assembler": {"deviation": "38.2921518066", "rating": "1402.28519729", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.064559525781"}, "Python": {"deviation": "42.632330077", "rating": "1638.73502015", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0680770180165"}, "Pascal": {"deviation": "35.4960233098", "rating": "1312.99999258", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0604989518818"}, "Haskell": {"deviation": "39.8582410619", "rating": "1771.24946644", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0609492031244"}, "Cobol": {"deviation": "34.7865438213", "rating": "1305.04609582", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0606083324001"}, "APL": {"deviation": "34.7582934146", "rating": "1458.4991803", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0737124297148"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.06"}, "Go": {"deviation": "32.6182498925", "rating": "1498.17556528", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0623267327512"}, "Visual Basic": {"deviation": "38.6357072942", "rating": "1286.99150569", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0601224323233"}, "PHP": {"deviation": "41.2947872745", "rating": "1277.54939666", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0613741685191"}, "Mozart-Oz": {"deviation": "33.0798995107", "rating": "1603.07653648", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.063026744415"}, "Smalltalk": {"deviation": "33.7624790616", "rating": "1571.34744451", "ratingsMin": "1255.21200866", "ratingsMax": "1983.53568751", "volatility": "0.0663633052079"}}, "I would use this language for casual scripting": {"Coq": {"deviation": "41.1175075938", "rating": "1140.46687859", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0607332519318"}, "Eiffel": {"deviation": "38.7285180453", "rating": "1287.97912551", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0601133914658"}, "Java": {"deviation": "44.7837571523", "rating": "1424.96080232", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0666756299546"}, "Scala": {"deviation": "41.5236882396", "rating": "1651.70672355", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0655736292408"}, "Delphi": {"deviation": "37.5306607346", "rating": "1242.29185963", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0601071587001"}, "Ada": {"deviation": "38.4084577682", "rating": "1190.33440231", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0601313462814"}, "Perl": {"deviation": "42.8018574212", "rating": "1852.24415045", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0601201261294"}, "Lua": {"deviation": "42.5647809702", "rating": "1686.04658994", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0611462773529"}, "Shell": {"deviation": "44.8579566705", "rating": "1849.45410877", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0600327470361"}, "Matlab": {"deviation": "39.8928989566", "rating": "1467.47033323", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0615455844464"}, "Factor": {"deviation": "39.7902121196", "rating": "1567.2253725", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0603863079208"}, "Haxe": {"deviation": "45.2558641581", "rating": "1658.88940543", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0604668737914"}, "Erlang": {"deviation": "39.9254638915", "rating": "1428.99128262", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0635171032448"}, "Forth": {"deviation": "36.716274227", "rating": "1377.43027896", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0618740021741"}, "Scheme": {"deviation": "43.5391234486", "rating": "1552.78544949", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0758570584938"}, "Objective C": {"deviation": "40.3832101039", "rating": "1328.54483273", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0607741911933"}, "C#": {"deviation": "42.2061546817", "rating": "1502.26596442", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0653689519189"}, "Javascript": {"deviation": "50.2990751688", "rating": "1642.85263609", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0800378850432"}, "Common Lisp": {"deviation": "41.3412056767", "rating": "1515.95394045", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0748386057901"}, "TCL": {"deviation": "36.5289430629", "rating": "1627.75442009", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0603253044248"}, "F#": {"deviation": "37.4797363679", "rating": "1672.90857194", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.06103258488"}, "AWK": {"deviation": "40.2485433863", "rating": "1734.53329425", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0603743620193"}, "Ruby": {"deviation": "45.8725457615", "rating": "1809.07149064", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0597569670179"}, "Agda": {"deviation": "86.9716072911", "rating": "1554.55586601", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0604780264018"}, "Groovy": {"deviation": "39.206572673", "rating": "1677.95520095", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0606366725991"}, "C": {"deviation": "43.2425462935", "rating": "1344.45832364", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0638019233327"}, "Mathematica": {"deviation": "35.4207807963", "rating": "1415.03100392", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0614540020434"}, "D": {"deviation": "37.4415910885", "rating": "1382.6561743", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0609440007554"}, "O'Caml": {"deviation": "39.8619515533", "rating": "1520.92329482", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.064627218669"}, "Io": {"deviation": "41.9091507262", "rating": "1683.88861551", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0600691606977"}, "J": {"deviation": "37.4174142738", "rating": "1562.93285733", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.061027290869"}, "ELisp": {"deviation": "37.7571864139", "rating": "1559.84227014", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0611366502641"}, "C++": {"deviation": "41.8850486807", "rating": "1293.12567253", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0597898117947"}, "Standard ML": {"deviation": "36.350955762", "rating": "1396.17693089", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0606393466418"}, "R": {"deviation": "39.9588471538", "rating": "1523.02363195", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0628117431302"}, "Clojure": {"deviation": "42.8191679566", "rating": "1621.03942949", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0613497156979"}, "Prolog": {"deviation": "35.5006603566", "rating": "1277.00330386", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0619334773872"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.06"}, "Fortran": {"deviation": "38.8290624104", "rating": "1201.94478936", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.059895700701"}, "Assembler": {"deviation": "47.8293794272", "rating": "924.478628786", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0598039317484"}, "Python": {"deviation": "52.0449550889", "rating": "1927.59425454", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0593819460788"}, "Pascal": {"deviation": "39.1052584445", "rating": "1173.5971293", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0599948438027"}, "Haskell": {"deviation": "48.1672475643", "rating": "1612.18352571", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0778601894922"}, "Cobol": {"deviation": "40.2299906857", "rating": "1061.33958314", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0603273313547"}, "APL": {"deviation": "35.0286447279", "rating": "1455.80458491", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0615220040043"}, "ActionScript": {"deviation": "101.247578856", "rating": "1610.85021716", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0600266592365"}, "Go": {"deviation": "38.8613811636", "rating": "1516.5435359", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0622137515618"}, "Visual Basic": {"deviation": "41.2938462882", "rating": "1386.9187352", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0659470152761"}, "PHP": {"deviation": "58.7757473472", "rating": "1574.70469376", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.128949184622"}, "Mozart-Oz": {"deviation": "38.1734168981", "rating": "1420.96240261", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0603368309626"}, "Smalltalk": {"deviation": "38.4788811287", "rating": "1379.5086908", "ratingsMin": "924.478628786", "ratingsMax": "1927.59425454", "volatility": "0.0661183350429"}}, "I would use this language to write a command-line app": {"Coq": {"deviation": "47.7064816562", "rating": "1125.78704112", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600220363912"}, "Eiffel": {"deviation": "35.4931195971", "rating": "1487.31496071", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0614794773434"}, "Java": {"deviation": "51.1266903214", "rating": "1541.66093262", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.101538875185"}, "Scala": {"deviation": "37.7499800613", "rating": "1743.94354417", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0602824551922"}, "Delphi": {"deviation": "38.0066807389", "rating": "1470.43073004", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0664712530258"}, "Ada": {"deviation": "34.5741864049", "rating": "1508.82930207", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0633261451756"}, "Perl": {"deviation": "36.1838045807", "rating": "1713.86912946", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0598485706594"}, "Lua": {"deviation": "38.3168588295", "rating": "1609.78753654", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0707866204917"}, "Shell": {"deviation": "39.4361926054", "rating": "1798.01948466", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0598881331451"}, "Matlab": {"deviation": "47.7295057201", "rating": "1234.08972779", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0599006097948"}, "Factor": {"deviation": "35.8641579591", "rating": "1454.75292914", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0610171374089"}, "Haxe": {"deviation": "39.9885455875", "rating": "1523.94227408", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0610677252569"}, "Erlang": {"deviation": "37.7266296983", "rating": "1458.82576225", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0669649920102"}, "Forth": {"deviation": "40.5222112424", "rating": "1377.89621559", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0680072486056"}, "Scheme": {"deviation": "39.8055042456", "rating": "1588.73116729", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0760346996861"}, "Objective C": {"deviation": "42.1277730115", "rating": "1430.99590469", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0738870569218"}, "C#": {"deviation": "40.3488046326", "rating": "1675.12433158", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0666645919823"}, "Javascript": {"deviation": "41.3445938851", "rating": "1348.39506312", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0614908878019"}, "Common Lisp": {"deviation": "39.5770111504", "rating": "1518.44633607", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0757875790483"}, "TCL": {"deviation": "34.879970091", "rating": "1558.76444084", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0642062152019"}, "F#": {"deviation": "35.2056384094", "rating": "1680.51376393", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0616862492291"}, "AWK": {"deviation": "36.9440365667", "rating": "1678.62104439", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0617342558661"}, "Ruby": {"deviation": "42.9511028868", "rating": "1834.48992884", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0599082562694"}, "Agda": {"deviation": "110.914626775", "rating": "1509.88232494", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600005747528"}, "Groovy": {"deviation": "38.9068229401", "rating": "1691.39578341", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0622279759524"}, "C": {"deviation": "39.8046217167", "rating": "1735.43677529", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0608059018654"}, "Mathematica": {"deviation": "47.1454692852", "rating": "1231.39757918", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600878745572"}, "D": {"deviation": "34.4388953222", "rating": "1647.81720147", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0602924423721"}, "O'Caml": {"deviation": "34.1893819022", "rating": "1675.99330461", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0603438445414"}, "Io": {"deviation": "32.5265434394", "rating": "1623.66847571", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0607175647103"}, "J": {"deviation": "43.6678417171", "rating": "1471.42976591", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0602951032727"}, "ELisp": {"deviation": "38.3537674767", "rating": "1320.76046595", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0602874240648"}, "C++": {"deviation": "43.7821062995", "rating": "1645.83606905", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0763769098823"}, "Standard ML": {"deviation": "36.6747537128", "rating": "1416.0138446", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0642962366594"}, "R": {"deviation": "36.6318094017", "rating": "1383.56592907", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0608030332235"}, "Clojure": {"deviation": "38.7728394119", "rating": "1690.73018277", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0610017910035"}, "Prolog": {"deviation": "35.7617366256", "rating": "1298.30415504", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0608366801962"}, "REBOL": {"deviation": "84.0927671791", "rating": "1621.18821145", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600290326588"}, "Fortran": {"deviation": "35.9313904248", "rating": "1433.23261001", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0613948651501"}, "Assembler": {"deviation": "40.6237103961", "rating": "1226.10376381", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600597658802"}, "Python": {"deviation": "41.419008577", "rating": "1798.89696897", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0591481362697"}, "Pascal": {"deviation": "36.3870645859", "rating": "1475.60290562", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0638264417486"}, "Haskell": {"deviation": "36.6569940129", "rating": "1844.74383478", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.061534177301"}, "Cobol": {"deviation": "40.9316401343", "rating": "1241.69575131", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0601766972233"}, "APL": {"deviation": "37.3416494511", "rating": "1287.36372589", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600796445048"}, "ActionScript": {"deviation": "127.801278181", "rating": "1236.30404855", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0600837694122"}, "Go": {"deviation": "31.9989381747", "rating": "1713.59652537", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.060625651101"}, "Visual Basic": {"deviation": "38.6612845264", "rating": "1340.0266948", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0615045501783"}, "PHP": {"deviation": "44.7787325517", "rating": "1377.8390022", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0704088353769"}, "Mozart-Oz": {"deviation": "40.4891672754", "rating": "1452.31021215", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.0612099499528"}, "Smalltalk": {"deviation": "40.0275900264", "rating": "1252.16485315", "ratingsMin": "1125.78704112", "ratingsMax": "1844.74383478", "volatility": "0.060778652615"}}, "Developers who primarily use this language often burn out after a few years": {"Coq": {"deviation": "37.1174447594", "rating": "1346.00256722", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0603108098279"}, "Eiffel": {"deviation": "55.7830579154", "rating": "1256.05494451", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0600260534362"}, "Java": {"deviation": "38.8727651476", "rating": "1626.72612278", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0634977385552"}, "Scala": {"deviation": "36.3904388372", "rating": "1419.61890941", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0616218090605"}, "Delphi": {"deviation": "36.3418436554", "rating": "1570.1899787", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0608935401485"}, "Ada": {"deviation": "36.9379539896", "rating": "1589.84772055", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0644429334089"}, "Perl": {"deviation": "36.9773943961", "rating": "1505.00830055", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0638579572232"}, "Lua": {"deviation": "35.9292274286", "rating": "1334.0488367", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0610354354969"}, "Shell": {"deviation": "36.5144443927", "rating": "1607.50067677", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.063379609874"}, "Matlab": {"deviation": "35.4963329417", "rating": "1524.12807251", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0608992271391"}, "Factor": {"deviation": "43.8607042444", "rating": "1413.34139448", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0606950832688"}, "Haxe": {"deviation": "45.6146959484", "rating": "1281.55369207", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0602836256786"}, "Erlang": {"deviation": "35.3175425464", "rating": "1526.41645166", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0623952745697"}, "Forth": {"deviation": "34.1966718078", "rating": "1523.145389", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0632839406888"}, "Scheme": {"deviation": "37.0333683147", "rating": "1437.89594462", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0629730889477"}, "Objective C": {"deviation": "36.8900226706", "rating": "1651.18427069", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0658127021353"}, "C#": {"deviation": "41.7267431841", "rating": "1563.33323783", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0712730362003"}, "Javascript": {"deviation": "39.4502275645", "rating": "1513.35070112", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0668516947922"}, "Common Lisp": {"deviation": "36.3960606534", "rating": "1496.17111916", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0664428096363"}, "TCL": {"deviation": "34.7130199551", "rating": "1584.03674291", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0633683480873"}, "F#": {"deviation": "40.5533121582", "rating": "1351.52268703", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0603983365084"}, "AWK": {"deviation": "35.206620858", "rating": "1561.13037523", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0654869910482"}, "Ruby": {"deviation": "38.2590760362", "rating": "1449.83186206", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0630894014964"}, "Agda": {"deviation": "116.094798977", "rating": "1097.28191717", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0600158492963"}, "Groovy": {"deviation": "36.1175551968", "rating": "1462.32043028", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.060495630343"}, "C": {"deviation": "38.616820216", "rating": "1694.320772", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.066311379861"}, "Mathematica": {"deviation": "40.779098564", "rating": "1400.80925834", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0601998053862"}, "D": {"deviation": "37.0212092029", "rating": "1458.42608698", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0615221364515"}, "O'Caml": {"deviation": "37.3113298886", "rating": "1318.67210373", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0607668000663"}, "Io": {"deviation": "41.7877529633", "rating": "1331.63062188", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0604560663179"}, "J": {"deviation": "42.3628660402", "rating": "1309.13573526", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0599730493489"}, "ELisp": {"deviation": "36.5520439806", "rating": "1458.23382349", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0610171565872"}, "C++": {"deviation": "39.5357658626", "rating": "1820.95220654", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0597495848841"}, "Standard ML": {"deviation": "38.6757456428", "rating": "1404.30721438", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0608699726126"}, "R": {"deviation": "35.6356417864", "rating": "1458.15768448", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0613626631096"}, "Clojure": {"deviation": "38.2057887816", "rating": "1291.54184422", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0604834492921"}, "Prolog": {"deviation": "35.4109371308", "rating": "1455.01024212", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0670160465956"}, "REBOL": {"deviation": "92.8205612677", "rating": "1435.30108297", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.059976078049"}, "Fortran": {"deviation": "34.9317809439", "rating": "1562.81207525", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0617686971972"}, "Assembler": {"deviation": "35.2037648863", "rating": "1588.47405243", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0605092794227"}, "Python": {"deviation": "41.6765859425", "rating": "1327.00943039", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0616677084591"}, "Pascal": {"deviation": "36.3821239519", "rating": "1613.73306528", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0631787697999"}, "Haskell": {"deviation": "39.6880538567", "rating": "1295.99764415", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0624981918591"}, "Cobol": {"deviation": "36.9546744479", "rating": "1679.57109897", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0605143926578"}, "APL": {"deviation": "37.7659060619", "rating": "1549.48798973", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.061938251547"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.06"}, "Go": {"deviation": "36.8692910533", "rating": "1377.06766359", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0602879702794"}, "Visual Basic": {"deviation": "37.027332579", "rating": "1781.78267258", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0601853877025"}, "PHP": {"deviation": "40.388013196", "rating": "1751.18834628", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0599480408374"}, "Mozart-Oz": {"deviation": "46.9667411219", "rating": "1387.21508983", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0611063554727"}, "Smalltalk": {"deviation": "37.1570449774", "rating": "1380.80875436", "ratingsMin": "1097.28191717", "ratingsMax": "1820.95220654", "volatility": "0.0604257002104"}}, "This language is likely to have a strong influence on future languages": {"Coq": {"deviation": "36.0984555452", "rating": "1890.80491022", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0608640145129"}, "Eiffel": {"deviation": "33.5728404219", "rating": "1649.11507289", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0602957743912"}, "Java": {"deviation": "44.6768108717", "rating": "1508.02506107", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0818302181918"}, "Scala": {"deviation": "39.8409164863", "rating": "1841.85695078", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0599457594582"}, "Delphi": {"deviation": "38.823186179", "rating": "1352.30045902", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0621910928638"}, "Ada": {"deviation": "36.7904928402", "rating": "1463.12359704", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.067809926629"}, "Perl": {"deviation": "43.4387742701", "rating": "1530.27764748", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0813864015187"}, "Lua": {"deviation": "39.8770382158", "rating": "1555.69168945", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0713271114307"}, "Shell": {"deviation": "40.9395545078", "rating": "1311.26800966", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0611890074779"}, "Matlab": {"deviation": "39.8258783038", "rating": "1360.73497399", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0601321867051"}, "Factor": {"deviation": "32.7317915535", "rating": "1483.38025279", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0621377782161"}, "Haxe": {"deviation": "33.7339052361", "rating": "1475.33239564", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0603862225416"}, "Erlang": {"deviation": "38.688157027", "rating": "1833.29443675", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0599892542752"}, "Forth": {"deviation": "36.8702658627", "rating": "1555.0474696", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0632468619836"}, "Scheme": {"deviation": "39.3000848589", "rating": "1728.0072245", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0606508873692"}, "Objective C": {"deviation": "41.0819939792", "rating": "1534.75323034", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0749725184764"}, "C#": {"deviation": "40.3943230601", "rating": "1548.20318289", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0675089467797"}, "Javascript": {"deviation": "46.4845578251", "rating": "1479.65428219", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0855450550176"}, "Common Lisp": {"deviation": "35.6746520634", "rating": "1674.38489058", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0610745425041"}, "TCL": {"deviation": "37.7499300459", "rating": "1329.25454064", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0606410636292"}, "F#": {"deviation": "38.8568035044", "rating": "1815.70229665", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0605107885655"}, "AWK": {"deviation": "38.498716489", "rating": "1280.88955886", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0603568610524"}, "Ruby": {"deviation": "39.4679128676", "rating": "1687.67469551", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0603969610187"}, "Agda": {"deviation": "49.8776002472", "rating": "1975.33706419", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0609293768143"}, "Groovy": {"deviation": "37.243365159", "rating": "1472.94349357", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0649870001899"}, "C": {"deviation": "63.5008123362", "rating": "1707.16097093", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.183675654265"}, "Mathematica": {"deviation": "39.7113364733", "rating": "1406.47685758", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0617172643762"}, "D": {"deviation": "34.2518274437", "rating": "1532.32512064", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0638346270918"}, "O'Caml": {"deviation": "36.7274850587", "rating": "1762.22889925", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0609129918111"}, "Io": {"deviation": "33.4762389932", "rating": "1393.88402858", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.064772975965"}, "J": {"deviation": "34.2602809", "rating": "1418.29433039", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0614624200001"}, "ELisp": {"deviation": "37.028463832", "rating": "1338.75988127", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.060995949089"}, "C++": {"deviation": "53.9736823729", "rating": "1435.41247573", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.11605791994"}, "Standard ML": {"deviation": "37.0400917084", "rating": "1709.36070085", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0621175034817"}, "R": {"deviation": "34.2490239101", "rating": "1539.03270087", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0614848464043"}, "Clojure": {"deviation": "37.5551455644", "rating": "1804.17808251", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.060038345507"}, "Prolog": {"deviation": "41.4270909726", "rating": "1480.43154714", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0742315677648"}, "REBOL": {"deviation": "63.6690863235", "rating": "1555.8694145", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0603335251298"}, "Fortran": {"deviation": "39.7054531426", "rating": "1252.29286798", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0606836252389"}, "Assembler": {"deviation": "43.7317741515", "rating": "1133.82806402", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0601648119551"}, "Python": {"deviation": "39.6578793736", "rating": "1712.09248764", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0609471190001"}, "Pascal": {"deviation": "38.5623904654", "rating": "1420.60954395", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0625429389745"}, "Haskell": {"deviation": "42.8356995002", "rating": "1883.98344736", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0597745700711"}, "Cobol": {"deviation": "37.6159677031", "rating": "1220.58062527", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0605833079697"}, "APL": {"deviation": "33.5473592036", "rating": "1444.68606778", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0638796529466"}, "ActionScript": {"deviation": "76.6208217691", "rating": "1326.20704395", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0600508262673"}, "Go": {"deviation": "31.7212725227", "rating": "1600.88887397", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.061204725297"}, "Visual Basic": {"deviation": "41.6699011317", "rating": "1232.57870317", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0606496699917"}, "PHP": {"deviation": "41.865693437", "rating": "1312.26465787", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0605880508935"}, "Mozart-Oz": {"deviation": "32.0688985811", "rating": "1665.12170924", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0605315255168"}, "Smalltalk": {"deviation": "35.1413455738", "rating": "1724.19055549", "ratingsMin": "1133.82806402", "ratingsMax": "1975.33706419", "volatility": "0.0607597053725"}}, "I usually use this language on solo projects": {"Coq": {"deviation": "34.9255572727", "rating": "1476.3175445", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0608741326156"}, "Eiffel": {"deviation": "39.2941813965", "rating": "1276.82415936", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0646326858527"}, "Java": {"deviation": "179.322024863", "rating": "1340.31330404", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "2.16589466952"}, "Scala": {"deviation": "42.1115945479", "rating": "1760.80093881", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0614544337986"}, "Delphi": {"deviation": "37.3621362004", "rating": "1240.20591933", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0607993300578"}, "Ada": {"deviation": "38.8117938038", "rating": "1160.18606979", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0602996252894"}, "Perl": {"deviation": "49.2445140362", "rating": "1422.29807654", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.103854619896"}, "Lua": {"deviation": "41.3326475664", "rating": "1378.01644196", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0722060188267"}, "Shell": {"deviation": "40.0952964115", "rating": "1507.14045179", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0758135449183"}, "Matlab": {"deviation": "38.970777156", "rating": "1412.33943176", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0604058918616"}, "Factor": {"deviation": "35.9385756478", "rating": "1523.23883178", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0603777143469"}, "Haxe": {"deviation": "37.6620227477", "rating": "1523.52011524", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.060806070221"}, "Erlang": {"deviation": "40.1405182035", "rating": "1461.38702758", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0709071760841"}, "Forth": {"deviation": "36.4685459931", "rating": "1281.06766863", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0633367350558"}, "Scheme": {"deviation": "49.652576755", "rating": "1425.06728833", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.101786272542"}, "Objective C": {"deviation": "42.7211375573", "rating": "1471.78727498", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.073127211837"}, "C#": {"deviation": "63.7729210325", "rating": "1526.40330144", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.164445318835"}, "Javascript": {"deviation": "58.5478279055", "rating": "1573.76576069", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.130992323698"}, "Common Lisp": {"deviation": "47.3043350169", "rating": "1391.81851208", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0977276151619"}, "TCL": {"deviation": "35.7840774969", "rating": "1400.07163032", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0618526574381"}, "F#": {"deviation": "38.832580171", "rating": "1613.95495073", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0606293082563"}, "AWK": {"deviation": "39.3417362387", "rating": "1348.5278863", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0666503167276"}, "Ruby": {"deviation": "41.6715216219", "rating": "1573.59902916", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0687089214616"}, "Agda": {"deviation": "94.343556129", "rating": "1847.32735702", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0605780255054"}, "Groovy": {"deviation": "42.4639756207", "rating": "1520.41682669", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0689027169165"}, "C": {"deviation": "201.30913114", "rating": "1481.99799941", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "1.55874103614"}, "Mathematica": {"deviation": "39.1738737456", "rating": "1526.24502249", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0612476272257"}, "D": {"deviation": "38.7138066347", "rating": "1456.04754117", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0617195863788"}, "O'Caml": {"deviation": "38.5962536518", "rating": "1589.43984318", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0692927880065"}, "Io": {"deviation": "36.0950254405", "rating": "1537.48873466", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0622059942639"}, "J": {"deviation": "37.1008631739", "rating": "1508.19653899", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0620779442289"}, "ELisp": {"deviation": "37.8638277538", "rating": "1519.77863094", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0652284227732"}, "C++": {"deviation": "189.349545766", "rating": "1154.36903049", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "2.01584393052"}, "Standard ML": {"deviation": "36.271135099", "rating": "1506.11352469", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0693774766053"}, "R": {"deviation": "38.8222091728", "rating": "1450.27286959", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.061427816508"}, "Clojure": {"deviation": "41.776936655", "rating": "1793.16211185", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0606271337137"}, "Prolog": {"deviation": "37.8636080216", "rating": "1297.00576391", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0631227406312"}, "REBOL": {"deviation": "212.984185162", "rating": "1699.66343766", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0600022194614"}, "Fortran": {"deviation": "39.3630715336", "rating": "1225.49100375", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0609695439578"}, "Assembler": {"deviation": "40.7849688717", "rating": "1351.20885291", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0622644079027"}, "Python": {"deviation": "44.4628462258", "rating": "1626.4586627", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0710818664122"}, "Pascal": {"deviation": "38.1235520514", "rating": "1248.60948607", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0602034277959"}, "Haskell": {"deviation": "40.8207604057", "rating": "1660.84424974", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0649157668983"}, "Cobol": {"deviation": "39.1431990436", "rating": "1122.69411705", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0612882658055"}, "APL": {"deviation": "36.8513203001", "rating": "1307.24607928", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0635540079359"}, "ActionScript": {"deviation": "91.8666311099", "rating": "1464.89827629", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0599892487126"}, "Go": {"deviation": "36.5751461992", "rating": "1441.69477617", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0619889221505"}, "Visual Basic": {"deviation": "40.9459034414", "rating": "1274.21401507", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0604191136479"}, "PHP": {"deviation": "47.1313049907", "rating": "1449.10676022", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0901901153441"}, "Mozart-Oz": {"deviation": "37.4645737182", "rating": "1395.37446495", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0603775182558"}, "Smalltalk": {"deviation": "40.2218808239", "rating": "1406.0567519", "ratingsMin": "1122.69411705", "ratingsMax": "1847.32735702", "volatility": "0.0707244605734"}}, "I often get angry when writing code in this language": {"Coq": {"deviation": "64.9965791233", "rating": "1331.53954814", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0602008568915"}, "Eiffel": {"deviation": "42.8696158274", "rating": "1647.6083575", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0606931946438"}, "Java": {"deviation": "42.6299849505", "rating": "1678.25639528", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0682446760553"}, "Scala": {"deviation": "39.3228692782", "rating": "1384.80106757", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0634652505419"}, "Delphi": {"deviation": "34.4356781894", "rating": "1569.57755792", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0613767988722"}, "Ada": {"deviation": "33.4329986512", "rating": "1644.32631906", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0607236167201"}, "Perl": {"deviation": "37.0317370376", "rating": "1632.39316973", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0619806137973"}, "Lua": {"deviation": "37.3803988852", "rating": "1411.94665055", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0627858844099"}, "Shell": {"deviation": "35.9516724907", "rating": "1602.19096877", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0605602515793"}, "Matlab": {"deviation": "36.1095339218", "rating": "1684.40214313", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0612957899955"}, "Factor": {"deviation": "48.3936679917", "rating": "1530.53411402", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0601467970116"}, "Haxe": {"deviation": "56.0933243474", "rating": "1298.04581799", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0599776040934"}, "Erlang": {"deviation": "36.026907893", "rating": "1400.4372211", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0629794417644"}, "Forth": {"deviation": "34.6693323262", "rating": "1534.4511044", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0617218487766"}, "Scheme": {"deviation": "38.4234814185", "rating": "1324.03252454", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.064759175094"}, "Objective C": {"deviation": "37.3288581306", "rating": "1620.44231825", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0621947024917"}, "C#": {"deviation": "40.3983135046", "rating": "1382.39378628", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0679318031545"}, "Javascript": {"deviation": "41.7879231738", "rating": "1606.97930694", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0663485245201"}, "Common Lisp": {"deviation": "36.9220392881", "rating": "1436.96610298", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0617434061788"}, "TCL": {"deviation": "35.0457706692", "rating": "1590.39231407", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0619981978081"}, "F#": {"deviation": "36.1178524951", "rating": "1494.70537354", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.061245694207"}, "AWK": {"deviation": "35.2578068848", "rating": "1496.2785199", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0641986675847"}, "Ruby": {"deviation": "38.7270742038", "rating": "1493.56511545", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0672973243966"}, "Agda": {"deviation": "99.3643957083", "rating": "1245.4451007", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0600429133486"}, "Groovy": {"deviation": "37.8348519157", "rating": "1615.34362773", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.061675345013"}, "C": {"deviation": "41.0338199348", "rating": "1555.02116366", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0714813230669"}, "Mathematica": {"deviation": "35.4883426097", "rating": "1562.72395544", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0632779687471"}, "D": {"deviation": "34.8736347741", "rating": "1461.77603058", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0609609071641"}, "O'Caml": {"deviation": "38.6848601943", "rating": "1424.4529118", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0602629908875"}, "Io": {"deviation": "48.8580675049", "rating": "1328.15535261", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0604274922705"}, "J": {"deviation": "69.9371103157", "rating": "1502.83855125", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0601093496909"}, "ELisp": {"deviation": "36.5824021689", "rating": "1497.04682626", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0609965458416"}, "C++": {"deviation": "38.4018241439", "rating": "1640.33317227", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.063694915602"}, "Standard ML": {"deviation": "36.4088881511", "rating": "1504.91242312", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0608439413859"}, "R": {"deviation": "34.479545743", "rating": "1521.99574147", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0607588510139"}, "Clojure": {"deviation": "38.1284765241", "rating": "1334.33000297", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0600732879294"}, "Prolog": {"deviation": "35.105129272", "rating": "1587.42807057", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0656798978746"}, "REBOL": {"deviation": "101.666468636", "rating": "1236.71779056", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0602256434675"}, "Fortran": {"deviation": "35.9870158609", "rating": "1690.42249758", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0601412601956"}, "Assembler": {"deviation": "35.8656853278", "rating": "1654.84987124", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0610248083557"}, "Python": {"deviation": "45.7545795665", "rating": "1331.34475983", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0717138929472"}, "Pascal": {"deviation": "34.9176375632", "rating": "1616.90075115", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0620605344805"}, "Haskell": {"deviation": "37.2722553103", "rating": "1397.72936555", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.062427981005"}, "Cobol": {"deviation": "34.974745079", "rating": "1714.88892212", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0601874352934"}, "APL": {"deviation": "50.0913593617", "rating": "1567.33127542", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0607791152816"}, "ActionScript": {"deviation": "81.5874289351", "rating": "1867.33296242", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.060060439009"}, "Go": {"deviation": "36.8645915131", "rating": "1441.038048", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0602076586552"}, "Visual Basic": {"deviation": "38.7845561848", "rating": "1832.71864484", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.060193875907"}, "PHP": {"deviation": "39.8837861228", "rating": "1741.2941474", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0602702360173"}, "Mozart-Oz": {"deviation": "72.4130267947", "rating": "1448.73348402", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0600063036261"}, "Smalltalk": {"deviation": "34.5328979602", "rating": "1389.02357534", "ratingsMin": "1236.71779056", "ratingsMax": "1867.33296242", "volatility": "0.0602208754527"}}, "It is easy to tell at a glance what code in this language does": {"Coq": {"deviation": "42.1808079177", "rating": "1293.05734337", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0601420661256"}, "Eiffel": {"deviation": "35.6579535614", "rating": "1575.8145661", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0608316596428"}, "Java": {"deviation": "62.5309589945", "rating": "1648.12760461", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.150326026735"}, "Scala": {"deviation": "39.3486802262", "rating": "1556.38628598", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0684205892708"}, "Delphi": {"deviation": "38.1576100469", "rating": "1446.57884288", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0651033970554"}, "Ada": {"deviation": "33.894765875", "rating": "1500.57021558", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0661686674466"}, "Perl": {"deviation": "40.6777424268", "rating": "1265.16184369", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.061454385832"}, "Lua": {"deviation": "38.994414783", "rating": "1604.95186279", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0690785904978"}, "Shell": {"deviation": "41.4176401725", "rating": "1463.99061493", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0740673453765"}, "Matlab": {"deviation": "38.7579729337", "rating": "1474.97457675", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0628070412161"}, "Factor": {"deviation": "35.3511568744", "rating": "1383.55588727", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0625301570204"}, "Haxe": {"deviation": "37.4189434595", "rating": "1474.2997925", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0604931330384"}, "Erlang": {"deviation": "37.869488591", "rating": "1403.07247968", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.066673318448"}, "Forth": {"deviation": "36.1373159267", "rating": "1247.66820076", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0600910738351"}, "Scheme": {"deviation": "46.015139702", "rating": "1520.04698926", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0859721983752"}, "Objective C": {"deviation": "39.7886124697", "rating": "1571.96246148", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0733130842357"}, "C#": {"deviation": "42.1731255714", "rating": "1699.77827848", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0657902545154"}, "Javascript": {"deviation": "52.7743639782", "rating": "1480.61208378", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.118893167208"}, "Common Lisp": {"deviation": "45.3963782456", "rating": "1332.12769901", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0888465179267"}, "TCL": {"deviation": "37.9894043471", "rating": "1492.83623579", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0644908901767"}, "F#": {"deviation": "39.3835451717", "rating": "1526.02703291", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0609774655047"}, "AWK": {"deviation": "37.1560817684", "rating": "1546.40418466", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0687334379383"}, "Ruby": {"deviation": "40.644262344", "rating": "1546.8059726", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0691707951347"}, "Agda": {"deviation": "53.9543128737", "rating": "1413.75355754", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0603731926047"}, "Groovy": {"deviation": "37.1502942844", "rating": "1580.19149787", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0666796661662"}, "C": {"deviation": "132.466867003", "rating": "1446.2662436", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.969350099346"}, "Mathematica": {"deviation": "38.0061929194", "rating": "1562.82645935", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0601746539855"}, "D": {"deviation": "37.3189037701", "rating": "1530.18130541", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0649704104289"}, "O'Caml": {"deviation": "38.2953029713", "rating": "1548.22204691", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0641032228775"}, "Io": {"deviation": "34.3712302812", "rating": "1608.67559873", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0604893187862"}, "J": {"deviation": "35.0805668221", "rating": "1315.12615935", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0602774989516"}, "ELisp": {"deviation": "38.4514485585", "rating": "1311.86719943", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0645813569785"}, "C++": {"deviation": "42.5004225374", "rating": "1390.66867214", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0648493433943"}, "Standard ML": {"deviation": "37.5224150976", "rating": "1589.62132387", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0619944255376"}, "R": {"deviation": "37.1133599623", "rating": "1425.40468753", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0607904527479"}, "Clojure": {"deviation": "40.1540450237", "rating": "1616.31380994", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0649778553347"}, "Prolog": {"deviation": "37.1711598606", "rating": "1251.89963089", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0624136318658"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.06"}, "Fortran": {"deviation": "35.0823058828", "rating": "1488.74104034", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0633503808057"}, "Assembler": {"deviation": "45.5027422212", "rating": "1186.04018688", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0599937353307"}, "Python": {"deviation": "43.7597969908", "rating": "1745.98362624", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0599814780517"}, "Pascal": {"deviation": "35.9051204154", "rating": "1433.53965387", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0644202383899"}, "Haskell": {"deviation": "47.4136644985", "rating": "1415.16800294", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.096588140306"}, "Cobol": {"deviation": "38.2179069019", "rating": "1445.86779262", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0697372620578"}, "APL": {"deviation": "34.0671577666", "rating": "1216.78795628", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0601348986504"}, "ActionScript": {"deviation": "95.2483285142", "rating": "1736.57866705", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.060132830241"}, "Go": {"deviation": "36.7468626017", "rating": "1696.98399124", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0602569635637"}, "Visual Basic": {"deviation": "39.5399374011", "rating": "1550.83251547", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0721705347215"}, "PHP": {"deviation": "46.3738019723", "rating": "1508.05648627", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0967716299937"}, "Mozart-Oz": {"deviation": "35.2211882123", "rating": "1508.15623842", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0605198939736"}, "Smalltalk": {"deviation": "37.2178142694", "rating": "1632.05232787", "ratingsMin": "1186.04018688", "ratingsMax": "1745.98362624", "volatility": "0.0648479893055"}}, "This language has a strong static type system": {"Coq": {"deviation": "45.8248997514", "rating": "2221.2026472", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.061765718943"}, "Eiffel": {"deviation": "38.1408265774", "rating": "1801.10328809", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0610919214316"}, "Java": {"deviation": "44.1961758752", "rating": "1835.47903054", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0586578109232"}, "Scala": {"deviation": "45.8772130424", "rating": "1985.92411728", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0600215785606"}, "Delphi": {"deviation": "40.5363295379", "rating": "1729.11269184", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.060008808878"}, "Ada": {"deviation": "41.5472564812", "rating": "1883.6923732", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0600247819035"}, "Perl": {"deviation": "40.8665367002", "rating": "1173.1494857", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.059923321958"}, "Lua": {"deviation": "40.9633733827", "rating": "1284.99111785", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0598717392507"}, "Shell": {"deviation": "40.8150735859", "rating": "1136.2492428", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0597962078324"}, "Matlab": {"deviation": "40.061410749", "rating": "1338.11501769", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0600119737945"}, "Factor": {"deviation": "35.8437685743", "rating": "1415.18763562", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0604705315563"}, "Haxe": {"deviation": "45.2196692341", "rating": "1634.25806346", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0602651338436"}, "Erlang": {"deviation": "40.6684012842", "rating": "1345.07220179", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0673664643265"}, "Forth": {"deviation": "37.1762854415", "rating": "1136.80584664", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0602136917548"}, "Scheme": {"deviation": "37.886282129", "rating": "1267.39541288", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0602419493875"}, "Objective C": {"deviation": "42.8008489306", "rating": "1690.90977294", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0661772076781"}, "C#": {"deviation": "41.7460455921", "rating": "1797.31974647", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0592741335128"}, "Javascript": {"deviation": "41.6445185904", "rating": "1233.5703708", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.059309726935"}, "Common Lisp": {"deviation": "39.076701944", "rating": "1254.19203383", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.065840819822"}, "TCL": {"deviation": "37.9965298824", "rating": "1271.23671993", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.060006518148"}, "F#": {"deviation": "41.8972870093", "rating": "1975.7920663", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0600544302864"}, "AWK": {"deviation": "39.0951105416", "rating": "1189.31081484", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0598967793269"}, "Ruby": {"deviation": "42.3724370793", "rating": "1199.91510282", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0595337119751"}, "Agda": {"deviation": "94.1151853828", "rating": "2118.25441376", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0604692820177"}, "Groovy": {"deviation": "40.0753733623", "rating": "1423.36793017", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0636261978204"}, "C": {"deviation": "49.475983836", "rating": "1702.6590457", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0755344062509"}, "Mathematica": {"deviation": "40.8990770402", "rating": "1301.35619871", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0601504119314"}, "D": {"deviation": "39.3634251129", "rating": "1843.21226139", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0609945966356"}, "O'Caml": {"deviation": "47.0482482963", "rating": "2136.17213192", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0600969780728"}, "Io": {"deviation": "37.2570834922", "rating": "1246.67112227", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.060775653232"}, "J": {"deviation": "38.4722262742", "rating": "1428.29556655", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0622802022616"}, "ELisp": {"deviation": "36.4867439103", "rating": "1226.18156464", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0602308041848"}, "C++": {"deviation": "43.7018577479", "rating": "1756.04262829", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0590801182098"}, "Standard ML": {"deviation": "44.5569038078", "rating": "2134.55167875", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0602144645177"}, "R": {"deviation": "38.744285679", "rating": "1331.60121073", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0611722866853"}, "Clojure": {"deviation": "37.9076769032", "rating": "1414.65180382", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.062302595191"}, "Prolog": {"deviation": "36.6741907481", "rating": "1434.6710389", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0622610693245"}, "REBOL": {"deviation": "88.6014447494", "rating": "1336.48208589", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0601560427003"}, "Fortran": {"deviation": "39.427238104", "rating": "1576.88383826", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0658592629583"}, "Assembler": {"deviation": "41.0484040932", "rating": "1083.47862672", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0606767720373"}, "Python": {"deviation": "43.1126219354", "rating": "1291.16935615", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0597666851401"}, "Pascal": {"deviation": "38.6777347549", "rating": "1813.67085005", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0598138402592"}, "Haskell": {"deviation": "52.8459959713", "rating": "2160.41114625", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0599696000186"}, "Cobol": {"deviation": "38.9599397201", "rating": "1559.91064552", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0628954436559"}, "APL": {"deviation": "35.6768965415", "rating": "1238.56388144", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0603361163944"}, "ActionScript": {"deviation": "76.3930486856", "rating": "1458.28500892", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0599738376293"}, "Go": {"deviation": "40.0163001421", "rating": "1740.08144463", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0602741564449"}, "Visual Basic": {"deviation": "42.5793105669", "rating": "1437.45506006", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0676556492991"}, "PHP": {"deviation": "41.5518526372", "rating": "1223.01300553", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.059742345862"}, "Mozart-Oz": {"deviation": "36.4826575493", "rating": "1465.93413029", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.0641713528886"}, "Smalltalk": {"deviation": "38.004223056", "rating": "1209.58308414", "ratingsMin": "1083.47862672", "ratingsMax": "2221.2026472", "volatility": "0.060871897915"}}, "Programs written in this language will usually work in future versions of the language": {"Coq": {"deviation": "36.8481200201", "rating": "1222.49916242", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0608843730313"}, "Eiffel": {"deviation": "31.1649140061", "rating": "1377.90124949", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0636282244812"}, "Java": {"deviation": "39.6251648246", "rating": "1744.23609685", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0601964063234"}, "Scala": {"deviation": "41.6076791116", "rating": "1271.49414445", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0614181448297"}, "Delphi": {"deviation": "35.9580186415", "rating": "1585.08482916", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0664410030955"}, "Ada": {"deviation": "32.259587031", "rating": "1490.29112952", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0625063645754"}, "Perl": {"deviation": "40.1443843394", "rating": "1534.77318999", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0860595142392"}, "Lua": {"deviation": "37.1426236833", "rating": "1498.20676477", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0698620824828"}, "Shell": {"deviation": "37.7126850452", "rating": "1510.93337926", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0735398204628"}, "Matlab": {"deviation": "37.285892242", "rating": "1399.0246636", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0614745015206"}, "Factor": {"deviation": "33.4286517868", "rating": "1469.69953466", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0603699922515"}, "Haxe": {"deviation": "32.7790628745", "rating": "1482.24738636", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0611272002909"}, "Erlang": {"deviation": "37.4604358124", "rating": "1571.96983781", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0710453686856"}, "Forth": {"deviation": "37.1353491601", "rating": "1345.23459508", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0625334944677"}, "Scheme": {"deviation": "37.6670239988", "rating": "1439.09158663", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0757585585581"}, "Objective C": {"deviation": "40.4097992919", "rating": "1545.49294015", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0758627250233"}, "C#": {"deviation": "41.1938194896", "rating": "1605.58936785", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0681379104966"}, "Javascript": {"deviation": "54.4180361434", "rating": "1587.73391834", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.140412418843"}, "Common Lisp": {"deviation": "36.2421468148", "rating": "1676.44607448", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0642571354286"}, "TCL": {"deviation": "32.5350305369", "rating": "1584.81710143", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0631514634122"}, "F#": {"deviation": "35.2727685697", "rating": "1413.70916951", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0635043018965"}, "AWK": {"deviation": "35.5800445972", "rating": "1573.25520155", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0656182561289"}, "Ruby": {"deviation": "38.8049780706", "rating": "1420.23408392", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0684524119021"}, "Agda": {"deviation": "82.8250425131", "rating": "1417.40344617", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.060035640174"}, "Groovy": {"deviation": "38.3208988308", "rating": "1529.45235427", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0639145908644"}, "C": {"deviation": "37.9726163696", "rating": "1756.56340854", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0608190263293"}, "Mathematica": {"deviation": "38.6074123435", "rating": "1423.4844656", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0603954115456"}, "D": {"deviation": "34.2590897718", "rating": "1441.59615868", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0627755180293"}, "O'Caml": {"deviation": "37.0854020558", "rating": "1549.32408895", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0666477967886"}, "Io": {"deviation": "32.2363707915", "rating": "1419.80260251", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0601176473709"}, "J": {"deviation": "32.4164200569", "rating": "1539.54008701", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0659970476185"}, "ELisp": {"deviation": "33.3041756102", "rating": "1488.01722226", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0631840357347"}, "C++": {"deviation": "40.2306695835", "rating": "1706.65484377", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0680072338019"}, "Standard ML": {"deviation": "33.8186305325", "rating": "1545.9396621", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0621455948806"}, "R": {"deviation": "34.1771838383", "rating": "1550.58248621", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0615141734152"}, "Clojure": {"deviation": "38.7255284229", "rating": "1452.14949289", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.067163552668"}, "Prolog": {"deviation": "36.4770062965", "rating": "1525.2680361", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0723696843676"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.06"}, "Fortran": {"deviation": "35.0501188884", "rating": "1614.49272223", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0655504717194"}, "Assembler": {"deviation": "51.9485863701", "rating": "1462.64118247", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.135431786873"}, "Python": {"deviation": "54.8447989456", "rating": "1498.52458812", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.158528209467"}, "Pascal": {"deviation": "36.147042177", "rating": "1510.27620206", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0658440374899"}, "Haskell": {"deviation": "41.0632245149", "rating": "1595.16147606", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0851748740843"}, "Cobol": {"deviation": "34.997086989", "rating": "1583.54264676", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.064863740514"}, "APL": {"deviation": "33.7424533693", "rating": "1542.37578175", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0650041427051"}, "ActionScript": {"deviation": "88.170554134", "rating": "1384.25155043", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0600015222973"}, "Go": {"deviation": "35.5103584297", "rating": "1345.18696289", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0613219185036"}, "Visual Basic": {"deviation": "38.0693007687", "rating": "1377.02818341", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0640495983994"}, "PHP": {"deviation": "42.3228181091", "rating": "1391.13077937", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0762132901883"}, "Mozart-Oz": {"deviation": "31.0862790275", "rating": "1514.64002497", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0606060707262"}, "Smalltalk": {"deviation": "34.8323291996", "rating": "1509.59387797", "ratingsMin": "1222.49916242", "ratingsMax": "1756.56340854", "volatility": "0.0645371581888"}}, "When I run into problems my colleagues can provide me with immediate help with this language": {"Coq": {"deviation": "38.047428264", "rating": "1419.30427153", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0620310616031"}, "Eiffel": {"deviation": "39.908020245", "rating": "1414.38102426", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0604261122022"}, "Java": {"deviation": "42.3871414938", "rating": "1912.6159363", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0590897903848"}, "Scala": {"deviation": "43.4005656348", "rating": "1524.186661", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0708770178773"}, "Delphi": {"deviation": "41.1379687366", "rating": "1537.78727622", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0670363087739"}, "Ada": {"deviation": "35.7239240281", "rating": "1407.52366417", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0628954773664"}, "Perl": {"deviation": "38.672449078", "rating": "1631.39938708", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.060461740271"}, "Lua": {"deviation": "37.2948259259", "rating": "1636.49158165", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0644113435952"}, "Shell": {"deviation": "37.4671610643", "rating": "1765.6526642", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0609780533316"}, "Matlab": {"deviation": "39.1774917437", "rating": "1636.32250568", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0611664874252"}, "Factor": {"deviation": "43.2985989016", "rating": "1356.26555333", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0600124394598"}, "Haxe": {"deviation": "46.2570978267", "rating": "1319.0893525", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0606776977246"}, "Erlang": {"deviation": "37.9994350397", "rating": "1529.64305964", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0655488907152"}, "Forth": {"deviation": "39.4579657821", "rating": "1380.5314712", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0604391973912"}, "Scheme": {"deviation": "41.0800437864", "rating": "1440.18789348", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0699370791983"}, "Objective C": {"deviation": "38.3991267558", "rating": "1659.2732206", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0662175159938"}, "C#": {"deviation": "41.0601909222", "rating": "1902.92127764", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0597588032444"}, "Javascript": {"deviation": "39.3469498177", "rating": "1852.51614133", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0590664245456"}, "Common Lisp": {"deviation": "38.70843496", "rating": "1438.71361806", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0653913351412"}, "TCL": {"deviation": "38.1678909477", "rating": "1470.05743404", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0678630218576"}, "F#": {"deviation": "42.8392240356", "rating": "1491.59160593", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0667165306902"}, "AWK": {"deviation": "38.6823313431", "rating": "1575.03909233", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0676985566159"}, "Ruby": {"deviation": "40.2987722832", "rating": "1642.29458405", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0609389711028"}, "Agda": {"deviation": "57.0393991626", "rating": "1283.4210407", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0648862167255"}, "Groovy": {"deviation": "39.4338974382", "rating": "1569.78661492", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0624852447044"}, "C": {"deviation": "39.0235157613", "rating": "1844.80836053", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0588338976233"}, "Mathematica": {"deviation": "44.6125876855", "rating": "1351.64779694", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0601421887738"}, "D": {"deviation": "38.874897437", "rating": "1469.9508346", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0626072166401"}, "O'Caml": {"deviation": "40.7853101789", "rating": "1407.22781306", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0714962476725"}, "Io": {"deviation": "36.644343635", "rating": "1381.54999868", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0611203129097"}, "J": {"deviation": "35.5176645455", "rating": "1482.10388701", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0607470383801"}, "ELisp": {"deviation": "36.2058227639", "rating": "1545.0950554", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0612863488098"}, "C++": {"deviation": "39.1876423604", "rating": "1815.91469676", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0599310883373"}, "Standard ML": {"deviation": "36.1327037705", "rating": "1429.49044246", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0628337722345"}, "R": {"deviation": "37.5817395152", "rating": "1531.8086675", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0614643497679"}, "Clojure": {"deviation": "39.0501485065", "rating": "1440.73027021", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0636603226103"}, "Prolog": {"deviation": "43.8083669374", "rating": "1298.29096436", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0614800179659"}, "REBOL": {"deviation": "144.445499831", "rating": "1166.63513978", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0600033764025"}, "Fortran": {"deviation": "37.3740476986", "rating": "1496.40017328", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0750916298059"}, "Assembler": {"deviation": "43.5185402008", "rating": "1495.225994", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0757281088405"}, "Python": {"deviation": "39.5604476982", "rating": "1714.47416032", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0593211322375"}, "Pascal": {"deviation": "42.0591918373", "rating": "1547.31330447", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0673120510048"}, "Haskell": {"deviation": "45.1815803328", "rating": "1431.81263451", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0821946137429"}, "Cobol": {"deviation": "42.1123958559", "rating": "1375.15629974", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0636123009038"}, "APL": {"deviation": "39.5172895829", "rating": "1263.16033983", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0601984713146"}, "ActionScript": {"deviation": "131.061382567", "rating": "1756.98302334", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0603758620468"}, "Go": {"deviation": "39.0173467707", "rating": "1428.76888637", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0613823487736"}, "Visual Basic": {"deviation": "39.3619454711", "rating": "1640.00190874", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0641968888494"}, "PHP": {"deviation": "38.913061243", "rating": "1795.54292629", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0607622553602"}, "Mozart-Oz": {"deviation": "34.3554394804", "rating": "1387.94341412", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.0626688127481"}, "Smalltalk": {"deviation": "37.8496488702", "rating": "1357.62431774", "ratingsMin": "1166.63513978", "ratingsMax": "1912.6159363", "volatility": "0.065346449745"}}, "Programs written in this language tend to be efficient": {"Coq": {"deviation": "44.7590326046", "rating": "1222.90279603", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0602878197857"}, "Eiffel": {"deviation": "36.1313149415", "rating": "1552.19542063", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0606616721455"}, "Java": {"deviation": "44.5566846221", "rating": "1547.28916311", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0781860692067"}, "Scala": {"deviation": "36.1908889447", "rating": "1568.02954148", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0602507543926"}, "Delphi": {"deviation": "39.2806478332", "rating": "1576.35799319", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0626159699848"}, "Ada": {"deviation": "35.2309775148", "rating": "1687.70255202", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0617671067527"}, "Perl": {"deviation": "41.6476915137", "rating": "1493.0946217", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0690430955564"}, "Lua": {"deviation": "42.3445623006", "rating": "1502.31357767", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0706507326266"}, "Shell": {"deviation": "41.8523594421", "rating": "1311.04181676", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0605184635724"}, "Matlab": {"deviation": "38.2296542488", "rating": "1441.02830056", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.063035403205"}, "Factor": {"deviation": "38.6916315848", "rating": "1614.44038365", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0613695472216"}, "Haxe": {"deviation": "41.6052360423", "rating": "1457.64452836", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0605179667114"}, "Erlang": {"deviation": "39.7900575112", "rating": "1579.17953698", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0646582576144"}, "Forth": {"deviation": "38.3657518075", "rating": "1774.32407138", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0606495180786"}, "Scheme": {"deviation": "43.5580379514", "rating": "1556.6128162", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0704132072818"}, "Objective C": {"deviation": "38.912465996", "rating": "1651.41402735", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0600069452807"}, "C#": {"deviation": "40.3587390125", "rating": "1578.16464558", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0609903494972"}, "Javascript": {"deviation": "41.6531283604", "rating": "1346.7783774", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060861748678"}, "Common Lisp": {"deviation": "41.2306776515", "rating": "1569.06122188", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0646488889934"}, "TCL": {"deviation": "39.5343482951", "rating": "1239.44858385", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0600047308857"}, "F#": {"deviation": "36.3485654484", "rating": "1700.59498292", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060187540675"}, "AWK": {"deviation": "40.2912100813", "rating": "1274.41885107", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0621655343528"}, "Ruby": {"deviation": "43.5118570967", "rating": "1231.65246324", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0604447919415"}, "Agda": {"deviation": "91.7323508259", "rating": "1144.94773901", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0601025331035"}, "Groovy": {"deviation": "38.1021289564", "rating": "1409.24848162", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060629601431"}, "C": {"deviation": "46.7726231697", "rating": "1922.20895958", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.059750249513"}, "Mathematica": {"deviation": "43.0930588815", "rating": "1431.48725356", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0605053913694"}, "D": {"deviation": "39.6020184612", "rating": "1787.12527904", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0600146568964"}, "O'Caml": {"deviation": "39.3714973272", "rating": "1827.86759473", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.059977496677"}, "Io": {"deviation": "39.122123", "rating": "1392.07810062", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0611670981539"}, "J": {"deviation": "43.5967601909", "rating": "1597.92913973", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0604860702602"}, "ELisp": {"deviation": "40.8229323825", "rating": "1220.53013629", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0601923157191"}, "C++": {"deviation": "41.8633962691", "rating": "1863.8502588", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0592132927426"}, "Standard ML": {"deviation": "35.9638241697", "rating": "1575.41182523", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060744556917"}, "R": {"deviation": "40.290515157", "rating": "1376.8113985", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060399281464"}, "Clojure": {"deviation": "40.7663825076", "rating": "1592.49058101", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0648004686038"}, "Prolog": {"deviation": "41.5916479719", "rating": "1207.57349089", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060401492292"}, "REBOL": {"deviation": "114.576780487", "rating": "1311.27800758", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0600952915894"}, "Fortran": {"deviation": "39.2422383162", "rating": "1693.96757599", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.060120545463"}, "Assembler": {"deviation": "46.3884167343", "rating": "2025.96905406", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0599285935517"}, "Python": {"deviation": "45.5891807433", "rating": "1476.60221862", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0761536050411"}, "Pascal": {"deviation": "37.2904050157", "rating": "1625.1967472", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0647538719224"}, "Haskell": {"deviation": "39.3763451063", "rating": "1590.11568297", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0620597951411"}, "Cobol": {"deviation": "38.9013268938", "rating": "1355.5460475", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0610779080867"}, "APL": {"deviation": "38.7820757046", "rating": "1572.56031839", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0611184895311"}, "ActionScript": {"deviation": "105.065504858", "rating": "1312.31155886", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0600276645001"}, "Go": {"deviation": "37.659133601", "rating": "1779.3548428", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0603938285992"}, "Visual Basic": {"deviation": "42.4670054189", "rating": "1257.50471494", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.059916923615"}, "PHP": {"deviation": "44.4167103754", "rating": "1237.84212968", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0607304756544"}, "Mozart-Oz": {"deviation": "40.1407670259", "rating": "1388.96440342", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0602391360177"}, "Smalltalk": {"deviation": "36.4009928967", "rating": "1485.34273585", "ratingsMin": "1144.94773901", "ratingsMax": "2025.96905406", "volatility": "0.0612158380408"}}, "This language is very flexible": {"Coq": {"deviation": "34.3537081903", "rating": "1400.09181031", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0617060281344"}, "Eiffel": {"deviation": "31.5432002078", "rating": "1503.97627324", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0615558344395"}, "Java": {"deviation": "47.5884751493", "rating": "1408.43620224", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0897633332885"}, "Scala": {"deviation": "37.4239535032", "rating": "1765.69745937", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0602623090488"}, "Delphi": {"deviation": "38.2686833096", "rating": "1305.71321921", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0602367699484"}, "Ada": {"deviation": "36.5324750237", "rating": "1441.87557943", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0619351312514"}, "Perl": {"deviation": "39.6841562303", "rating": "1694.23544387", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0618192371839"}, "Lua": {"deviation": "39.841897895", "rating": "1651.74869565", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.060846823488"}, "Shell": {"deviation": "40.1981893176", "rating": "1409.23334556", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0643705286821"}, "Matlab": {"deviation": "38.5484560121", "rating": "1308.92780641", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0601604332779"}, "Factor": {"deviation": "32.2888203844", "rating": "1712.66855816", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.06160750975"}, "Haxe": {"deviation": "39.4190216528", "rating": "1441.86337784", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0604829137694"}, "Erlang": {"deviation": "36.7578627081", "rating": "1469.42355383", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.067494091058"}, "Forth": {"deviation": "36.2559160188", "rating": "1636.73722415", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0672736980672"}, "Scheme": {"deviation": "40.0970974254", "rating": "1787.62500601", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0602604761076"}, "Objective C": {"deviation": "39.1408626948", "rating": "1447.89174373", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.068044264367"}, "C#": {"deviation": "40.8388187815", "rating": "1463.26107148", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.073185399593"}, "Javascript": {"deviation": "43.2557415241", "rating": "1556.93583831", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0707320357827"}, "Common Lisp": {"deviation": "37.0899004477", "rating": "1747.99946574", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0599058986853"}, "TCL": {"deviation": "35.3600451251", "rating": "1565.68723349", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0654516757734"}, "F#": {"deviation": "36.7147925409", "rating": "1628.85025394", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0622408454493"}, "AWK": {"deviation": "36.8142275895", "rating": "1419.35765961", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0623303443163"}, "Ruby": {"deviation": "42.2834970831", "rating": "1855.51106449", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0596708003895"}, "Agda": {"deviation": "89.7733880158", "rating": "1635.07304525", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0600509163039"}, "Groovy": {"deviation": "37.087502687", "rating": "1656.22402308", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0603651803765"}, "C": {"deviation": "216.936049048", "rating": "1618.39347992", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "1.47278168518"}, "Mathematica": {"deviation": "39.7219236008", "rating": "1422.29078323", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0613246603351"}, "D": {"deviation": "34.3048799705", "rating": "1446.42975925", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0621730638295"}, "O'Caml": {"deviation": "35.4779212543", "rating": "1552.64530655", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0612395180277"}, "Io": {"deviation": "40.3694732742", "rating": "1717.47324457", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0600436536457"}, "J": {"deviation": "32.959688619", "rating": "1571.50366321", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0635583891738"}, "ELisp": {"deviation": "35.5012528", "rating": "1584.86933786", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0632607531262"}, "C++": {"deviation": "95.2311474137", "rating": "1729.16541423", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.342874404972"}, "Standard ML": {"deviation": "34.9741365895", "rating": "1527.25332838", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0643365890517"}, "R": {"deviation": "36.2083239973", "rating": "1515.29995362", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0616587764642"}, "Clojure": {"deviation": "38.5997375287", "rating": "1788.86635446", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0602466266251"}, "Prolog": {"deviation": "37.7375387214", "rating": "1369.08661077", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0639482952403"}, "REBOL": {"deviation": "80.0292818704", "rating": "1816.3477597", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.060835656963"}, "Fortran": {"deviation": "43.1957433995", "rating": "1213.84421622", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0600830051942"}, "Assembler": {"deviation": "39.0790697681", "rating": "1443.39211159", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0673708885984"}, "Python": {"deviation": "40.9367271876", "rating": "1682.94223494", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.060114114936"}, "Pascal": {"deviation": "39.85582766", "rating": "1228.92219685", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0601294832681"}, "Haskell": {"deviation": "38.8477231393", "rating": "1492.48523445", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0685623764501"}, "Cobol": {"deviation": "41.7198537567", "rating": "1308.58697989", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0600782930515"}, "APL": {"deviation": "35.292688017", "rating": "1303.40842727", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0602903808059"}, "ActionScript": {"deviation": "120.155054266", "rating": "1178.89016885", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0601754199408"}, "Go": {"deviation": "36.5000072878", "rating": "1564.44906887", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0630720878047"}, "Visual Basic": {"deviation": "37.3356364377", "rating": "1326.50514968", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0607131029838"}, "PHP": {"deviation": "45.121524337", "rating": "1475.14910321", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0779376967676"}, "Mozart-Oz": {"deviation": "35.1170174277", "rating": "1585.4966047", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0605641999697"}, "Smalltalk": {"deviation": "36.1307659995", "rating": "1676.80369572", "ratingsMin": "1178.89016885", "ratingsMax": "1855.51106449", "volatility": "0.0612119349457"}}, "This language has a niche in which it is great": {"Coq": {"deviation": "58.4454902724", "rating": "1914.50588669", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0601013089619"}, "Eiffel": {"deviation": "33.445173998", "rating": "1354.92598001", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0606448482862"}, "Java": {"deviation": "37.5907457072", "rating": "1327.91073194", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0606798431286"}, "Scala": {"deviation": "39.1860404612", "rating": "1354.16104198", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.067461213053"}, "Delphi": {"deviation": "37.0205771877", "rating": "1355.0972882", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0611279668321"}, "Ada": {"deviation": "35.3311183616", "rating": "1466.73921911", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0647343826171"}, "Perl": {"deviation": "44.2116541651", "rating": "1445.00095227", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.103510033146"}, "Lua": {"deviation": "39.3203149142", "rating": "1661.59613603", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0644047629472"}, "Shell": {"deviation": "47.8866006137", "rating": "1592.73496542", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0973187801179"}, "Matlab": {"deviation": "42.2584756868", "rating": "1744.73576471", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0604619320857"}, "Factor": {"deviation": "34.7113412894", "rating": "1355.30163928", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0648384547754"}, "Haxe": {"deviation": "42.503400162", "rating": "1605.93218964", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0599728913441"}, "Erlang": {"deviation": "39.913519961", "rating": "1734.00602116", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0608064804047"}, "Forth": {"deviation": "33.2176454409", "rating": "1598.3461372", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0639230582362"}, "Scheme": {"deviation": "38.8894782212", "rating": "1364.29274369", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0764037750596"}, "Objective C": {"deviation": "36.1053931103", "rating": "1447.45133342", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0691251823775"}, "C#": {"deviation": "38.0042752062", "rating": "1272.25115273", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0612227127891"}, "Javascript": {"deviation": "45.7491165356", "rating": "1538.86359878", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0992622952966"}, "Common Lisp": {"deviation": "35.4928006426", "rating": "1448.24880738", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0665892034477"}, "TCL": {"deviation": "34.5283302289", "rating": "1377.66216678", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0638654985358"}, "F#": {"deviation": "34.9955028889", "rating": "1450.90340856", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.065561750254"}, "AWK": {"deviation": "37.0727388536", "rating": "1566.76467807", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0748760754296"}, "Ruby": {"deviation": "40.463013686", "rating": "1471.75112895", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0796068551476"}, "Agda": {"deviation": "40.16370785", "rating": "1528.37563626", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0601297438346"}, "Groovy": {"deviation": "37.4358868641", "rating": "1374.19154673", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0619727229838"}, "C": {"deviation": "101.588534996", "rating": "1731.40556288", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "1.70616432636"}, "Mathematica": {"deviation": "42.2525812244", "rating": "1824.59615462", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0600251523254"}, "D": {"deviation": "36.2701730633", "rating": "1290.46176282", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0602797705321"}, "O'Caml": {"deviation": "33.9249076013", "rating": "1410.71692554", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0650676538066"}, "Io": {"deviation": "33.3772634702", "rating": "1298.76633231", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.060184646179"}, "J": {"deviation": "40.0568023563", "rating": "1703.08075661", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0603075262065"}, "ELisp": {"deviation": "36.2358977112", "rating": "1673.32785626", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0642230227177"}, "C++": {"deviation": "36.8021560808", "rating": "1414.46469273", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0627362193069"}, "Standard ML": {"deviation": "35.0022720021", "rating": "1434.44033336", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0618998110465"}, "R": {"deviation": "38.0620996217", "rating": "1664.79963929", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0601482107181"}, "Clojure": {"deviation": "37.825772248", "rating": "1404.14579966", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0700722879008"}, "Prolog": {"deviation": "34.9308663251", "rating": "1672.03151936", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0620099997028"}, "REBOL": {"deviation": "133.067753477", "rating": "1613.58571237", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0599970074738"}, "Fortran": {"deviation": "37.5110081698", "rating": "1482.06545549", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0809654349376"}, "Assembler": {"deviation": "40.4252466542", "rating": "1669.30739339", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0748510715805"}, "Python": {"deviation": "40.1989134264", "rating": "1437.12843356", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0774931882593"}, "Pascal": {"deviation": "35.507170452", "rating": "1287.25720978", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0600202814254"}, "Haskell": {"deviation": "43.0592633736", "rating": "1573.45097925", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0808862098375"}, "Cobol": {"deviation": "36.3517757445", "rating": "1370.67646433", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0626123619808"}, "APL": {"deviation": "33.4536438907", "rating": "1617.318155", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.06463719437"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.06"}, "Go": {"deviation": "35.5996192653", "rating": "1390.47340098", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0613388138862"}, "Visual Basic": {"deviation": "36.9702603666", "rating": "1315.26969118", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0608184201827"}, "PHP": {"deviation": "42.5282029402", "rating": "1478.15378548", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0859549285701"}, "Mozart-Oz": {"deviation": "36.306245292", "rating": "1310.54359755", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0602280730329"}, "Smalltalk": {"deviation": "35.475745006", "rating": "1445.76137108", "ratingsMin": "1272.25115273", "ratingsMax": "1914.50588669", "volatility": "0.0635926405198"}}, "This language is easier to use for it's problem domain by removing unneeded expressiveness (such as not being Turing complete).": {"Coq": {"deviation": "46.4218846233", "rating": "1531.03517769", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0604430952526"}, "Eiffel": {"deviation": "52.30695487", "rating": "1471.78148047", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0600794294883"}, "Java": {"deviation": "40.7522852052", "rating": "1398.78171446", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.063000172892"}, "Scala": {"deviation": "36.0832962864", "rating": "1409.67337966", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0615442492138"}, "Delphi": {"deviation": "35.7811426008", "rating": "1373.93003655", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0602547375965"}, "Ada": {"deviation": "37.0059249002", "rating": "1379.80575881", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0602141895432"}, "Perl": {"deviation": "38.4075752589", "rating": "1421.15461409", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0645868835676"}, "Lua": {"deviation": "37.6265731985", "rating": "1575.81948264", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0619286865777"}, "Shell": {"deviation": "40.060620579", "rating": "1496.52867526", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.066273046355"}, "Matlab": {"deviation": "37.2030811133", "rating": "1555.22970503", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0621438601125"}, "Factor": {"deviation": "50.7772292852", "rating": "1595.97583598", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0603418709995"}, "Haxe": {"deviation": "43.6885753013", "rating": "1443.45596272", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0605769631941"}, "Erlang": {"deviation": "35.6491753485", "rating": "1590.86243182", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0620585732524"}, "Forth": {"deviation": "36.3193021372", "rating": "1529.34107267", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0614278865615"}, "Scheme": {"deviation": "40.1930665961", "rating": "1491.05277767", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0639720892999"}, "Objective C": {"deviation": "34.273202695", "rating": "1430.46900669", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0603876834957"}, "C#": {"deviation": "37.0593353981", "rating": "1422.13517209", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0639929446495"}, "Javascript": {"deviation": "39.4071104591", "rating": "1410.49833934", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0699854414568"}, "Common Lisp": {"deviation": "36.8398210947", "rating": "1401.8083843", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0632809987621"}, "TCL": {"deviation": "38.4656693703", "rating": "1428.61046843", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0611068616604"}, "F#": {"deviation": "36.0103131059", "rating": "1502.05049079", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0612449875374"}, "AWK": {"deviation": "39.1715678573", "rating": "1622.53947985", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0606482404158"}, "Ruby": {"deviation": "36.695993706", "rating": "1425.74685429", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0648139773279"}, "Agda": {"deviation": "85.4030830439", "rating": "1962.98581433", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0600046875931"}, "Groovy": {"deviation": "39.612499377", "rating": "1528.55269385", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0602437304335"}, "C": {"deviation": "41.1139297461", "rating": "1468.54293828", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0637002404653"}, "Mathematica": {"deviation": "43.2039360349", "rating": "1591.45660013", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0604264815505"}, "D": {"deviation": "37.5223322034", "rating": "1374.82669165", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0600680595889"}, "O'Caml": {"deviation": "35.2779467862", "rating": "1436.43164916", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0603038866977"}, "Io": {"deviation": "51.7181636572", "rating": "1647.24885786", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0602761939776"}, "J": {"deviation": "60.9070935706", "rating": "1739.46656201", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0607301477637"}, "ELisp": {"deviation": "38.1238919064", "rating": "1523.0906138", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.06063415301"}, "C++": {"deviation": "37.7303505404", "rating": "1348.35727965", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0603878664281"}, "Standard ML": {"deviation": "43.2592063557", "rating": "1322.52914771", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0605068321653"}, "R": {"deviation": "41.4053977058", "rating": "1589.85203313", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0602543437423"}, "Clojure": {"deviation": "38.2186783106", "rating": "1494.00499223", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0612940695299"}, "Prolog": {"deviation": "35.3835485183", "rating": "1582.66083614", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0622082402254"}, "REBOL": {"deviation": "128.197442699", "rating": "1211.50895641", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0601032051177"}, "Fortran": {"deviation": "36.9054957096", "rating": "1391.04373791", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0603649744011"}, "Assembler": {"deviation": "36.0778885804", "rating": "1342.14434261", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0642148072542"}, "Python": {"deviation": "43.433410705", "rating": "1378.7982228", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0719214419716"}, "Pascal": {"deviation": "35.29853291", "rating": "1335.60348619", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0605173366259"}, "Haskell": {"deviation": "37.9342768563", "rating": "1503.71552339", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0703227178126"}, "Cobol": {"deviation": "43.1075215492", "rating": "1261.49491546", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0604409482989"}, "APL": {"deviation": "58.6522192307", "rating": "1413.75433555", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0603983686381"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.06"}, "Go": {"deviation": "35.2993576502", "rating": "1562.27006574", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0604951128549"}, "Visual Basic": {"deviation": "36.5129376512", "rating": "1432.10272917", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0646076383101"}, "PHP": {"deviation": "39.8582726921", "rating": "1429.90834572", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0694845781745"}, "Mozart-Oz": {"deviation": "68.2765709496", "rating": "1117.08193052", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0617899796834"}, "Smalltalk": {"deviation": "36.2773082195", "rating": "1430.26511756", "ratingsMin": "1117.08193052", "ratingsMax": "1962.98581433", "volatility": "0.0607212612753"}}, "This language encourages writing reusable code.": {"Coq": {"deviation": "36.613609234", "rating": "1560.77639919", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0617056910607"}, "Eiffel": {"deviation": "42.3241999287", "rating": "1699.02438306", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0605117082038"}, "Java": {"deviation": "40.473232989", "rating": "1633.16601961", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0634642906139"}, "Scala": {"deviation": "38.4693470914", "rating": "1713.11524263", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.060018019933"}, "Delphi": {"deviation": "36.8646727003", "rating": "1425.90533252", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0622881573865"}, "Ada": {"deviation": "35.4994957955", "rating": "1612.39385081", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0613011280338"}, "Perl": {"deviation": "38.1480116388", "rating": "1326.85521594", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0621917534314"}, "Lua": {"deviation": "36.4583184553", "rating": "1569.19293831", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0630624198355"}, "Shell": {"deviation": "37.4133445401", "rating": "1222.08358691", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0603348557308"}, "Matlab": {"deviation": "39.4647386423", "rating": "1363.45801128", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0609452215887"}, "Factor": {"deviation": "38.7161731193", "rating": "1650.1617569", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0618434166795"}, "Haxe": {"deviation": "48.7328222123", "rating": "1681.53656926", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0601152275963"}, "Erlang": {"deviation": "36.3865129598", "rating": "1584.6782916", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.063752720492"}, "Forth": {"deviation": "33.7049274028", "rating": "1409.45355518", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0610548978598"}, "Scheme": {"deviation": "37.9626814849", "rating": "1592.53456214", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0685475469889"}, "Objective C": {"deviation": "36.5824916958", "rating": "1673.54290029", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0641790517126"}, "C#": {"deviation": "37.6149296881", "rating": "1625.1496281", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0614533915793"}, "Javascript": {"deviation": "38.4900321454", "rating": "1417.82051569", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0672514604519"}, "Common Lisp": {"deviation": "36.6596543415", "rating": "1611.24227968", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.064745714533"}, "TCL": {"deviation": "37.0944902362", "rating": "1339.61157761", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.060889201989"}, "F#": {"deviation": "36.6178316191", "rating": "1719.05738788", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0611189552663"}, "AWK": {"deviation": "39.3277182665", "rating": "1092.48587379", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0601556985863"}, "Ruby": {"deviation": "36.0957142466", "rating": "1597.31470163", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0615855614761"}, "Agda": {"deviation": "75.2723078877", "rating": "1474.97661313", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0601391859927"}, "Groovy": {"deviation": "36.2781383372", "rating": "1454.25360821", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0613539127712"}, "C": {"deviation": "41.6437182408", "rating": "1359.29175088", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.080010769512"}, "Mathematica": {"deviation": "40.7447187192", "rating": "1371.17048083", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.060650327957"}, "D": {"deviation": "36.0052048157", "rating": "1614.10802172", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0602687959609"}, "O'Caml": {"deviation": "37.21116539", "rating": "1682.73690884", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0615890233678"}, "Io": {"deviation": "34.3841243052", "rating": "1543.62599693", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0610425530046"}, "J": {"deviation": "50.53548583", "rating": "1499.78923091", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0604008473719"}, "ELisp": {"deviation": "36.503956326", "rating": "1483.80464819", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0614054653478"}, "C++": {"deviation": "40.8647924137", "rating": "1505.83084364", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0813048753915"}, "Standard ML": {"deviation": "35.5896485366", "rating": "1595.05630173", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0602329379277"}, "R": {"deviation": "38.0352350471", "rating": "1418.28473044", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0613357125805"}, "Clojure": {"deviation": "35.2952424819", "rating": "1693.42544038", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0599923652464"}, "Prolog": {"deviation": "35.9800904227", "rating": "1295.97866412", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0601963755233"}, "REBOL": {"deviation": "82.0041256346", "rating": "1388.82391459", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0600048559593"}, "Fortran": {"deviation": "36.6366730467", "rating": "1291.71508609", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0605072444777"}, "Assembler": {"deviation": "40.9921925209", "rating": "1059.92655664", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0599242519253"}, "Python": {"deviation": "39.1252595956", "rating": "1591.0004715", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0612838634715"}, "Pascal": {"deviation": "38.1064994035", "rating": "1395.30391953", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0610258053728"}, "Haskell": {"deviation": "38.4000351173", "rating": "1738.52750914", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0603270570809"}, "Cobol": {"deviation": "38.8058499", "rating": "1160.7229081", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0600649925091"}, "APL": {"deviation": "52.4665993675", "rating": "1437.40070286", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0601094120582"}, "ActionScript": {"deviation": "135.730667278", "rating": "1417.13321906", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0599894678797"}, "Go": {"deviation": "35.9487302525", "rating": "1537.29699782", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0613653423723"}, "Visual Basic": {"deviation": "38.5380919546", "rating": "1295.08597844", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0599003659839"}, "PHP": {"deviation": "37.2062499523", "rating": "1307.97435031", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0606430618185"}, "Mozart-Oz": {"deviation": "67.1632990694", "rating": "1604.47170081", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.060028371372"}, "Smalltalk": {"deviation": "33.6649902568", "rating": "1714.39354217", "ratingsMin": "1059.92655664", "ratingsMax": "1738.52750914", "volatility": "0.0607629297249"}}, "I know this language well": {"Coq": {"deviation": "40.9560002282", "rating": "1569.852918", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.116749378693"}, "Eiffel": {"deviation": "40.0553330342", "rating": "1326.72486439", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.157928353175"}, "Java": {"deviation": "47.7622026333", "rating": "1957.64367881", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.102086887318"}, "Scala": {"deviation": "120.078226635", "rating": "2135.8466671", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.92623803003"}, "Delphi": {"deviation": "257.957723119", "rating": "1460.07849807", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0"}, "Ada": {"deviation": "50.3764588775", "rating": "1447.69615944", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.23862179156"}, "Perl": {"deviation": "65.4924545255", "rating": "1594.84649438", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.10786272756"}, "Lua": {"deviation": "85.818486224", "rating": "1176.59342736", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.4436788079"}, "Shell": {"deviation": "64.7042263203", "rating": "1096.20819717", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.9628354414"}, "Matlab": {"deviation": "86.5805146646", "rating": "1298.04747825", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.86538394899"}, "Factor": {"deviation": "33.4579131679", "rating": "1313.76922877", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0659378070566"}, "Haxe": {"deviation": "35.4469568748", "rating": "1510.31407413", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0762258027903"}, "Erlang": {"deviation": "65.5558236197", "rating": "2025.48626159", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.33219653562"}, "Forth": {"deviation": "37.7447895269", "rating": "1440.37803689", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.120732582554"}, "Scheme": {"deviation": "153.538955788", "rating": "1685.28276637", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.85156655867"}, "Objective C": {"deviation": "208.496502288", "rating": "1240.23366315", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.84284128923"}, "C#": {"deviation": "50.3490081602", "rating": "1682.14161272", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.11248270585"}, "Javascript": {"deviation": "151.037842615", "rating": "2110.56715365", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.09877185303"}, "Common Lisp": {"deviation": "14.1205983018", "rating": "1606.86272487", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.77571872555e-11"}, "TCL": {"deviation": "191.270917687", "rating": "1548.89111422", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.18778032684"}, "F#": {"deviation": "91.4466925764", "rating": "1962.38478531", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.09093353402"}, "AWK": {"deviation": "72.5309718794", "rating": "2162.13476954", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.87507752039"}, "Ruby": {"deviation": "21.5606681782", "rating": "1719.28885217", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0213371191753"}, "Agda": {"deviation": "32.8965193216", "rating": "1301.36221722", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0636208537844"}, "Groovy": {"deviation": "186.564152057", "rating": "1797.2891406", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.06433913662"}, "C": {"deviation": "48.6841424152", "rating": "1881.74835131", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0984668672045"}, "Mathematica": {"deviation": "42.6679877874", "rating": "1713.9374826", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.16455863807"}, "D": {"deviation": "50.9946346789", "rating": "1385.30834547", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.218086780745"}, "O'Caml": {"deviation": "74.3573342203", "rating": "1962.36375197", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.94294305753"}, "Io": {"deviation": "35.7114679877", "rating": "1412.18669087", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.100763571661"}, "J": {"deviation": "32.8253333337", "rating": "1586.62849911", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0672835317315"}, "ELisp": {"deviation": "62.6520687469", "rating": "1644.76571185", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.680746038"}, "C++": {"deviation": "2.61676324495", "rating": "1752.70394306", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "8.45170943933e-09"}, "Standard ML": {"deviation": "73.0515287944", "rating": "2067.22359638", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.55055240692"}, "R": {"deviation": "75.3846813274", "rating": "1849.07410732", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.92791623083"}, "Clojure": {"deviation": "5.43931972276", "rating": "1549.11653255", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "5.2368784916e-09"}, "Prolog": {"deviation": "70.8112767888", "rating": "1587.98851566", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.32188356761"}, "REBOL": {"deviation": "32.3130172533", "rating": "1390.44362334", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0708697818447"}, "Fortran": {"deviation": "80.6132291914", "rating": "1691.18304991", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.55043367976"}, "Assembler": {"deviation": "66.0903389476", "rating": "1149.74109235", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.84302594086"}, "Python": {"deviation": "13.1042029504", "rating": "1800.66803153", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.007003086492"}, "Pascal": {"deviation": "146.621513116", "rating": "1561.12359355", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.52912516254"}, "Haskell": {"deviation": "236.656226701", "rating": "734.40548355", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "2.5267226884"}, "Cobol": {"deviation": "34.8903399359", "rating": "1423.70952458", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0714481787732"}, "APL": {"deviation": "35.1056544134", "rating": "1263.93137388", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0612055101829"}, "ActionScript": {"deviation": "35.8318006646", "rating": "1591.16166959", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0606286467582"}, "Go": {"deviation": "40.3898372889", "rating": "1428.54186832", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.119787641081"}, "Visual Basic": {"deviation": "15.2277629119", "rating": "1574.87861592", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.00995003964399"}, "PHP": {"deviation": "2.30516307453", "rating": "1674.54040236", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "4.43826712476e-32"}, "Mozart-Oz": {"deviation": "33.4347231956", "rating": "1662.7449773", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "0.0679304379233"}, "Smalltalk": {"deviation": "69.071758916", "rating": "1907.34066959", "ratingsMin": "734.40548355", "ratingsMax": "2162.13476954", "volatility": "1.91056868441"}}, "The thought that I may still be using this language in twenty years time fills me with dread": {"Coq": {"deviation": "35.7507907794", "rating": "1388.27431532", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0613892390469"}, "Eiffel": {"deviation": "33.423021532", "rating": "1528.67142558", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0655787860653"}, "Java": {"deviation": "39.4442745981", "rating": "1711.42639057", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0600400997328"}, "Scala": {"deviation": "39.2418728636", "rating": "1310.3685431", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.063492796067"}, "Delphi": {"deviation": "34.3213309685", "rating": "1690.94086466", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.060171665764"}, "Ada": {"deviation": "32.6806671731", "rating": "1679.6088198", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0620730512614"}, "Perl": {"deviation": "35.8920045146", "rating": "1678.97641321", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0602506426255"}, "Lua": {"deviation": "42.4011286675", "rating": "1566.53583957", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.078034133049"}, "Shell": {"deviation": "36.7452753851", "rating": "1700.93961689", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0605974267128"}, "Matlab": {"deviation": "35.8799458393", "rating": "1597.77794393", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0605055098821"}, "Factor": {"deviation": "36.310330235", "rating": "1336.59126144", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0614542746605"}, "Haxe": {"deviation": "37.3342769907", "rating": "1606.45931492", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0606102793919"}, "Erlang": {"deviation": "38.8003091245", "rating": "1409.25555577", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0703974488092"}, "Forth": {"deviation": "36.7325319189", "rating": "1435.30892416", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0640025206044"}, "Scheme": {"deviation": "41.6926047275", "rating": "1377.45342793", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0777442175949"}, "Objective C": {"deviation": "37.0390648159", "rating": "1589.58906407", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0620314167708"}, "C#": {"deviation": "41.7243416076", "rating": "1579.29832825", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0705828026924"}, "Javascript": {"deviation": "40.458466848", "rating": "1687.11335698", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0667127732913"}, "Common Lisp": {"deviation": "39.8727693999", "rating": "1453.29760895", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.080087069051"}, "TCL": {"deviation": "35.1173640325", "rating": "1696.08077098", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0607215370124"}, "F#": {"deviation": "36.0195880815", "rating": "1472.18225375", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0626206186483"}, "AWK": {"deviation": "35.9147280799", "rating": "1586.11500202", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0640571338642"}, "Ruby": {"deviation": "41.9205950074", "rating": "1511.58425429", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0787937101061"}, "Agda": {"deviation": "49.5555568899", "rating": "1407.86738343", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.060191043805"}, "Groovy": {"deviation": "39.1873164956", "rating": "1620.63489209", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0646351756654"}, "C": {"deviation": "42.6862369613", "rating": "1628.41460024", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0720559549019"}, "Mathematica": {"deviation": "37.7681471516", "rating": "1525.11118577", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0608887034258"}, "D": {"deviation": "37.9030797935", "rating": "1451.08067248", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0607529934164"}, "O'Caml": {"deviation": "34.7557018666", "rating": "1589.94694681", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0645056816507"}, "Io": {"deviation": "33.5242574168", "rating": "1537.14292735", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0611057926824"}, "J": {"deviation": "38.7566523833", "rating": "1310.52606714", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0608097174594"}, "ELisp": {"deviation": "33.6978395176", "rating": "1652.13177968", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0627211641814"}, "C++": {"deviation": "39.9055785929", "rating": "1701.55224539", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0600654036959"}, "Standard ML": {"deviation": "34.3351464906", "rating": "1483.10893578", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0663489027028"}, "R": {"deviation": "35.0770041451", "rating": "1644.49979212", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.061910272611"}, "Clojure": {"deviation": "47.0464857405", "rating": "1314.22082169", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0759083627689"}, "Prolog": {"deviation": "37.9656775395", "rating": "1533.80949419", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0733297081833"}, "REBOL": {"deviation": "137.045625256", "rating": "1435.10253847", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0599881842187"}, "Fortran": {"deviation": "38.1387104435", "rating": "1797.93541877", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0601120576229"}, "Assembler": {"deviation": "38.9225189981", "rating": "1749.06384325", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0640913988157"}, "Python": {"deviation": "53.5191315279", "rating": "1511.24975936", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.114025968951"}, "Pascal": {"deviation": "35.3140181732", "rating": "1746.03381775", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0599412117171"}, "Haskell": {"deviation": "41.5128227182", "rating": "1239.2927134", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0618735440081"}, "Cobol": {"deviation": "39.0678366053", "rating": "1987.17092431", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0613072896715"}, "APL": {"deviation": "34.0476141997", "rating": "1596.10559006", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0621449357528"}, "ActionScript": {"deviation": "88.2258388941", "rating": "1474.6265632", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0601437144133"}, "Go": {"deviation": "36.893095865", "rating": "1426.79171448", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0642153077168"}, "Visual Basic": {"deviation": "40.283792845", "rating": "1885.25595552", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0598059921254"}, "PHP": {"deviation": "41.6602037827", "rating": "1844.2262885", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0596109618952"}, "Mozart-Oz": {"deviation": "30.5157061443", "rating": "1563.8169098", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.062125473114"}, "Smalltalk": {"deviation": "35.7612609441", "rating": "1421.58474973", "ratingsMin": "1239.2927134", "ratingsMax": "1987.17092431", "volatility": "0.0609546764914"}}, "Third-party libraries are readily available well-documented and of high quality": {"Coq": {"deviation": "43.4251374021", "rating": "1165.00279319", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600432572649"}, "Eiffel": {"deviation": "37.0789115594", "rating": "1316.38028587", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0611090375041"}, "Java": {"deviation": "39.2317560754", "rating": "1823.68503687", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0597064245197"}, "Scala": {"deviation": "37.2493851991", "rating": "1672.06933914", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0664646806702"}, "Delphi": {"deviation": "38.6187303742", "rating": "1426.46236237", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0638644782706"}, "Ada": {"deviation": "36.8754261542", "rating": "1313.86763537", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0603317032209"}, "Perl": {"deviation": "38.3037295327", "rating": "1728.28729865", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0606495116256"}, "Lua": {"deviation": "39.0361319132", "rating": "1366.49574143", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.060757503416"}, "Shell": {"deviation": "42.380261342", "rating": "1325.72212593", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.060376339485"}, "Matlab": {"deviation": "39.2858652684", "rating": "1555.37812962", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0609153291736"}, "Factor": {"deviation": "38.5651908599", "rating": "1179.71234201", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600955421954"}, "Haxe": {"deviation": "46.1742592948", "rating": "1326.74260752", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600432773165"}, "Erlang": {"deviation": "37.2326397589", "rating": "1440.9901999", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0621918072789"}, "Forth": {"deviation": "37.3848601892", "rating": "1154.59389184", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0599910715098"}, "Scheme": {"deviation": "40.2701481112", "rating": "1321.34274727", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0613033300105"}, "Objective C": {"deviation": "38.8478812912", "rating": "1463.73034048", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0684085295039"}, "C#": {"deviation": "38.9928030298", "rating": "1643.70584326", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0651882707585"}, "Javascript": {"deviation": "45.3802389082", "rating": "1604.7888356", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0902010244085"}, "Common Lisp": {"deviation": "41.1468645487", "rating": "1335.3175687", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0672103531061"}, "TCL": {"deviation": "37.8314186475", "rating": "1286.23590059", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.06103063084"}, "F#": {"deviation": "39.373037524", "rating": "1541.13166369", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0635688332436"}, "AWK": {"deviation": "40.4542778556", "rating": "1136.62736781", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0598679977273"}, "Ruby": {"deviation": "38.0070400946", "rating": "1704.2106425", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0619975865267"}, "Agda": {"deviation": "148.943979387", "rating": "1217.40277711", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600079561444"}, "Groovy": {"deviation": "41.1893075098", "rating": "1597.92310518", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0665904417853"}, "C": {"deviation": "40.8587045957", "rating": "1661.24936237", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0639139871889"}, "Mathematica": {"deviation": "41.2686351192", "rating": "1229.82374247", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600662775147"}, "D": {"deviation": "38.8900291379", "rating": "1313.21949507", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0602809361946"}, "O'Caml": {"deviation": "38.4534103937", "rating": "1386.95612806", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0617845980814"}, "Io": {"deviation": "41.1673054803", "rating": "1141.17467273", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.060009841451"}, "J": {"deviation": "39.1995242582", "rating": "1267.74721443", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0601060812627"}, "ELisp": {"deviation": "37.2999280839", "rating": "1316.65710522", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.062208865112"}, "C++": {"deviation": "40.896842418", "rating": "1648.19812434", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.068748608946"}, "Standard ML": {"deviation": "37.083352032", "rating": "1220.63925725", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0599627758306"}, "R": {"deviation": "40.2702081873", "rating": "1583.53942658", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0635424164475"}, "Clojure": {"deviation": "40.8282995884", "rating": "1558.16159215", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0756112334734"}, "Prolog": {"deviation": "39.4926606562", "rating": "1195.46174029", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0598672272802"}, "REBOL": {"deviation": "125.130528945", "rating": "1207.87937932", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600465500268"}, "Fortran": {"deviation": "38.8252491936", "rating": "1428.78644408", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0715856865905"}, "Assembler": {"deviation": "45.7048733921", "rating": "1063.94575405", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0601775283881"}, "Python": {"deviation": "40.1615333689", "rating": "1821.04002622", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0589984886492"}, "Pascal": {"deviation": "41.4623442822", "rating": "1291.40554419", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0602760159614"}, "Haskell": {"deviation": "45.3950893115", "rating": "1587.75521826", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0955728407151"}, "Cobol": {"deviation": "39.4730623465", "rating": "1157.60076639", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0602256372519"}, "APL": {"deviation": "38.5994684343", "rating": "1222.42273493", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600258059626"}, "ActionScript": {"deviation": "86.0279355629", "rating": "1550.77057655", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0600415922164"}, "Go": {"deviation": "37.0707868209", "rating": "1397.92772638", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0604267891892"}, "Visual Basic": {"deviation": "39.1958441747", "rating": "1441.67054873", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0662109467798"}, "PHP": {"deviation": "45.9682665698", "rating": "1513.80444634", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0850410430416"}, "Mozart-Oz": {"deviation": "35.9399438058", "rating": "1177.73130192", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0602801280365"}, "Smalltalk": {"deviation": "36.5409708403", "rating": "1397.53166247", "ratingsMin": "1063.94575405", "ratingsMax": "1823.68503687", "volatility": "0.0603447689829"}}, "I know many other people who use this language": {"Coq": {"deviation": "41.2770303719", "rating": "1289.8224403", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0602349684965"}, "Eiffel": {"deviation": "37.875165899", "rating": "1360.4212557", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0625016488186"}, "Java": {"deviation": "42.6982207288", "rating": "1914.27632606", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0591326284176"}, "Scala": {"deviation": "44.7140731505", "rating": "1525.77620459", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0685956633112"}, "Delphi": {"deviation": "40.6921603655", "rating": "1553.75412786", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0664002393935"}, "Ada": {"deviation": "38.9948312985", "rating": "1350.14459559", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0612055376553"}, "Perl": {"deviation": "39.184010577", "rating": "1726.2244866", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.060438986823"}, "Lua": {"deviation": "39.5347017114", "rating": "1489.41377803", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0644944045684"}, "Shell": {"deviation": "40.7365263428", "rating": "1742.79658355", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0605841025458"}, "Matlab": {"deviation": "40.3798212628", "rating": "1699.07583838", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0606598177994"}, "Factor": {"deviation": "41.2852285665", "rating": "1227.93473839", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0600327986432"}, "Haxe": {"deviation": "47.4479694214", "rating": "1392.56725728", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0604177878057"}, "Erlang": {"deviation": "42.7497653227", "rating": "1369.06655616", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0618697281601"}, "Forth": {"deviation": "40.8785211211", "rating": "1299.96481491", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0601505244367"}, "Scheme": {"deviation": "43.6029048514", "rating": "1430.46379599", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0660931003005"}, "Objective C": {"deviation": "39.3478478159", "rating": "1650.78786477", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0622273019348"}, "C#": {"deviation": "42.0435442285", "rating": "1896.39023678", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0596091686576"}, "Javascript": {"deviation": "40.3612320332", "rating": "1870.89187441", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0589743198616"}, "Common Lisp": {"deviation": "41.4822529898", "rating": "1454.887342", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0653309350618"}, "TCL": {"deviation": "37.8989032642", "rating": "1419.93346519", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0611989307226"}, "F#": {"deviation": "41.8665872056", "rating": "1452.9107367", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0613439115224"}, "AWK": {"deviation": "39.5361196589", "rating": "1486.15203605", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0663376268811"}, "Ruby": {"deviation": "39.1596556965", "rating": "1750.02296038", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0600960744255"}, "Agda": {"deviation": "73.8109965757", "rating": "1454.74601254", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0601498317029"}, "Groovy": {"deviation": "40.0282186757", "rating": "1573.71157585", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0636320086662"}, "C": {"deviation": "41.3938226951", "rating": "1828.1873802", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0587166093679"}, "Mathematica": {"deviation": "42.3924315962", "rating": "1479.90968067", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0609831196458"}, "D": {"deviation": "43.8583766361", "rating": "1303.76352742", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0607763441931"}, "O'Caml": {"deviation": "38.6327256221", "rating": "1549.02043728", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0644090104439"}, "Io": {"deviation": "44.2362205952", "rating": "1235.61674447", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0601946066288"}, "J": {"deviation": "41.5841746087", "rating": "1346.74749368", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0608816291407"}, "ELisp": {"deviation": "36.7487688813", "rating": "1428.20702242", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0611414210209"}, "C++": {"deviation": "39.8008310508", "rating": "1779.67567425", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0589334896499"}, "Standard ML": {"deviation": "40.2227034329", "rating": "1302.29138022", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0601700179295"}, "R": {"deviation": "36.4461157017", "rating": "1572.94432577", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0616023456632"}, "Clojure": {"deviation": "42.9843311586", "rating": "1410.78336031", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0634340620805"}, "Prolog": {"deviation": "42.67562828", "rating": "1286.50773791", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0601271609853"}, "REBOL": {"deviation": "154.620323365", "rating": "1170.49415158", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0600521535509"}, "Fortran": {"deviation": "43.1262046117", "rating": "1406.10255006", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0688863356243"}, "Assembler": {"deviation": "45.5107661999", "rating": "1422.34668937", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0664679909925"}, "Python": {"deviation": "40.1257128545", "rating": "1689.12325107", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0588613293733"}, "Pascal": {"deviation": "40.0091831109", "rating": "1443.36181233", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0620829996448"}, "Haskell": {"deviation": "43.6658210183", "rating": "1519.81772614", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0732188789156"}, "Cobol": {"deviation": "40.6627178953", "rating": "1378.95048376", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0603683422016"}, "APL": {"deviation": "40.2919335046", "rating": "1307.97200429", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0601677636154"}, "ActionScript": {"deviation": "96.6496916391", "rating": "1298.5197076", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0600092278666"}, "Go": {"deviation": "40.9530071673", "rating": "1289.82679601", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0614023482793"}, "Visual Basic": {"deviation": "39.8449598736", "rating": "1578.18967156", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0639071593449"}, "PHP": {"deviation": "41.0878617434", "rating": "1747.93072703", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0597607397003"}, "Mozart-Oz": {"deviation": "43.4501409897", "rating": "1200.14658771", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.060111260024"}, "Smalltalk": {"deviation": "40.298629339", "rating": "1416.14869775", "ratingsMin": "1170.49415158", "ratingsMax": "1914.27632606", "volatility": "0.0639084906639"}}, "This language is likely to be around for a very long time": {"Coq": {"deviation": "34.1984210699", "rating": "1217.04678227", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0601441039676"}, "Eiffel": {"deviation": "35.186313016", "rating": "1269.5482394", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0600542688276"}, "Java": {"deviation": "42.119713242", "rating": "1615.24165522", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0634832860147"}, "Scala": {"deviation": "38.5571033391", "rating": "1494.42875805", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0653873257448"}, "Delphi": {"deviation": "36.8832205003", "rating": "1419.63041772", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.060256689433"}, "Ada": {"deviation": "31.8168822124", "rating": "1357.91316145", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0670001192692"}, "Perl": {"deviation": "44.99077365", "rating": "1467.00534055", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0844268745208"}, "Lua": {"deviation": "38.3852863846", "rating": "1293.31027125", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0647687516013"}, "Shell": {"deviation": "37.5669987303", "rating": "1628.96185468", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0615209218715"}, "Matlab": {"deviation": "39.3032717848", "rating": "1352.24632438", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0610847653167"}, "Factor": {"deviation": "33.8394558243", "rating": "1404.50969534", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0601185025852"}, "Haxe": {"deviation": "34.6433262524", "rating": "1365.10613954", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0607455245564"}, "Erlang": {"deviation": "33.4096632616", "rating": "1459.79507492", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.063437217476"}, "Forth": {"deviation": "35.7760810331", "rating": "1451.75466816", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0680004555991"}, "Scheme": {"deviation": "38.4477126605", "rating": "1571.35477245", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0684626721949"}, "Objective C": {"deviation": "39.3798940402", "rating": "1398.23522213", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0669107395783"}, "C#": {"deviation": "43.5784811744", "rating": "1630.79188371", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0756441124159"}, "Javascript": {"deviation": "41.3186180808", "rating": "1615.6394194", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0688900720119"}, "Common Lisp": {"deviation": "33.8355899532", "rating": "1515.77799031", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0644094755539"}, "TCL": {"deviation": "32.7841086904", "rating": "1441.43648332", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0600287754796"}, "F#": {"deviation": "35.6137896242", "rating": "1465.48780991", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.060336505225"}, "AWK": {"deviation": "34.7181240468", "rating": "1458.7184596", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0686346925462"}, "Ruby": {"deviation": "41.7387014093", "rating": "1384.11148265", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0698820754928"}, "Agda": {"deviation": "75.2218401802", "rating": "1388.83523872", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0600948983512"}, "Groovy": {"deviation": "36.6728975122", "rating": "1299.04657383", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0599697981224"}, "C": {"deviation": "44.0905283553", "rating": "1844.2741743", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0592877482794"}, "Mathematica": {"deviation": "41.3354439205", "rating": "1261.87078229", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.060062458843"}, "D": {"deviation": "34.5957243647", "rating": "1221.76154555", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.060019979008"}, "O'Caml": {"deviation": "34.3523997541", "rating": "1462.69290694", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0627806176438"}, "Io": {"deviation": "34.9035844736", "rating": "1126.59649441", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0601692937636"}, "J": {"deviation": "33.7488551785", "rating": "1330.51439725", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0605335856535"}, "ELisp": {"deviation": "31.2881098635", "rating": "1584.49580269", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0695980816439"}, "C++": {"deviation": "41.4989706654", "rating": "1700.34443357", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0600882718162"}, "Standard ML": {"deviation": "31.4473040723", "rating": "1338.14215181", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0614254520735"}, "R": {"deviation": "33.4009371947", "rating": "1494.00975578", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0612297889045"}, "Clojure": {"deviation": "34.3884179154", "rating": "1330.64127499", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0643547326466"}, "Prolog": {"deviation": "36.1180283489", "rating": "1399.1297585", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0711487715782"}, "REBOL": {"deviation": "105.583826855", "rating": "1066.60017323", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0600049467206"}, "Fortran": {"deviation": "34.6376676537", "rating": "1609.41368477", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0647383944332"}, "Assembler": {"deviation": "36.4206916603", "rating": "1652.63504641", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0611863768282"}, "Python": {"deviation": "43.0415835506", "rating": "1587.31434586", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0748910451977"}, "Pascal": {"deviation": "41.4731911019", "rating": "1293.88926761", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0599674271617"}, "Haskell": {"deviation": "46.1526882939", "rating": "1505.12422577", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0925340845027"}, "Cobol": {"deviation": "32.597448323", "rating": "1595.53359808", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0666885520281"}, "APL": {"deviation": "31.3163842519", "rating": "1294.04116835", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0605297212092"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.06"}, "Go": {"deviation": "32.9752014575", "rating": "1417.17165483", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0603264203359"}, "Visual Basic": {"deviation": "37.2815003841", "rating": "1328.02903709", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0606133052445"}, "PHP": {"deviation": "45.3486144189", "rating": "1380.87458347", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0769843436645"}, "Mozart-Oz": {"deviation": "36.9709310124", "rating": "1163.52166581", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0599813286566"}, "Smalltalk": {"deviation": "35.6116719623", "rating": "1426.63939941", "ratingsMin": "1066.60017323", "ratingsMax": "1844.2741743", "volatility": "0.0678390073781"}}, "Programs written in this language tend to play well with others": {"Coq": {"deviation": "42.2901568897", "rating": "1286.21160119", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0600864066319"}, "Eiffel": {"deviation": "38.2453515655", "rating": "1515.61512512", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0602674003153"}, "Java": {"deviation": "41.5476989782", "rating": "1623.59345333", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0692252045338"}, "Scala": {"deviation": "35.6155782336", "rating": "1647.12709924", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.060134384065"}, "Delphi": {"deviation": "38.3750913429", "rating": "1515.20033994", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0666354878174"}, "Ada": {"deviation": "36.2192600795", "rating": "1491.8516837", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0636547781642"}, "Perl": {"deviation": "38.6827148885", "rating": "1574.85970612", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0631119772164"}, "Lua": {"deviation": "38.6462329681", "rating": "1645.10037527", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0611281746179"}, "Shell": {"deviation": "37.9534828912", "rating": "1708.40355224", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0615503260188"}, "Matlab": {"deviation": "39.7700638029", "rating": "1247.32433764", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.060225282363"}, "Factor": {"deviation": "36.0621763514", "rating": "1513.41885527", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0618294615128"}, "Haxe": {"deviation": "45.8118843826", "rating": "1478.65308826", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0603527176754"}, "Erlang": {"deviation": "35.7576616819", "rating": "1501.2487904", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0683063768501"}, "Forth": {"deviation": "36.0411515408", "rating": "1358.75738855", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0610757213379"}, "Scheme": {"deviation": "40.1809973372", "rating": "1485.13331593", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0708462776955"}, "Objective C": {"deviation": "38.8370457573", "rating": "1525.32478446", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0713166464039"}, "C#": {"deviation": "41.7923854549", "rating": "1686.6666802", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0649664472455"}, "Javascript": {"deviation": "52.0100564352", "rating": "1491.26711911", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.106785229205"}, "Common Lisp": {"deviation": "37.1203790942", "rating": "1494.52082416", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0673809254636"}, "TCL": {"deviation": "36.378094911", "rating": "1572.88293655", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.062978082463"}, "F#": {"deviation": "37.1286714979", "rating": "1620.10344236", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0614592127755"}, "AWK": {"deviation": "41.2724270437", "rating": "1588.84461662", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0757748367029"}, "Ruby": {"deviation": "38.8196267435", "rating": "1584.67561649", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0648573377216"}, "Agda": {"deviation": "118.629580804", "rating": "1222.56897292", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0601314431692"}, "Groovy": {"deviation": "37.3633380626", "rating": "1577.89690482", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0603417746333"}, "C": {"deviation": "43.2797158025", "rating": "1823.71871876", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0601058517"}, "Mathematica": {"deviation": "42.4132794405", "rating": "1344.88904126", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0601171445509"}, "D": {"deviation": "37.6920684383", "rating": "1600.70891487", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0605390543711"}, "O'Caml": {"deviation": "36.8401228778", "rating": "1516.91371568", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0637262519304"}, "Io": {"deviation": "45.0863223689", "rating": "1481.83723118", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0602898456314"}, "J": {"deviation": "40.5973242864", "rating": "1427.01204073", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0616223837816"}, "ELisp": {"deviation": "36.7620821713", "rating": "1386.11445164", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0610749935089"}, "C++": {"deviation": "40.4831346259", "rating": "1681.58824326", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0642344546887"}, "Standard ML": {"deviation": "35.2603774275", "rating": "1393.32387718", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0606282954732"}, "R": {"deviation": "37.0562314566", "rating": "1486.02744728", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0625605613704"}, "Clojure": {"deviation": "37.2637508534", "rating": "1546.78086593", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0613421120077"}, "Prolog": {"deviation": "37.9395776495", "rating": "1267.77333153", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0600306977304"}, "REBOL": {"deviation": "111.126518961", "rating": "1153.33571862", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0602019706015"}, "Fortran": {"deviation": "37.0128371909", "rating": "1588.9326186", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0645115116005"}, "Assembler": {"deviation": "73.6240553681", "rating": "1286.70126176", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.16826833445"}, "Python": {"deviation": "40.1239715581", "rating": "1673.28682102", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0598286616799"}, "Pascal": {"deviation": "38.5126703612", "rating": "1359.30651558", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0647212356331"}, "Haskell": {"deviation": "45.4393323284", "rating": "1592.73152013", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0882309305376"}, "Cobol": {"deviation": "39.7087906429", "rating": "1331.7893938", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0600570341978"}, "APL": {"deviation": "39.4805685348", "rating": "1211.88012539", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0608525392537"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.06"}, "Go": {"deviation": "39.1787025839", "rating": "1505.09601082", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0612788655896"}, "Visual Basic": {"deviation": "40.5973209265", "rating": "1439.40823717", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0626911613635"}, "PHP": {"deviation": "43.8131128692", "rating": "1371.58784763", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0692162850837"}, "Mozart-Oz": {"deviation": "38.3202215649", "rating": "1360.10161188", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.0602261520889"}, "Smalltalk": {"deviation": "36.0288662144", "rating": "1313.57543169", "ratingsMin": "1153.33571862", "ratingsMax": "1823.71871876", "volatility": "0.061482099937"}}, "Learning this language significantly changed how I use other languages.": {"Coq": {"deviation": "36.714374285", "rating": "1715.25865647", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0603864888919"}, "Eiffel": {"deviation": "32.8941589847", "rating": "1451.79269168", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0615086338099"}, "Java": {"deviation": "46.7029335467", "rating": "1308.62969107", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.080202262075"}, "Scala": {"deviation": "38.7373004808", "rating": "1595.98913701", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0621546400281"}, "Delphi": {"deviation": "36.6594460397", "rating": "1296.52243554", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.060681659155"}, "Ada": {"deviation": "32.4921937958", "rating": "1483.58330534", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0637656763002"}, "Perl": {"deviation": "39.0305222072", "rating": "1463.78900161", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0687620588158"}, "Lua": {"deviation": "35.9762915226", "rating": "1468.41754169", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0632844539405"}, "Shell": {"deviation": "38.895574919", "rating": "1302.99148228", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0600117200787"}, "Matlab": {"deviation": "39.2830620195", "rating": "1301.36542934", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0619354178507"}, "Factor": {"deviation": "33.5015804612", "rating": "1447.18708014", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.062677588439"}, "Haxe": {"deviation": "38.7873884483", "rating": "1333.43988732", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0601472952323"}, "Erlang": {"deviation": "37.5394980232", "rating": "1657.58117715", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0604823498492"}, "Forth": {"deviation": "35.7523806738", "rating": "1628.62163714", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0637625535941"}, "Scheme": {"deviation": "39.7877025074", "rating": "1757.31044254", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0617862690258"}, "Objective C": {"deviation": "37.7814342995", "rating": "1394.66022572", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0620563532963"}, "C#": {"deviation": "40.9478419202", "rating": "1467.06383524", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0677540980755"}, "Javascript": {"deviation": "43.1603906748", "rating": "1406.00362786", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.070322091275"}, "Common Lisp": {"deviation": "40.8708351949", "rating": "1664.36152388", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0627077859171"}, "TCL": {"deviation": "35.3003240483", "rating": "1367.12410807", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0606171095747"}, "F#": {"deviation": "36.3307017989", "rating": "1506.47762544", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0639202392893"}, "AWK": {"deviation": "37.0112266257", "rating": "1325.06202281", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0602687508861"}, "Ruby": {"deviation": "43.7908736675", "rating": "1558.87929274", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0742677935623"}, "Agda": {"deviation": "51.3962632419", "rating": "1741.38876215", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0602308154993"}, "Groovy": {"deviation": "37.1584768684", "rating": "1441.01468627", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0643626904655"}, "C": {"deviation": "59.1435475589", "rating": "1487.24973272", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.145422146389"}, "Mathematica": {"deviation": "36.4717928719", "rating": "1349.9537993", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0611947434793"}, "D": {"deviation": "35.4912088592", "rating": "1455.07555604", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.061963144563"}, "O'Caml": {"deviation": "33.949392376", "rating": "1604.68877385", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0604391819598"}, "Io": {"deviation": "35.7780673451", "rating": "1531.64333319", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0672192027751"}, "J": {"deviation": "40.0318233974", "rating": "1663.64361867", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0602504332374"}, "ELisp": {"deviation": "34.956737773", "rating": "1443.07021739", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0610511392747"}, "C++": {"deviation": "51.7375020287", "rating": "1421.94792664", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.110015632966"}, "Standard ML": {"deviation": "34.8446495697", "rating": "1457.19241693", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0603803663636"}, "R": {"deviation": "34.6262877658", "rating": "1371.92902366", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0601175373507"}, "Clojure": {"deviation": "35.7374452141", "rating": "1544.47791682", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0622314280899"}, "Prolog": {"deviation": "36.5258461199", "rating": "1674.28273252", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0635292073139"}, "REBOL": {"deviation": "72.4410540039", "rating": "1733.9244477", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0603166755814"}, "Fortran": {"deviation": "37.8810010118", "rating": "1293.19003056", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0606307117526"}, "Assembler": {"deviation": "44.4132774121", "rating": "1527.72849063", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0900539257692"}, "Python": {"deviation": "47.7875681544", "rating": "1503.79415211", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0871194004599"}, "Pascal": {"deviation": "37.3156996197", "rating": "1403.83217645", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.062846742046"}, "Haskell": {"deviation": "47.6145779008", "rating": "1867.49297621", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0602684897175"}, "Cobol": {"deviation": "35.1591156176", "rating": "1285.15004698", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0604732265964"}, "APL": {"deviation": "41.1106007895", "rating": "1492.60187719", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0606718659658"}, "ActionScript": {"deviation": "82.448983719", "rating": "1411.46960739", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0603670342858"}, "Go": {"deviation": "36.165847061", "rating": "1408.04759697", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.061207667471"}, "Visual Basic": {"deviation": "43.8999422724", "rating": "1178.20675836", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0603077401962"}, "PHP": {"deviation": "41.7156615841", "rating": "1177.57498281", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0598350701029"}, "Mozart-Oz": {"deviation": "36.6134689323", "rating": "1581.12751713", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.0604032228505"}, "Smalltalk": {"deviation": "35.1475542025", "rating": "1712.62206334", "ratingsMin": "1177.57498281", "ratingsMax": "1867.49297621", "volatility": "0.060380345386"}}, "This language is suitable for real-time applications": {"Coq": {"deviation": "35.6468069694", "rating": "1212.99015262", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0603613670935"}, "Eiffel": {"deviation": "30.8292074652", "rating": "1561.46480988", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0602418697903"}, "Java": {"deviation": "50.7805884968", "rating": "1561.65279804", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0834567165995"}, "Scala": {"deviation": "38.7702426563", "rating": "1610.5721429", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0638642581716"}, "Delphi": {"deviation": "38.6551019828", "rating": "1477.10522918", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0695524668292"}, "Ada": {"deviation": "38.8437256161", "rating": "1822.80366506", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0604155612002"}, "Perl": {"deviation": "38.0926706977", "rating": "1260.3056848", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.063603256625"}, "Lua": {"deviation": "37.6803981477", "rating": "1440.80083643", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0692312147984"}, "Shell": {"deviation": "36.7514317223", "rating": "1172.01246577", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0599813278458"}, "Matlab": {"deviation": "40.6751390526", "rating": "1243.75524464", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0602596292763"}, "Factor": {"deviation": "35.2529102279", "rating": "1401.70337826", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0606056766115"}, "Haxe": {"deviation": "36.4340900726", "rating": "1355.89752669", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0606672896713"}, "Erlang": {"deviation": "41.339237916", "rating": "1736.47558795", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0600154792766"}, "Forth": {"deviation": "38.8895356754", "rating": "1789.01885218", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0600691953148"}, "Scheme": {"deviation": "41.8525445257", "rating": "1484.27931463", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.068613019996"}, "Objective C": {"deviation": "39.5841094834", "rating": "1598.50564457", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0658134629416"}, "C#": {"deviation": "39.8225024971", "rating": "1397.31828471", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0690195390251"}, "Javascript": {"deviation": "40.0207169168", "rating": "1267.86788952", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0604015410357"}, "Common Lisp": {"deviation": "42.221125383", "rating": "1481.85312462", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0824484615609"}, "TCL": {"deviation": "34.7901201068", "rating": "1333.47069168", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0601338805603"}, "F#": {"deviation": "37.6819315874", "rating": "1470.5855343", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.064313125612"}, "AWK": {"deviation": "37.6098853777", "rating": "1119.9254325", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0597860358305"}, "Ruby": {"deviation": "36.1751323317", "rating": "1280.50587856", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.05968420151"}, "Agda": {"deviation": "51.1068204592", "rating": "1471.41872296", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0599908022423"}, "Groovy": {"deviation": "37.0225965491", "rating": "1367.14422258", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0602959717488"}, "C": {"deviation": "53.1850623223", "rating": "1983.31457017", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0600383304773"}, "Mathematica": {"deviation": "41.6591297892", "rating": "1132.87223761", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0602141027452"}, "D": {"deviation": "36.2892118446", "rating": "1727.79145781", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0601039575118"}, "O'Caml": {"deviation": "39.319303455", "rating": "1680.09036611", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0606413154566"}, "Io": {"deviation": "32.9337550677", "rating": "1329.9443281", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0602674087847"}, "J": {"deviation": "34.9244830071", "rating": "1437.69205498", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0627376801544"}, "ELisp": {"deviation": "34.9186783171", "rating": "1250.62676343", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0600671538003"}, "C++": {"deviation": "46.1201861225", "rating": "1894.36055738", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0590983941169"}, "Standard ML": {"deviation": "38.1322835198", "rating": "1490.19194248", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0648290426411"}, "R": {"deviation": "37.6762166215", "rating": "1260.27651929", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0600703518316"}, "Clojure": {"deviation": "39.3885977111", "rating": "1515.66786682", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0673558768132"}, "Prolog": {"deviation": "39.3363486699", "rating": "1125.59141949", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0598889087049"}, "REBOL": {"deviation": "102.646455", "rating": "1234.68135226", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0600290599667"}, "Fortran": {"deviation": "39.4724244497", "rating": "1446.18965755", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0737867918218"}, "Assembler": {"deviation": "43.4483475783", "rating": "1966.44767352", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0602711176886"}, "Python": {"deviation": "52.1030453767", "rating": "1396.98288304", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0985284533942"}, "Pascal": {"deviation": "36.3902310084", "rating": "1598.45645677", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0682921870818"}, "Haskell": {"deviation": "47.1047632364", "rating": "1513.43772966", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.081879031259"}, "Cobol": {"deviation": "35.560545686", "rating": "1269.38175983", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0603641743028"}, "APL": {"deviation": "34.1949560391", "rating": "1298.24726748", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0643221176583"}, "ActionScript": {"deviation": "132.60906888", "rating": "933.307429693", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0601759176918"}, "Go": {"deviation": "36.3975756587", "rating": "1676.49946833", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0606002994613"}, "Visual Basic": {"deviation": "38.2342104292", "rating": "1233.7282777", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0598432763974"}, "PHP": {"deviation": "43.7193421914", "rating": "1201.60378938", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0596085780997"}, "Mozart-Oz": {"deviation": "32.8604783137", "rating": "1458.74757359", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0607766231185"}, "Smalltalk": {"deviation": "34.7233252676", "rating": "1373.76034996", "ratingsMin": "933.307429693", "ratingsMax": "1983.31457017", "volatility": "0.0607053970455"}}, "I would use this language for a desktop GUI project": {"Coq": {"deviation": "41.6738812115", "rating": "1334.10484268", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.06126866314"}, "Eiffel": {"deviation": "35.2715737802", "rating": "1471.38719233", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0605079458369"}, "Java": {"deviation": "40.7499387706", "rating": "1726.77291612", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0593308607928"}, "Scala": {"deviation": "38.3697073758", "rating": "1712.90106374", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.062860369166"}, "Delphi": {"deviation": "38.0672592645", "rating": "1762.48937969", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0607086299081"}, "Ada": {"deviation": "35.2792155223", "rating": "1293.96947779", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0602487926726"}, "Perl": {"deviation": "44.2325745843", "rating": "1369.40527164", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0756433231492"}, "Lua": {"deviation": "41.8202765757", "rating": "1540.72096094", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0753395575165"}, "Shell": {"deviation": "40.7786786978", "rating": "1238.65306399", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0599574035886"}, "Matlab": {"deviation": "39.8091159241", "rating": "1329.71318263", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0609644784044"}, "Factor": {"deviation": "31.5788616686", "rating": "1378.74143686", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0604441174556"}, "Haxe": {"deviation": "36.9582995371", "rating": "1587.76133138", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0617389523359"}, "Erlang": {"deviation": "40.1052452734", "rating": "1415.30575316", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0624692434481"}, "Forth": {"deviation": "37.2467612423", "rating": "1329.50391412", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0599703970865"}, "Scheme": {"deviation": "41.7244012963", "rating": "1493.59595465", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0763723044653"}, "Objective C": {"deviation": "38.7554616282", "rating": "1780.21607712", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0602104743472"}, "C#": {"deviation": "41.7674650914", "rating": "1912.62986089", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0596531193294"}, "Javascript": {"deviation": "66.5878213431", "rating": "1486.6994532", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.164547150758"}, "Common Lisp": {"deviation": "42.3168207691", "rating": "1483.17518798", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0753722913729"}, "TCL": {"deviation": "38.3796420634", "rating": "1668.43227373", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.063041979539"}, "F#": {"deviation": "37.2197384345", "rating": "1683.48203697", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.060469080466"}, "AWK": {"deviation": "41.2766094644", "rating": "1239.78392675", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0598278143251"}, "Ruby": {"deviation": "39.6821481458", "rating": "1693.61707546", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0652407712872"}, "Agda": {"deviation": "73.6674545783", "rating": "1111.62059433", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0606397445173"}, "Groovy": {"deviation": "38.1206533886", "rating": "1606.64415823", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0621853142255"}, "C": {"deviation": "94.5135490755", "rating": "1404.28238635", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.287128168115"}, "Mathematica": {"deviation": "37.657616236", "rating": "1369.13909861", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0606961747362"}, "D": {"deviation": "35.7320478254", "rating": "1620.99164896", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0618958463256"}, "O'Caml": {"deviation": "38.5325828356", "rating": "1503.98210672", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0658904556385"}, "Io": {"deviation": "33.6144788958", "rating": "1471.58931907", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0616445842787"}, "J": {"deviation": "36.0481344978", "rating": "1515.11639951", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0609851477175"}, "ELisp": {"deviation": "37.7475288517", "rating": "1204.28722267", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0614383949441"}, "C++": {"deviation": "42.7524908935", "rating": "1666.80146602", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0645979536788"}, "Standard ML": {"deviation": "35.3739163906", "rating": "1333.08429444", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0601674110745"}, "R": {"deviation": "41.4818381071", "rating": "1213.29782764", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.060192306234"}, "Clojure": {"deviation": "37.7851597521", "rating": "1706.43229984", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0603668419899"}, "Prolog": {"deviation": "38.4477329269", "rating": "1193.23859259", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0602221842387"}, "REBOL": {"deviation": "214.703391647", "rating": "1528.8734506", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0599946536216"}, "Fortran": {"deviation": "38.2220909391", "rating": "1219.31989089", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0603397879814"}, "Assembler": {"deviation": "49.3377200094", "rating": "1049.74852622", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0605708713816"}, "Python": {"deviation": "42.3660242378", "rating": "1809.43874553", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0610389783841"}, "Pascal": {"deviation": "36.4780528784", "rating": "1304.78760043", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0614219371307"}, "Haskell": {"deviation": "48.1314510515", "rating": "1508.65475087", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0928819561809"}, "Cobol": {"deviation": "38.6345186795", "rating": "1161.23181546", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0604283533823"}, "APL": {"deviation": "36.0868391855", "rating": "1271.32224625", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0602500551135"}, "ActionScript": {"deviation": "177.299808796", "rating": "1953.77579463", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0600750791462"}, "Go": {"deviation": "35.4103800375", "rating": "1548.11477044", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0627865268016"}, "Visual Basic": {"deviation": "38.7172124825", "rating": "1703.69408067", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0635354174058"}, "PHP": {"deviation": "46.1422261697", "rating": "1236.39362518", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0603813529162"}, "Mozart-Oz": {"deviation": "33.3045978352", "rating": "1514.83304629", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0611343669649"}, "Smalltalk": {"deviation": "35.3467908568", "rating": "1655.09132994", "ratingsMin": "1049.74852622", "ratingsMax": "1953.77579463", "volatility": "0.0617478903215"}}, "I find it easy to write efficient code in this language": {"Coq": {"deviation": "39.2348276968", "rating": "1280.522671", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0600065717301"}, "Eiffel": {"deviation": "34.0900788551", "rating": "1509.91479519", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0647306589769"}, "Java": {"deviation": "43.2523128012", "rating": "1657.52597408", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0744368549385"}, "Scala": {"deviation": "37.0460470871", "rating": "1711.65307376", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0603105810162"}, "Delphi": {"deviation": "39.2651092868", "rating": "1716.10507279", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0671108837399"}, "Ada": {"deviation": "34.0380866814", "rating": "1608.84837734", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0624439371807"}, "Perl": {"deviation": "49.3581493663", "rating": "1362.34193888", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0912851195279"}, "Lua": {"deviation": "35.9688494378", "rating": "1561.05336523", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0674788379288"}, "Shell": {"deviation": "39.7446975091", "rating": "1411.89556235", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0624922826272"}, "Matlab": {"deviation": "38.5068357215", "rating": "1525.4144748", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.062349430488"}, "Factor": {"deviation": "32.4141916352", "rating": "1468.39097839", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.064645932922"}, "Haxe": {"deviation": "37.0438608499", "rating": "1587.25858782", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0604770163344"}, "Erlang": {"deviation": "37.59643149", "rating": "1498.98396232", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.068660559562"}, "Forth": {"deviation": "33.7068210621", "rating": "1588.0720228", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0653400096147"}, "Scheme": {"deviation": "41.8896672216", "rating": "1604.92368083", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0776803480386"}, "Objective C": {"deviation": "36.4755195879", "rating": "1618.64278778", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0618666142834"}, "C#": {"deviation": "39.3154600166", "rating": "1690.70976224", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0615730044102"}, "Javascript": {"deviation": "49.4301613772", "rating": "1467.30514811", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.092014490985"}, "Common Lisp": {"deviation": "37.9638994153", "rating": "1623.41946552", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0679121352915"}, "TCL": {"deviation": "37.7361905523", "rating": "1373.00799839", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0611190670322"}, "F#": {"deviation": "35.9697541556", "rating": "1722.80854634", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0606546858905"}, "AWK": {"deviation": "37.7736123252", "rating": "1551.62159281", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0709724469125"}, "Ruby": {"deviation": "48.0433259723", "rating": "1457.75629837", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0962014393804"}, "Agda": {"deviation": "93.3644668008", "rating": "1142.8356647", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0600117862102"}, "Groovy": {"deviation": "39.4306609943", "rating": "1451.03314065", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0683849931825"}, "C": {"deviation": "41.4418808923", "rating": "1760.27126438", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0606551351459"}, "Mathematica": {"deviation": "37.9696167914", "rating": "1450.79044559", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0611470073699"}, "D": {"deviation": "35.8073739338", "rating": "1691.17161557", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0602888105014"}, "O'Caml": {"deviation": "35.764029015", "rating": "1663.4877707", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0601764676117"}, "Io": {"deviation": "35.2893644824", "rating": "1394.27253921", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0606622568074"}, "J": {"deviation": "31.6308808185", "rating": "1649.19345384", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0625051214686"}, "ELisp": {"deviation": "36.7560082142", "rating": "1373.23254028", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0634545429333"}, "C++": {"deviation": "39.9501029948", "rating": "1777.42659192", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0630397944812"}, "Standard ML": {"deviation": "31.5538679793", "rating": "1598.80911937", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.061161073499"}, "R": {"deviation": "39.3402715604", "rating": "1437.20383801", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0667078158165"}, "Clojure": {"deviation": "37.5049971899", "rating": "1664.77632304", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0634713749791"}, "Prolog": {"deviation": "36.9977738096", "rating": "1392.06680764", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0617884636256"}, "REBOL": {"deviation": "74.4361689667", "rating": "1460.91057908", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0599956658946"}, "Fortran": {"deviation": "36.743475385", "rating": "1669.95788042", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0658917371804"}, "Assembler": {"deviation": "53.3955552294", "rating": "1705.78435343", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.124141503072"}, "Python": {"deviation": "50.6827401697", "rating": "1490.11123761", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.104021141254"}, "Pascal": {"deviation": "40.0681967737", "rating": "1524.66762786", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0649748741128"}, "Haskell": {"deviation": "42.9945921141", "rating": "1517.92279583", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0767048083501"}, "Cobol": {"deviation": "37.5236966559", "rating": "1354.99333458", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0617391959085"}, "APL": {"deviation": "32.1868005087", "rating": "1445.19144179", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0645656011761"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.06"}, "Go": {"deviation": "35.2537941792", "rating": "1635.49780185", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0600159026187"}, "Visual Basic": {"deviation": "40.1214821252", "rating": "1420.15288295", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0630186733619"}, "PHP": {"deviation": "44.0680572377", "rating": "1425.07420802", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.072557733244"}, "Mozart-Oz": {"deviation": "32.1363912166", "rating": "1380.17375206", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0601470885478"}, "Smalltalk": {"deviation": "37.1115765359", "rating": "1460.39302546", "ratingsMin": "1142.8356647", "ratingsMax": "1777.42659192", "volatility": "0.0789681755799"}}, "I rarely have difficulty abstracting patterns I find in my code": {"Coq": {"deviation": "37.4289429132", "rating": "1401.78672638", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0623488986885"}, "Eiffel": {"deviation": "35.3275362492", "rating": "1506.20047086", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0613841362523"}, "Java": {"deviation": "71.7233964549", "rating": "1533.52738624", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.247557917401"}, "Scala": {"deviation": "40.9227211722", "rating": "1757.80177379", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0607412656254"}, "Delphi": {"deviation": "35.0157473327", "rating": "1355.8380313", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0614028859821"}, "Ada": {"deviation": "37.1254039201", "rating": "1385.01922595", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0643399369751"}, "Perl": {"deviation": "38.725706955", "rating": "1467.57320743", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0709261885424"}, "Lua": {"deviation": "39.1254853475", "rating": "1590.7662161", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0700524206962"}, "Shell": {"deviation": "38.7559577142", "rating": "1220.09176778", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0602588241322"}, "Matlab": {"deviation": "38.0496650468", "rating": "1363.20812425", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0601214130285"}, "Factor": {"deviation": "34.2536046409", "rating": "1362.74025508", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0608812622156"}, "Haxe": {"deviation": "45.6926786186", "rating": "1381.73224039", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0603366031103"}, "Erlang": {"deviation": "36.9564597887", "rating": "1453.42317834", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0673040967213"}, "Forth": {"deviation": "36.9889391151", "rating": "1386.26728538", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0676365028391"}, "Scheme": {"deviation": "38.6892010703", "rating": "1525.18439115", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0662440904636"}, "Objective C": {"deviation": "34.6196210416", "rating": "1426.71947309", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0665121109624"}, "C#": {"deviation": "40.9460569318", "rating": "1518.37618085", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0745476864488"}, "Javascript": {"deviation": "42.0415088569", "rating": "1531.19183415", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0889045585072"}, "Common Lisp": {"deviation": "39.9913134523", "rating": "1685.76966034", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0629078851402"}, "TCL": {"deviation": "37.9744860941", "rating": "1281.70846723", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0608300869279"}, "F#": {"deviation": "36.3226845708", "rating": "1648.2535908", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.06222691837"}, "AWK": {"deviation": "37.399631384", "rating": "1220.56443271", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0601908804226"}, "Ruby": {"deviation": "35.7727493134", "rating": "1632.26576764", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0667494179886"}, "Agda": {"deviation": "96.2055390634", "rating": "1365.12240232", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0599813949344"}, "Groovy": {"deviation": "37.7436944726", "rating": "1542.94985185", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0650411356583"}, "C": {"deviation": "40.8716845881", "rating": "1356.96693357", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0705927447386"}, "Mathematica": {"deviation": "41.2848804689", "rating": "1357.23086159", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0601652927334"}, "D": {"deviation": "38.0698830893", "rating": "1549.14518471", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0638421271885"}, "O'Caml": {"deviation": "39.7725825428", "rating": "1670.50553824", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0611881275935"}, "Io": {"deviation": "41.4290998394", "rating": "1729.97505113", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0645692152432"}, "J": {"deviation": "36.4989105246", "rating": "1407.55454701", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0609955055017"}, "ELisp": {"deviation": "38.1589017187", "rating": "1541.53294376", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0698812023967"}, "C++": {"deviation": "44.7543376603", "rating": "1350.92203217", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0941479903145"}, "Standard ML": {"deviation": "36.8212470013", "rating": "1632.79838784", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0623008391005"}, "R": {"deviation": "40.2188773134", "rating": "1385.38342255", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0615563661029"}, "Clojure": {"deviation": "40.7426702597", "rating": "1815.05733852", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0611940485367"}, "Prolog": {"deviation": "37.2242419806", "rating": "1336.70444966", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.066220160132"}, "REBOL": {"deviation": "63.4202773506", "rating": "1587.37402261", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0601997231837"}, "Fortran": {"deviation": "36.4754075797", "rating": "1211.30345833", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0602728267073"}, "Assembler": {"deviation": "44.0903093427", "rating": "998.586783316", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0600520568964"}, "Python": {"deviation": "41.8796356342", "rating": "1634.05621273", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0731464077806"}, "Pascal": {"deviation": "37.0366092077", "rating": "1356.83541554", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0603159842366"}, "Haskell": {"deviation": "39.4987714035", "rating": "1731.62348803", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0660087381796"}, "Cobol": {"deviation": "42.2564287008", "rating": "1106.0965096", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0602218849829"}, "APL": {"deviation": "34.9375689265", "rating": "1377.23417642", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0625740601896"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.06"}, "Go": {"deviation": "38.150864647", "rating": "1418.29985736", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0628350398147"}, "Visual Basic": {"deviation": "35.9909929462", "rating": "1330.36320491", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0604420546813"}, "PHP": {"deviation": "37.7414082166", "rating": "1389.1693677", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0639173430192"}, "Mozart-Oz": {"deviation": "38.1410762303", "rating": "1464.95900757", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0602655782596"}, "Smalltalk": {"deviation": "36.5715288353", "rating": "1624.64877007", "ratingsMin": "998.586783316", "ratingsMax": "1815.05733852", "volatility": "0.0611982506865"}}, "I learned this language early in my career as a programmer": {"Coq": {"deviation": "47.2773140362", "rating": "1291.30022502", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0608200390297"}, "Eiffel": {"deviation": "37.5620531959", "rating": "1565.93670779", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0606489280996"}, "Java": {"deviation": "39.4158087788", "rating": "1577.47237026", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0670052490126"}, "Scala": {"deviation": "43.3978588921", "rating": "1189.40035295", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.059907892585"}, "Delphi": {"deviation": "35.8453996923", "rating": "1693.13975221", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0603964544748"}, "Ada": {"deviation": "35.7999001698", "rating": "1597.694608", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0622209001643"}, "Perl": {"deviation": "37.2512797017", "rating": "1581.88846008", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0660228512987"}, "Lua": {"deviation": "38.179493861", "rating": "1356.94078179", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0607853270084"}, "Shell": {"deviation": "39.0746914749", "rating": "1580.3260056", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0657091486122"}, "Matlab": {"deviation": "39.6633543347", "rating": "1406.65452273", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0644889356338"}, "Factor": {"deviation": "52.1773141753", "rating": "1126.99752073", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0600626984254"}, "Haxe": {"deviation": "49.4256036979", "rating": "1151.52731742", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0600849252349"}, "Erlang": {"deviation": "39.0078684686", "rating": "1209.809449", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0600897744632"}, "Forth": {"deviation": "35.9613088608", "rating": "1518.9434223", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0615232137033"}, "Scheme": {"deviation": "40.5655371979", "rating": "1417.5086563", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0716230719321"}, "Objective C": {"deviation": "39.4968864903", "rating": "1272.08500036", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0607541288129"}, "C#": {"deviation": "41.0810388847", "rating": "1500.47374876", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0690617147587"}, "Javascript": {"deviation": "49.599017368", "rating": "1446.43711549", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0944204438103"}, "Common Lisp": {"deviation": "37.663457268", "rating": "1453.04736319", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.070125994818"}, "TCL": {"deviation": "36.163545157", "rating": "1568.505515", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0616155570979"}, "F#": {"deviation": "39.420130445", "rating": "1222.47503988", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.060249727628"}, "AWK": {"deviation": "36.3975702439", "rating": "1546.01263664", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0621206189854"}, "Ruby": {"deviation": "40.254415243", "rating": "1270.53802958", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0601111715353"}, "Agda": {"deviation": "93.9537415193", "rating": "1061.63741908", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0601159657655"}, "Groovy": {"deviation": "42.5974733215", "rating": "1220.87541175", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0599501810357"}, "C": {"deviation": "41.4928153188", "rating": "1868.26622802", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0596182411807"}, "Mathematica": {"deviation": "36.4318497231", "rating": "1494.09040673", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0625374206788"}, "D": {"deviation": "38.672055069", "rating": "1291.79948178", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0602749843867"}, "O'Caml": {"deviation": "35.6788819136", "rating": "1439.20112996", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0608145735611"}, "Io": {"deviation": "43.0694087877", "rating": "1264.87850638", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0601021642006"}, "J": {"deviation": "67.1288673822", "rating": "1350.82167186", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0603907276019"}, "ELisp": {"deviation": "35.1389806433", "rating": "1412.55657692", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0607493228849"}, "C++": {"deviation": "39.4707131659", "rating": "1729.82963027", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0615700908846"}, "Standard ML": {"deviation": "35.4155896848", "rating": "1488.74944346", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0613130393483"}, "R": {"deviation": "41.4564191433", "rating": "1282.73095512", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0601057329163"}, "Clojure": {"deviation": "39.5623995195", "rating": "1236.05395852", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0599775577237"}, "Prolog": {"deviation": "33.9046786184", "rating": "1471.19219431", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0623288867838"}, "REBOL": {"deviation": "88.9219458877", "rating": "1267.7542071", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0603079618915"}, "Fortran": {"deviation": "39.5376943528", "rating": "1789.47398859", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0643025020483"}, "Assembler": {"deviation": "37.3526904608", "rating": "1770.78065322", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0602155906216"}, "Python": {"deviation": "43.0011747376", "rating": "1356.50085495", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.071496890799"}, "Pascal": {"deviation": "41.2785498363", "rating": "1954.07960937", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0600824567369"}, "Haskell": {"deviation": "39.1368557906", "rating": "1263.77233324", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0602638411605"}, "Cobol": {"deviation": "36.6479744984", "rating": "1776.02869707", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0608156940375"}, "APL": {"deviation": "44.6945379264", "rating": "1758.20895682", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.060739086954"}, "ActionScript": {"deviation": "103.957959607", "rating": "1380.04324555", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0601572729393"}, "Go": {"deviation": "43.7188983318", "rating": "1076.32095684", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0602347390484"}, "Visual Basic": {"deviation": "38.659778084", "rating": "1773.46974315", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.062012936063"}, "PHP": {"deviation": "39.6339246906", "rating": "1568.11274447", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0678634608609"}, "Mozart-Oz": {"deviation": "47.9344458193", "rating": "1511.02003491", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0603679130734"}, "Smalltalk": {"deviation": "34.4559193259", "rating": "1497.34076443", "ratingsMin": "1061.63741908", "ratingsMax": "1954.07960937", "volatility": "0.0603934834752"}}, "This language makes it easy to shoot yourself in the foot": {"Coq": {"deviation": "43.3270808405", "rating": "1218.6998385", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0600130502582"}, "Eiffel": {"deviation": "42.2211516064", "rating": "1303.20880693", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0601969649926"}, "Java": {"deviation": "51.9444230966", "rating": "1568.5529407", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.103274639731"}, "Scala": {"deviation": "40.1609242452", "rating": "1352.35096947", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0645165923087"}, "Delphi": {"deviation": "39.8287016314", "rating": "1490.03634005", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0633523105427"}, "Ada": {"deviation": "38.5367934587", "rating": "1216.38201574", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0606067537411"}, "Perl": {"deviation": "37.3897613308", "rating": "1687.16400344", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0598537428713"}, "Lua": {"deviation": "39.3969478057", "rating": "1361.82555907", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0640389540237"}, "Shell": {"deviation": "38.3341244338", "rating": "1789.10097352", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0619189429369"}, "Matlab": {"deviation": "40.4992444728", "rating": "1448.30900225", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0623575786996"}, "Factor": {"deviation": "38.2768407404", "rating": "1565.84048064", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0608070933518"}, "Haxe": {"deviation": "40.4153015907", "rating": "1425.1933499", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0602105437308"}, "Erlang": {"deviation": "37.4570358901", "rating": "1361.4744858", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0615401313559"}, "Forth": {"deviation": "36.7556588033", "rating": "1775.53635043", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0601738908362"}, "Scheme": {"deviation": "39.8966163393", "rating": "1367.58757231", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0641957739299"}, "Objective C": {"deviation": "39.0760110578", "rating": "1725.17683845", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0598902382265"}, "C#": {"deviation": "40.2788846041", "rating": "1531.86955558", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.066754948496"}, "Javascript": {"deviation": "39.116957669", "rating": "1616.96823645", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0635691276755"}, "Common Lisp": {"deviation": "39.6711617579", "rating": "1514.05220455", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0691971177906"}, "TCL": {"deviation": "36.7333937371", "rating": "1628.22208079", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0623259117661"}, "F#": {"deviation": "37.9392708683", "rating": "1252.60505302", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0603715480663"}, "AWK": {"deviation": "37.0067570707", "rating": "1603.21067095", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.063642856894"}, "Ruby": {"deviation": "40.9736962732", "rating": "1470.74364293", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0715819356037"}, "Agda": {"deviation": "79.3459373698", "rating": "1026.14273738", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0604382074233"}, "Groovy": {"deviation": "39.127864722", "rating": "1593.81887361", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0612848152861"}, "C": {"deviation": "46.0169970659", "rating": "1944.95522517", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0590731097518"}, "Mathematica": {"deviation": "38.7492002413", "rating": "1454.50174396", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.06024431533"}, "D": {"deviation": "36.7965838993", "rating": "1582.85007954", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0616235280465"}, "O'Caml": {"deviation": "37.3083722908", "rating": "1274.99106258", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0601515789819"}, "Io": {"deviation": "43.0894849913", "rating": "1494.1629029", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0606553756485"}, "J": {"deviation": "39.3138962972", "rating": "1632.20536266", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0604823440478"}, "ELisp": {"deviation": "35.9437162692", "rating": "1449.42110951", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0620996882978"}, "C++": {"deviation": "43.8926257161", "rating": "1965.28403093", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0595063315308"}, "Standard ML": {"deviation": "37.4205516244", "rating": "1278.95485458", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0602417033976"}, "R": {"deviation": "36.0396526353", "rating": "1482.48847589", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0624486441853"}, "Clojure": {"deviation": "37.7262283201", "rating": "1327.06557552", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0613783379719"}, "Prolog": {"deviation": "39.2131715193", "rating": "1490.2555693", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0698818306232"}, "REBOL": {"deviation": "70.7428930376", "rating": "1626.49397049", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0601159215984"}, "Fortran": {"deviation": "38.4655534855", "rating": "1537.02683969", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0651575910049"}, "Assembler": {"deviation": "45.7128406249", "rating": "2091.75498594", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0601466126293"}, "Python": {"deviation": "46.6771446705", "rating": "1440.9196064", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0767513958556"}, "Pascal": {"deviation": "39.141185393", "rating": "1529.55296958", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0670937073348"}, "Haskell": {"deviation": "47.4680481187", "rating": "1185.52189071", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0611618820452"}, "Cobol": {"deviation": "36.6745020094", "rating": "1551.18465601", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0670048781752"}, "APL": {"deviation": "35.7844562188", "rating": "1574.62433055", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.061952606239"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.06"}, "Go": {"deviation": "38.7581859519", "rating": "1459.27933438", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0607491651411"}, "Visual Basic": {"deviation": "39.7306562575", "rating": "1589.894002", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0721300620742"}, "PHP": {"deviation": "39.0941943527", "rating": "1739.62498715", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0600941669811"}, "Mozart-Oz": {"deviation": "37.1011423183", "rating": "1500.17283605", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0609702946556"}, "Smalltalk": {"deviation": "36.890308761", "rating": "1313.97112196", "ratingsMin": "1026.14273738", "ratingsMax": "2091.75498594", "volatility": "0.0607917219648"}}, "This language matches it's problem domain particularly well.": {"Coq": {"deviation": "41.2941041556", "rating": "1627.42827692", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0608092104418"}, "Eiffel": {"deviation": "34.3936763477", "rating": "1434.38901767", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0623586020005"}, "Java": {"deviation": "47.4916079445", "rating": "1444.893803", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0924806926695"}, "Scala": {"deviation": "38.0925088997", "rating": "1579.06253947", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.065064208864"}, "Delphi": {"deviation": "34.9834596036", "rating": "1371.99997616", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0631952776188"}, "Ada": {"deviation": "35.8078179813", "rating": "1558.61949458", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0652456371516"}, "Perl": {"deviation": "38.4314282565", "rating": "1535.9290299", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0734303531468"}, "Lua": {"deviation": "35.1881250048", "rating": "1665.33830174", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0608918221544"}, "Shell": {"deviation": "38.429319144", "rating": "1574.74691715", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0703175008473"}, "Matlab": {"deviation": "39.0107032458", "rating": "1697.14755832", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0608738058823"}, "Factor": {"deviation": "34.8384113388", "rating": "1363.95066419", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0609876898351"}, "Haxe": {"deviation": "39.731474217", "rating": "1584.6227278", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0602693285927"}, "Erlang": {"deviation": "34.5953870897", "rating": "1783.38209459", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0600945348119"}, "Forth": {"deviation": "35.1586471736", "rating": "1545.12191698", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0616301281489"}, "Scheme": {"deviation": "38.4049526948", "rating": "1482.37071666", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.073205516222"}, "Objective C": {"deviation": "35.646255336", "rating": "1515.91441752", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0632077828097"}, "C#": {"deviation": "36.7966977856", "rating": "1499.64045306", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0641614947057"}, "Javascript": {"deviation": "43.3424323349", "rating": "1488.82451566", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0876871700757"}, "Common Lisp": {"deviation": "34.850173334", "rating": "1599.13133967", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0712452093336"}, "TCL": {"deviation": "34.2932465222", "rating": "1529.91766172", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0625168019772"}, "F#": {"deviation": "34.2662917998", "rating": "1593.89628046", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0615615380703"}, "AWK": {"deviation": "36.0217457078", "rating": "1659.96831927", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0613612269497"}, "Ruby": {"deviation": "37.5030961633", "rating": "1461.72336409", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0669183494649"}, "Agda": {"deviation": "86.5189819654", "rating": "1846.30450507", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0600547589771"}, "Groovy": {"deviation": "37.3112413718", "rating": "1473.83526306", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0628347947661"}, "C": {"deviation": "46.868130919", "rating": "1682.59216166", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0901220643637"}, "Mathematica": {"deviation": "42.5668609094", "rating": "1790.9461782", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0602999805025"}, "D": {"deviation": "33.9700310405", "rating": "1611.70024588", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0603951278207"}, "O'Caml": {"deviation": "32.7775322927", "rating": "1600.48500626", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0629524538429"}, "Io": {"deviation": "33.7755075731", "rating": "1538.2558312", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0620891665467"}, "J": {"deviation": "41.6790963567", "rating": "1807.21515145", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0607388616744"}, "ELisp": {"deviation": "34.8732311956", "rating": "1648.6770239", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.060224379974"}, "C++": {"deviation": "43.7079608329", "rating": "1380.23530752", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0841087804252"}, "Standard ML": {"deviation": "32.5543816505", "rating": "1517.66302371", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0634756662753"}, "R": {"deviation": "38.1257160662", "rating": "1801.39340323", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0602142748513"}, "Clojure": {"deviation": "34.1151563321", "rating": "1635.01682464", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0637973115536"}, "Prolog": {"deviation": "33.2399954025", "rating": "1650.34071216", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0607552914114"}, "REBOL": {"deviation": "76.5987410128", "rating": "1272.60689408", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0600434804267"}, "Fortran": {"deviation": "38.2842878285", "rating": "1478.39418742", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0662501061192"}, "Assembler": {"deviation": "40.3725621427", "rating": "1687.79370889", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.074404631852"}, "Python": {"deviation": "39.9226887462", "rating": "1545.9452321", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.068264529293"}, "Pascal": {"deviation": "39.4261591592", "rating": "1262.2695636", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0625168621293"}, "Haskell": {"deviation": "35.8490997057", "rating": "1612.532317", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.061090510056"}, "Cobol": {"deviation": "34.0814123882", "rating": "1513.67173845", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0640955755501"}, "APL": {"deviation": "36.7422127743", "rating": "1508.51653173", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0632736755711"}, "ActionScript": {"deviation": "105.87932423", "rating": "1765.43428353", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0601932213997"}, "Go": {"deviation": "34.9769035861", "rating": "1559.38967054", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0614999324478"}, "Visual Basic": {"deviation": "39.7593828125", "rating": "1388.27611307", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0647383740554"}, "PHP": {"deviation": "43.0581646189", "rating": "1518.67265907", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0798062381373"}, "Mozart-Oz": {"deviation": "42.9201868102", "rating": "1581.74394521", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0609787243994"}, "Smalltalk": {"deviation": "34.6988922908", "rating": "1562.63355734", "ratingsMin": "1262.2695636", "ratingsMax": "1846.30450507", "volatility": "0.0666036049985"}}, "This language is well suited for an agile development approach using short iterations.": {"Coq": {"deviation": "52.7642472734", "rating": "1204.66521126", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600904209622"}, "Eiffel": {"deviation": "44.0116445258", "rating": "1229.16936769", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600233687577"}, "Java": {"deviation": "46.9293725807", "rating": "1542.14036813", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0866399686828"}, "Scala": {"deviation": "41.237984998", "rating": "1701.23642841", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0604298618964"}, "Delphi": {"deviation": "38.281620389", "rating": "1454.06825553", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.064175979918"}, "Ada": {"deviation": "35.964868737", "rating": "1359.82782613", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0601731201642"}, "Perl": {"deviation": "39.4905902506", "rating": "1468.41571923", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0722512526934"}, "Lua": {"deviation": "39.0546557261", "rating": "1697.97446535", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0616192914979"}, "Shell": {"deviation": "37.4402837507", "rating": "1400.67056451", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.06283195265"}, "Matlab": {"deviation": "37.8730189519", "rating": "1508.04235081", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0628178035887"}, "Factor": {"deviation": "48.4034347273", "rating": "1549.17102472", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.060053921809"}, "Haxe": {"deviation": "41.1802788616", "rating": "1569.53155999", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0602194583417"}, "Erlang": {"deviation": "34.6629145204", "rating": "1516.33903055", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0614334090411"}, "Forth": {"deviation": "35.1551083119", "rating": "1489.30269644", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0650452560856"}, "Scheme": {"deviation": "38.814218441", "rating": "1553.85411503", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0626969838708"}, "Objective C": {"deviation": "37.8469620428", "rating": "1338.3511848", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0617791005341"}, "C#": {"deviation": "40.5859472446", "rating": "1592.23530604", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0645543314134"}, "Javascript": {"deviation": "44.5623570502", "rating": "1502.22669374", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0835763297658"}, "Common Lisp": {"deviation": "37.4855774577", "rating": "1629.72897765", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0617042303894"}, "TCL": {"deviation": "35.0483863592", "rating": "1471.01127263", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0631581766493"}, "F#": {"deviation": "36.5891672488", "rating": "1552.71614371", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.060834877301"}, "AWK": {"deviation": "36.9713063933", "rating": "1388.32918684", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0617639474097"}, "Ruby": {"deviation": "40.9511748123", "rating": "1731.05235922", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0599832242772"}, "Agda": {"deviation": "99.1220848361", "rating": "1147.72028408", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.060190536402"}, "Groovy": {"deviation": "41.3963792085", "rating": "1650.25684796", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0601726182403"}, "C": {"deviation": "39.7016606328", "rating": "1270.28998875", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0597980040461"}, "Mathematica": {"deviation": "41.1205286962", "rating": "1374.16426198", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0601898314168"}, "D": {"deviation": "36.2924056377", "rating": "1464.72888242", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0613908665433"}, "O'Caml": {"deviation": "36.9701819695", "rating": "1568.17228538", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.060979184084"}, "Io": {"deviation": "42.6341791386", "rating": "1816.6802219", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0599542226901"}, "J": {"deviation": "50.6429811239", "rating": "1464.58236054", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0601369660149"}, "ELisp": {"deviation": "37.4175870154", "rating": "1597.94045494", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0607049937385"}, "C++": {"deviation": "40.5313118022", "rating": "1340.26137654", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0611513012284"}, "Standard ML": {"deviation": "37.177930958", "rating": "1475.26874835", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0609435209011"}, "R": {"deviation": "37.3518165859", "rating": "1467.70573932", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0608748578575"}, "Clojure": {"deviation": "38.5499217551", "rating": "1622.75518706", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600708507942"}, "Prolog": {"deviation": "35.8241263409", "rating": "1391.31271508", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0629131595704"}, "REBOL": {"deviation": "133.371320447", "rating": "1617.54546062", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.060000786156"}, "Fortran": {"deviation": "38.0564263749", "rating": "1239.18166296", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600401336148"}, "Assembler": {"deviation": "47.5340565881", "rating": "1033.3338771", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600753319241"}, "Python": {"deviation": "43.7830764698", "rating": "1848.66126032", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600815532199"}, "Pascal": {"deviation": "37.2485789227", "rating": "1301.7833857", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600940134686"}, "Haskell": {"deviation": "39.8820129031", "rating": "1549.40475308", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0678354047447"}, "Cobol": {"deviation": "44.6081244488", "rating": "1092.05260892", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.06043588199"}, "APL": {"deviation": "42.7997037846", "rating": "1387.0020488", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0615105857247"}, "ActionScript": {"deviation": "91.2727265455", "rating": "1576.0108468", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0600458601324"}, "Go": {"deviation": "36.9159818326", "rating": "1510.94004462", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.060576514245"}, "Visual Basic": {"deviation": "37.9256561809", "rating": "1322.87121617", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0624533883402"}, "PHP": {"deviation": "42.7860636824", "rating": "1575.71446466", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0768750884567"}, "Mozart-Oz": {"deviation": "54.427720755", "rating": "1653.3267191", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0608045716182"}, "Smalltalk": {"deviation": "37.9399931265", "rating": "1731.12448839", "ratingsMin": "1033.3338771", "ratingsMax": "1848.66126032", "volatility": "0.0604390796644"}}, "I use this language out of choice": {"Coq": {"deviation": "35.4904925428", "rating": "1694.78598838", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0603215045154"}, "Eiffel": {"deviation": "32.4147169938", "rating": "1510.87022143", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0645671362974"}, "Java": {"deviation": "143.303996003", "rating": "1214.78895064", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "1.66381378788"}, "Scala": {"deviation": "40.1568184166", "rating": "1859.54319717", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0600629072659"}, "Delphi": {"deviation": "39.7224828798", "rating": "1451.60636188", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0640915676145"}, "Ada": {"deviation": "36.8553816283", "rating": "1456.59834918", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0642481750111"}, "Perl": {"deviation": "47.8400520658", "rating": "1452.90287829", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.107075462723"}, "Lua": {"deviation": "43.9495748643", "rating": "1684.6384955", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0747862580663"}, "Shell": {"deviation": "42.2372570446", "rating": "1515.72816573", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0737080334597"}, "Matlab": {"deviation": "37.5089030532", "rating": "1386.39843869", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0628528801532"}, "Factor": {"deviation": "34.7441513682", "rating": "1548.05317748", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0618438296565"}, "Haxe": {"deviation": "39.5468702408", "rating": "1626.67331223", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0615125031169"}, "Erlang": {"deviation": "36.210144704", "rating": "1577.76150265", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0619535292769"}, "Forth": {"deviation": "36.3094249304", "rating": "1478.65746273", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0692368331404"}, "Scheme": {"deviation": "36.7064695882", "rating": "1590.10174402", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0650294960767"}, "Objective C": {"deviation": "43.8831587468", "rating": "1622.75921997", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0750919160063"}, "C#": {"deviation": "45.1473696759", "rating": "1629.43872527", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.075609434979"}, "Javascript": {"deviation": "54.7191018454", "rating": "1525.0110508", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.102710069888"}, "Common Lisp": {"deviation": "37.2843259766", "rating": "1555.6741716", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.062969225277"}, "TCL": {"deviation": "36.6611166377", "rating": "1443.04183494", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0674314393652"}, "F#": {"deviation": "38.2457986492", "rating": "1790.15699895", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0613704292224"}, "AWK": {"deviation": "40.1343407617", "rating": "1525.91105886", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0691726691258"}, "Ruby": {"deviation": "41.3484238888", "rating": "1722.92441261", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.063363282839"}, "Agda": {"deviation": "147.423357209", "rating": "1736.58948889", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0600499290738"}, "Groovy": {"deviation": "38.6327142683", "rating": "1516.80965933", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0633840957028"}, "C": {"deviation": "158.22189258", "rating": "988.788651181", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "1.53561935712"}, "Mathematica": {"deviation": "37.286371593", "rating": "1494.34128512", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0615840915407"}, "D": {"deviation": "37.4048497814", "rating": "1586.82941413", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0627914307808"}, "O'Caml": {"deviation": "37.308166988", "rating": "1681.92828766", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0617410288648"}, "Io": {"deviation": "34.4741297889", "rating": "1554.60620676", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0629201741061"}, "J": {"deviation": "37.5932922053", "rating": "1664.55179677", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0621798877035"}, "ELisp": {"deviation": "36.0319695135", "rating": "1515.0488484", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0637452572282"}, "C++": {"deviation": "169.699882665", "rating": "1081.28788951", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "1.85143938302"}, "Standard ML": {"deviation": "38.4627519513", "rating": "1634.51998462", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0663343151544"}, "R": {"deviation": "34.8593197252", "rating": "1604.1522276", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0615074435256"}, "Clojure": {"deviation": "41.3416809707", "rating": "1824.05050031", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0602819158402"}, "Prolog": {"deviation": "39.0183872562", "rating": "1470.92717613", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.079151763785"}, "REBOL": {"deviation": "90.0252474799", "rating": "1648.99515876", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0601213283403"}, "Fortran": {"deviation": "39.7691886673", "rating": "1266.55375141", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0608601655408"}, "Assembler": {"deviation": "40.7599099294", "rating": "1437.01912877", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0690434991447"}, "Python": {"deviation": "43.7644167192", "rating": "1864.30611976", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0612699837652"}, "Pascal": {"deviation": "38.1297277018", "rating": "1289.34864775", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0612326347905"}, "Haskell": {"deviation": "40.996497453", "rating": "1780.19971276", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0626728763486"}, "Cobol": {"deviation": "44.7556240947", "rating": "1052.42991766", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0609267260948"}, "APL": {"deviation": "34.8215226662", "rating": "1464.96302696", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0642373240133"}, "ActionScript": {"deviation": "114.026624253", "rating": "1818.87270021", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0602155130202"}, "Go": {"deviation": "36.6077064681", "rating": "1578.45502534", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0623966775334"}, "Visual Basic": {"deviation": "45.3261632591", "rating": "1239.67688668", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0617029144705"}, "PHP": {"deviation": "49.2665921004", "rating": "1342.69641797", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0772200953351"}, "Mozart-Oz": {"deviation": "33.8976778728", "rating": "1512.90491369", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.064093024985"}, "Smalltalk": {"deviation": "37.3911436795", "rating": "1590.55457691", "ratingsMin": "988.788651181", "ratingsMax": "1864.30611976", "volatility": "0.0626445812315"}}, "This language is good for beginners": {"Coq": {"deviation": "35.8582629056", "rating": "1333.73278775", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0654122544212"}, "Eiffel": {"deviation": "34.2302301663", "rating": "1418.89718354", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0639804931092"}, "Java": {"deviation": "49.708518977", "rating": "1594.17654255", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0907474847473"}, "Scala": {"deviation": "43.5080666034", "rating": "1521.95999623", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.073030807935"}, "Delphi": {"deviation": "38.9324690462", "rating": "1619.27080299", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0634227570593"}, "Ada": {"deviation": "37.9802440275", "rating": "1464.88500465", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0662211091345"}, "Perl": {"deviation": "39.6231888772", "rating": "1471.61445579", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0748016047127"}, "Lua": {"deviation": "39.6848177269", "rating": "1773.20400443", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0610459100086"}, "Shell": {"deviation": "41.1194310625", "rating": "1473.65604399", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0727158691111"}, "Matlab": {"deviation": "39.6850746777", "rating": "1564.22856043", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0643532557127"}, "Factor": {"deviation": "36.762661805", "rating": "1589.51061103", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.060809217654"}, "Haxe": {"deviation": "38.3053647126", "rating": "1473.26979684", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.060462098953"}, "Erlang": {"deviation": "38.6232095987", "rating": "1502.20273568", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0680431528833"}, "Forth": {"deviation": "38.4229611015", "rating": "1449.76067636", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0671621496816"}, "Scheme": {"deviation": "41.3951828754", "rating": "1894.82952887", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0599844862748"}, "Objective C": {"deviation": "38.7675697366", "rating": "1437.92912141", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0647082569256"}, "C#": {"deviation": "39.2339771569", "rating": "1637.42411418", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0661166934655"}, "Javascript": {"deviation": "43.3429874929", "rating": "1604.73370014", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0743106299038"}, "Common Lisp": {"deviation": "43.6430321558", "rating": "1565.13433949", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0755649574403"}, "TCL": {"deviation": "36.4644783843", "rating": "1464.60739373", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0647004841339"}, "F#": {"deviation": "37.0297779007", "rating": "1576.84711224", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0654496997722"}, "AWK": {"deviation": "44.6001195748", "rating": "1459.80094584", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0777967347263"}, "Ruby": {"deviation": "40.8473813396", "rating": "1735.70249779", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0604906101211"}, "Agda": {"deviation": "41.3489392367", "rating": "1469.69951526", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0664902918696"}, "Groovy": {"deviation": "38.8033858693", "rating": "1593.3023609", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0633486015805"}, "C": {"deviation": "194.269177366", "rating": "1917.62059729", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "2.16835556688"}, "Mathematica": {"deviation": "37.9994396259", "rating": "1587.88858597", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0610194099593"}, "D": {"deviation": "37.05848099", "rating": "1510.37577588", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0644082957728"}, "O'Caml": {"deviation": "37.5190452267", "rating": "1520.76733938", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0671951595072"}, "Io": {"deviation": "37.349653139", "rating": "1572.18530476", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0620912097369"}, "J": {"deviation": "33.6347121893", "rating": "1543.20336363", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0630247541855"}, "ELisp": {"deviation": "37.4613488051", "rating": "1388.82965871", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0625071708214"}, "C++": {"deviation": "42.9184744958", "rating": "1269.22494633", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.061048958934"}, "Standard ML": {"deviation": "36.1533661795", "rating": "1773.43573788", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0618917503294"}, "R": {"deviation": "40.2540568568", "rating": "1467.49307186", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0611313195603"}, "Clojure": {"deviation": "40.6087212783", "rating": "1525.76488438", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0669111811832"}, "Prolog": {"deviation": "38.6379622009", "rating": "1420.73965576", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.073002171202"}, "REBOL": {"deviation": "100.079752662", "rating": "1690.20930316", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0600242985561"}, "Fortran": {"deviation": "38.2846626802", "rating": "1461.6704765", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0636025575997"}, "Assembler": {"deviation": "43.1631258008", "rating": "1266.95005235", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0628321650847"}, "Python": {"deviation": "43.9492717794", "rating": "1894.83708556", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0595792751491"}, "Pascal": {"deviation": "39.8561593468", "rating": "1636.71179641", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0608222771999"}, "Haskell": {"deviation": "53.7575289765", "rating": "1476.58621421", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.136421348862"}, "Cobol": {"deviation": "36.6405771079", "rating": "1306.98872092", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0604423065789"}, "APL": {"deviation": "36.6113920038", "rating": "1458.18096196", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0629831810551"}, "ActionScript": {"deviation": "65.5501755425", "rating": "1406.89826337", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.060112030113"}, "Go": {"deviation": "37.6316008611", "rating": "1514.89953166", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0641803160524"}, "Visual Basic": {"deviation": "38.3744991823", "rating": "1562.2524535", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0714753235696"}, "PHP": {"deviation": "53.0351768707", "rating": "1606.85465772", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.104059691596"}, "Mozart-Oz": {"deviation": "33.5568142742", "rating": "1451.96765994", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0615144403685"}, "Smalltalk": {"deviation": "39.1998690599", "rating": "1837.40508264", "ratingsMin": "1266.95005235", "ratingsMax": "1917.62059729", "volatility": "0.0599998713299"}}, "I would use this language for a web project": {"Coq": {"deviation": "43.6832040203", "rating": "1159.70474589", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0600028688563"}, "Eiffel": {"deviation": "36.3603323928", "rating": "1378.87118328", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0612372932386"}, "Java": {"deviation": "42.8483484663", "rating": "1699.57618349", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.059883670423"}, "Scala": {"deviation": "43.5022019752", "rating": "2001.59585321", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0600273643192"}, "Delphi": {"deviation": "39.5611506187", "rating": "1406.71482639", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0614654089767"}, "Ada": {"deviation": "36.6566054643", "rating": "1389.59498148", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0659797062345"}, "Perl": {"deviation": "39.9025915615", "rating": "1692.64556455", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0617457430058"}, "Lua": {"deviation": "39.3312879393", "rating": "1527.68628654", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0659864006634"}, "Shell": {"deviation": "38.5942714287", "rating": "1377.73881192", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0650485721367"}, "Matlab": {"deviation": "43.0580277511", "rating": "1232.01044103", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0600956354834"}, "Factor": {"deviation": "33.9861508371", "rating": "1333.81456704", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0604715269341"}, "Haxe": {"deviation": "40.3382417035", "rating": "1760.9454344", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.059991722068"}, "Erlang": {"deviation": "38.6361956891", "rating": "1638.50455167", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0603362465274"}, "Forth": {"deviation": "34.3736936202", "rating": "1359.65809107", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0600787535856"}, "Scheme": {"deviation": "37.8680339716", "rating": "1516.30730546", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0713603299141"}, "Objective C": {"deviation": "38.2316188666", "rating": "1489.47705928", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0630726881243"}, "C#": {"deviation": "44.2662945997", "rating": "1829.26021294", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0606064122356"}, "Javascript": {"deviation": "42.9445780116", "rating": "1816.61284716", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0593362114923"}, "Common Lisp": {"deviation": "34.974885609", "rating": "1652.55228567", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0636461556408"}, "TCL": {"deviation": "39.4800368717", "rating": "1555.13893301", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0676022382675"}, "F#": {"deviation": "38.1551448356", "rating": "1548.82696427", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0621774657054"}, "AWK": {"deviation": "36.0300471426", "rating": "1286.79059434", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0606364749177"}, "Ruby": {"deviation": "44.0274449222", "rating": "2001.26322369", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0596469725152"}, "Agda": {"deviation": "57.1981865675", "rating": "1696.4332882", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0600346786065"}, "Groovy": {"deviation": "34.4243663345", "rating": "1732.3677348", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0607916972226"}, "C": {"deviation": "43.7684830217", "rating": "1367.38733183", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.062663987417"}, "Mathematica": {"deviation": "54.9788567244", "rating": "1280.58721928", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0604008892806"}, "D": {"deviation": "34.8227280487", "rating": "1458.69920259", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0630282677481"}, "O'Caml": {"deviation": "34.5368007431", "rating": "1541.75063779", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0632725470648"}, "Io": {"deviation": "33.651125278", "rating": "1540.64665444", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0635243756864"}, "J": {"deviation": "34.1023121679", "rating": "1257.37869191", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0603327215348"}, "ELisp": {"deviation": "34.4253128793", "rating": "1383.90868696", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0605063726706"}, "C++": {"deviation": "43.8370829839", "rating": "1460.35613982", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0738894916124"}, "Standard ML": {"deviation": "34.6228155602", "rating": "1345.25419654", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0652718383564"}, "R": {"deviation": "38.3131853338", "rating": "1337.97602196", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0631053440582"}, "Clojure": {"deviation": "37.4905723961", "rating": "1716.58374312", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0599619468582"}, "Prolog": {"deviation": "36.3026997991", "rating": "1366.26523505", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0615267115242"}, "REBOL": {"deviation": "57.4720620618", "rating": "1941.25408429", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0602946572106"}, "Fortran": {"deviation": "36.7887793006", "rating": "1316.16984555", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0599457004451"}, "Assembler": {"deviation": "48.1149212878", "rating": "1122.34409737", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0599296161467"}, "Python": {"deviation": "44.9061204632", "rating": "1902.41003447", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0590614260838"}, "Pascal": {"deviation": "38.9516152768", "rating": "1305.50094947", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0602710476564"}, "Haskell": {"deviation": "38.844370482", "rating": "1717.27168958", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0631895864456"}, "Cobol": {"deviation": "40.5540722492", "rating": "1073.81233126", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0599420746094"}, "APL": {"deviation": "33.5628425239", "rating": "1292.74209077", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0600835682489"}, "ActionScript": {"deviation": "149.035416114", "rating": "1482.30292516", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0599940921227"}, "Go": {"deviation": "35.9321364519", "rating": "1505.61915989", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0624009338152"}, "Visual Basic": {"deviation": "39.139157729", "rating": "1297.68517593", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0667840365715"}, "PHP": {"deviation": "41.1581567357", "rating": "1763.50690531", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0599034678307"}, "Mozart-Oz": {"deviation": "34.0027362765", "rating": "1543.58075797", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0605026246514"}, "Smalltalk": {"deviation": "34.034101475", "rating": "1605.51028502", "ratingsMin": "1073.81233126", "ratingsMax": "2001.59585321", "volatility": "0.0613665725467"}}, "It's unusual for me to discover unfamiliar features": {"Coq": {"deviation": "40.2603050295", "rating": "1370.93880503", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0641333413501"}, "Eiffel": {"deviation": "36.4615511459", "rating": "1651.59948112", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0601088489007"}, "Java": {"deviation": "40.6808700613", "rating": "1698.04015056", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0650157813006"}, "Scala": {"deviation": "36.6495657939", "rating": "1353.50031558", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0636503688856"}, "Delphi": {"deviation": "37.2000952732", "rating": "1580.6878689", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0610612598183"}, "Ada": {"deviation": "33.4345469486", "rating": "1482.34160762", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0630240872825"}, "Perl": {"deviation": "41.6104933686", "rating": "1467.19364587", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0704213276196"}, "Lua": {"deviation": "37.6627136679", "rating": "1635.87937483", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.064939038446"}, "Shell": {"deviation": "38.1383830412", "rating": "1516.46462879", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0666285428818"}, "Matlab": {"deviation": "36.8007312329", "rating": "1512.96273241", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0617044307785"}, "Factor": {"deviation": "34.2427251649", "rating": "1429.81433046", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0608943884106"}, "Haxe": {"deviation": "41.2322175894", "rating": "1560.36013046", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0606716835472"}, "Erlang": {"deviation": "37.1693461155", "rating": "1555.87284443", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0718782314799"}, "Forth": {"deviation": "34.0427871952", "rating": "1551.34940803", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.061608069316"}, "Scheme": {"deviation": "37.2706391391", "rating": "1738.05316687", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0647913076094"}, "Objective C": {"deviation": "39.4932267772", "rating": "1538.10481198", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0671785566963"}, "C#": {"deviation": "40.3780973029", "rating": "1622.27285766", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0733394296901"}, "Javascript": {"deviation": "54.2786162902", "rating": "1523.07691727", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.116642988767"}, "Common Lisp": {"deviation": "39.5570982938", "rating": "1470.21341579", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0778841462044"}, "TCL": {"deviation": "35.8840150722", "rating": "1378.14073694", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0655061199928"}, "F#": {"deviation": "33.5794400561", "rating": "1472.72223105", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0619415429774"}, "AWK": {"deviation": "36.2560838003", "rating": "1588.00069805", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0647929066542"}, "Ruby": {"deviation": "39.1862308532", "rating": "1453.36170086", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0817992799354"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.06"}, "Groovy": {"deviation": "35.8944533598", "rating": "1514.23038623", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0624784422231"}, "C": {"deviation": "41.4396734125", "rating": "1772.48091092", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0622177987689"}, "Mathematica": {"deviation": "39.5613514845", "rating": "1405.19908436", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0607115590227"}, "D": {"deviation": "37.3647990443", "rating": "1490.8926075", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0617438890975"}, "O'Caml": {"deviation": "37.4732567227", "rating": "1419.0336806", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.065317028575"}, "Io": {"deviation": "38.3514915221", "rating": "1470.46116287", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.060326115632"}, "J": {"deviation": "37.1818973419", "rating": "1519.85025997", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0604426001399"}, "ELisp": {"deviation": "33.8965358686", "rating": "1415.51468806", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0612168227953"}, "C++": {"deviation": "87.165624064", "rating": "1451.13842481", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.372666043508"}, "Standard ML": {"deviation": "34.4055887835", "rating": "1659.63260588", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.061715382636"}, "R": {"deviation": "35.6372095914", "rating": "1430.09430605", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.060649406429"}, "Clojure": {"deviation": "36.5352830296", "rating": "1395.77710365", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0649303023635"}, "Prolog": {"deviation": "34.6336131991", "rating": "1564.45717563", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0674072528587"}, "REBOL": {"deviation": "85.2805973607", "rating": "1418.90356266", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0600803885312"}, "Fortran": {"deviation": "35.3973250935", "rating": "1645.93002392", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0653697180196"}, "Assembler": {"deviation": "42.2100089038", "rating": "1629.25172946", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0837926784589"}, "Python": {"deviation": "46.4709158526", "rating": "1616.65076306", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0844258777067"}, "Pascal": {"deviation": "35.0982824458", "rating": "1589.56224717", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0623287971995"}, "Haskell": {"deviation": "45.5347583018", "rating": "1425.51926321", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0784503172783"}, "Cobol": {"deviation": "36.4498353637", "rating": "1548.5631464", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0648460004542"}, "APL": {"deviation": "33.5972699402", "rating": "1535.31178678", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0620721377529"}, "ActionScript": {"deviation": "80.4097230951", "rating": "1428.36054474", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0599570693177"}, "Go": {"deviation": "35.8493392451", "rating": "1487.72881361", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.062446047494"}, "Visual Basic": {"deviation": "39.9842393711", "rating": "1591.12520128", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0705672620259"}, "PHP": {"deviation": "43.4662180191", "rating": "1615.92899916", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0875101240742"}, "Mozart-Oz": {"deviation": "35.6584451624", "rating": "1468.92220104", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0606214411772"}, "Smalltalk": {"deviation": "35.4742013451", "rating": "1556.95669223", "ratingsMin": "1353.50031558", "ratingsMax": "1772.48091092", "volatility": "0.0653175591208"}}, "Code written in this language tends to be terse": {"Coq": {"deviation": "36.8964979069", "rating": "1433.79244525", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.061767888596"}, "Eiffel": {"deviation": "38.7355748274", "rating": "1288.22095035", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0602143526707"}, "Java": {"deviation": "40.2370152997", "rating": "1238.47848723", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0593454253395"}, "Scala": {"deviation": "38.731973578", "rating": "1622.57919632", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0611874821012"}, "Delphi": {"deviation": "39.5168285026", "rating": "1266.36014029", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0599830776483"}, "Ada": {"deviation": "37.0602982124", "rating": "1280.35854998", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0602186250715"}, "Perl": {"deviation": "40.2152044832", "rating": "1730.35485555", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0620756466454"}, "Lua": {"deviation": "38.7998913047", "rating": "1465.00343232", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.067025187442"}, "Shell": {"deviation": "39.6498519029", "rating": "1509.54745494", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0731315402317"}, "Matlab": {"deviation": "39.1199562793", "rating": "1512.13932074", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0618522601643"}, "Factor": {"deviation": "40.991294056", "rating": "1915.22598205", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0602871003164"}, "Haxe": {"deviation": "39.0964411006", "rating": "1445.94079926", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0602860929944"}, "Erlang": {"deviation": "37.350673237", "rating": "1598.08309371", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0634148116625"}, "Forth": {"deviation": "38.4526294345", "rating": "1779.28259985", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0605481048909"}, "Scheme": {"deviation": "36.9884701335", "rating": "1594.39778026", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0627586753214"}, "Objective C": {"deviation": "37.4721204177", "rating": "1332.20727086", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0599093866458"}, "C#": {"deviation": "43.1340754071", "rating": "1460.08589803", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0645635217124"}, "Javascript": {"deviation": "40.518733045", "rating": "1394.11336729", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.076069548785"}, "Common Lisp": {"deviation": "37.7260433874", "rating": "1560.68286102", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0632191943214"}, "TCL": {"deviation": "37.0780831132", "rating": "1474.05173337", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0633305734362"}, "F#": {"deviation": "41.3980755536", "rating": "1804.94605056", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0599574068167"}, "AWK": {"deviation": "37.4113631061", "rating": "1607.1576302", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0654112268553"}, "Ruby": {"deviation": "42.6245151758", "rating": "1639.54345563", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.063351090521"}, "Agda": {"deviation": "135.884941785", "rating": "1694.17687182", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0600061340495"}, "Groovy": {"deviation": "39.6637315021", "rating": "1545.62727782", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0635217394616"}, "C": {"deviation": "51.9427251378", "rating": "1635.34037791", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.143867643068"}, "Mathematica": {"deviation": "38.3532058046", "rating": "1550.07625655", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0603781384012"}, "D": {"deviation": "37.6667505811", "rating": "1404.83466948", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0610587596417"}, "O'Caml": {"deviation": "39.9985542472", "rating": "1717.77156822", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0600654324599"}, "Io": {"deviation": "36.7729675499", "rating": "1693.09696334", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0603569639459"}, "J": {"deviation": "59.3129818203", "rating": "2222.01847437", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0600603299328"}, "ELisp": {"deviation": "38.1882988518", "rating": "1533.27472618", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0622080148706"}, "C++": {"deviation": "39.394492878", "rating": "1424.10358668", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0679088016631"}, "Standard ML": {"deviation": "36.9470151687", "rating": "1590.73339946", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0621215996386"}, "R": {"deviation": "38.5960190456", "rating": "1539.02244327", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0619478817906"}, "Clojure": {"deviation": "41.2381373037", "rating": "1726.63469584", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0598752528889"}, "Prolog": {"deviation": "37.0232171342", "rating": "1592.31318213", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0715801333548"}, "REBOL": {"deviation": "76.091828329", "rating": "1948.24431339", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0599970508653"}, "Fortran": {"deviation": "36.5562497954", "rating": "1373.9119293", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0606622056579"}, "Assembler": {"deviation": "41.6143085674", "rating": "1188.48553597", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0634385229136"}, "Python": {"deviation": "40.9819081999", "rating": "1577.79157028", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0730978810661"}, "Pascal": {"deviation": "35.2980467467", "rating": "1412.77474434", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0604649750097"}, "Haskell": {"deviation": "43.1504148078", "rating": "1844.87008908", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0600572843664"}, "Cobol": {"deviation": "44.1174282943", "rating": "1030.54015097", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0601385447718"}, "APL": {"deviation": "53.9797147766", "rating": "2042.50093573", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0601164384812"}, "ActionScript": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.06"}, "Go": {"deviation": "35.8318628168", "rating": "1504.62556797", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0611328755389"}, "Visual Basic": {"deviation": "39.2154488428", "rating": "1177.21159513", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0603553506764"}, "PHP": {"deviation": "38.7935628841", "rating": "1321.71417182", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0618717112241"}, "Mozart-Oz": {"deviation": "37.6815163294", "rating": "1556.304151", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0609576995398"}, "Smalltalk": {"deviation": "38.5846138174", "rating": "1550.25162085", "ratingsMin": "1030.54015097", "ratingsMax": "2222.01847437", "volatility": "0.0658902252415"}}, "I am reluctant to admit to knowing this language": {"Coq": {"deviation": "38.049498717", "rating": "1265.64596543", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0601540202716"}, "Eiffel": {"deviation": "37.2382914372", "rating": "1560.61957818", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0611009357774"}, "Java": {"deviation": "95.2074286151", "rating": "1766.93038545", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.351838695983"}, "Scala": {"deviation": "37.1258838734", "rating": "1332.78888978", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.060733903805"}, "Delphi": {"deviation": "36.7082029312", "rating": "1714.23584046", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0603495847692"}, "Ada": {"deviation": "35.2649516233", "rating": "1478.96824834", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0624449061563"}, "Perl": {"deviation": "38.214755812", "rating": "1726.81459836", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0660170433038"}, "Lua": {"deviation": "35.4747856887", "rating": "1388.33644568", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0632435647841"}, "Shell": {"deviation": "37.402620213", "rating": "1532.3480371", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0643996965306"}, "Matlab": {"deviation": "35.0593632637", "rating": "1542.52371407", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.061353201603"}, "Factor": {"deviation": "32.5652598989", "rating": "1465.41906718", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0611942400188"}, "Haxe": {"deviation": "39.9600668319", "rating": "1533.65283029", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0611531359025"}, "Erlang": {"deviation": "32.7865992132", "rating": "1504.70439669", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0626632488325"}, "Forth": {"deviation": "33.7865565693", "rating": "1513.34099741", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.067792232838"}, "Scheme": {"deviation": "35.3261585289", "rating": "1324.20469551", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0644379487958"}, "Objective C": {"deviation": "37.6368965427", "rating": "1568.64083059", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0672203464524"}, "C#": {"deviation": "47.1070688026", "rating": "1582.60763305", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0859086521919"}, "Javascript": {"deviation": "44.2603868978", "rating": "1514.1879602", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0947123685517"}, "Common Lisp": {"deviation": "35.3070955157", "rating": "1265.3156897", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0698202658955"}, "TCL": {"deviation": "36.6682359781", "rating": "1648.95599537", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0605652847601"}, "F#": {"deviation": "37.4548270316", "rating": "1418.87435565", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0602892538732"}, "AWK": {"deviation": "34.5599485192", "rating": "1560.38464997", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0621487564136"}, "Ruby": {"deviation": "38.3023010402", "rating": "1515.84183399", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0715479386205"}, "Agda": {"deviation": "110.069244701", "rating": "1747.17568631", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0601375831937"}, "Groovy": {"deviation": "35.4490014683", "rating": "1543.95385721", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0641561458051"}, "C": {"deviation": "45.2821173906", "rating": "1334.91726244", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.08300344033"}, "Mathematica": {"deviation": "40.5228890859", "rating": "1550.57491524", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0604130016681"}, "D": {"deviation": "36.4958365374", "rating": "1432.15648057", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.061361308687"}, "O'Caml": {"deviation": "33.707316489", "rating": "1322.74186768", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0603137515841"}, "Io": {"deviation": "35.5625105578", "rating": "1488.05459481", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0604318550716"}, "J": {"deviation": "39.7485221471", "rating": "1353.62835376", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0602598314505"}, "ELisp": {"deviation": "36.0130943729", "rating": "1489.12927205", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0663010974347"}, "C++": {"deviation": "89.3914572851", "rating": "1299.65567342", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.532624620055"}, "Standard ML": {"deviation": "34.61735964", "rating": "1425.49126502", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0615386455166"}, "R": {"deviation": "33.4912204519", "rating": "1522.78375857", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0619499792694"}, "Clojure": {"deviation": "34.5682102398", "rating": "1359.75683915", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0607821892131"}, "Prolog": {"deviation": "35.2097744321", "rating": "1553.61089957", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0696324981793"}, "REBOL": {"deviation": "72.7364871302", "rating": "1531.44345299", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0600511850777"}, "Fortran": {"deviation": "35.1461383392", "rating": "1597.05765406", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0605848763151"}, "Assembler": {"deviation": "40.6202033625", "rating": "1410.7554382", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0870553631837"}, "Python": {"deviation": "38.6096688942", "rating": "1400.79754411", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0680534315668"}, "Pascal": {"deviation": "35.585357077", "rating": "1736.10168175", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0602126073648"}, "Haskell": {"deviation": "38.229724343", "rating": "1267.88255794", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0631715911791"}, "Cobol": {"deviation": "40.4820164387", "rating": "1905.05376211", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0601738099019"}, "APL": {"deviation": "37.126680851", "rating": "1482.7626398", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0605878884322"}, "ActionScript": {"deviation": "101.641647898", "rating": "1750.48323334", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0601077901174"}, "Go": {"deviation": "36.4738317029", "rating": "1509.2246269", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0630463815386"}, "Visual Basic": {"deviation": "40.4529874807", "rating": "1930.5702419", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0602252771273"}, "PHP": {"deviation": "40.1966189474", "rating": "1792.78021014", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0606724647718"}, "Mozart-Oz": {"deviation": "37.3872078829", "rating": "1633.04800796", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0601637119146"}, "Smalltalk": {"deviation": "35.0407109121", "rating": "1415.72353074", "ratingsMin": "1265.3156897", "ratingsMax": "1930.5702419", "volatility": "0.0640247106412"}}, "I would use this language for mobile applications": {"Coq": {"deviation": "37.595736319", "rating": "1328.59249993", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0611313269115"}, "Eiffel": {"deviation": "32.8768215749", "rating": "1550.39016129", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0626885705247"}, "Java": {"deviation": "38.3621528828", "rating": "1865.59772178", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0593753474947"}, "Scala": {"deviation": "32.399244668", "rating": "1715.28551781", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0603289569753"}, "Delphi": {"deviation": "36.8766110741", "rating": "1369.44352696", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0611838557831"}, "Ada": {"deviation": "34.9032502473", "rating": "1416.32639708", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0653866961465"}, "Perl": {"deviation": "36.8211028428", "rating": "1404.649953", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0652943390951"}, "Lua": {"deviation": "35.5729139791", "rating": "1566.02812615", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0657647588748"}, "Shell": {"deviation": "36.1982350141", "rating": "1324.69341166", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0604913145969"}, "Matlab": {"deviation": "43.9433568886", "rating": "1172.53707175", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0599320916117"}, "Factor": {"deviation": "31.8932935618", "rating": "1452.39338392", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0605714348268"}, "Haxe": {"deviation": "43.4500656477", "rating": "1731.72662689", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0607406899815"}, "Erlang": {"deviation": "37.1007955792", "rating": "1406.79570258", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0728841139948"}, "Forth": {"deviation": "37.2659952064", "rating": "1456.97801127", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0773525260997"}, "Scheme": {"deviation": "38.3007651755", "rating": "1637.43018666", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0761215499925"}, "Objective C": {"deviation": "36.5255320376", "rating": "1805.01733466", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0605791169869"}, "C#": {"deviation": "37.4150043074", "rating": "1763.26606154", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.063139698092"}, "Javascript": {"deviation": "37.0198536162", "rating": "1677.01540553", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0676097424361"}, "Common Lisp": {"deviation": "36.2956544264", "rating": "1583.49643488", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0726625740791"}, "TCL": {"deviation": "37.9817181392", "rating": "1420.87493943", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0624093576564"}, "F#": {"deviation": "36.6632846993", "rating": "1537.36100746", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0662728695214"}, "AWK": {"deviation": "34.367626008", "rating": "1311.17198629", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0599878043391"}, "Ruby": {"deviation": "36.9027659568", "rating": "1559.73200562", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0765957680605"}, "Agda": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.06"}, "Groovy": {"deviation": "36.1193440663", "rating": "1571.59753291", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.064843633471"}, "C": {"deviation": "38.0652542517", "rating": "1543.08948029", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0688210293534"}, "Mathematica": {"deviation": "39.1402444221", "rating": "1190.26770969", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0608776341386"}, "D": {"deviation": "33.1405950369", "rating": "1382.27719882", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0647790767013"}, "O'Caml": {"deviation": "36.6913347356", "rating": "1506.91778794", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0653252564955"}, "Io": {"deviation": "37.8762781528", "rating": "1455.64623103", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0607663024696"}, "J": {"deviation": "40.1586453486", "rating": "1361.61236121", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0605583805578"}, "ELisp": {"deviation": "38.4449587544", "rating": "1304.51034558", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0602075211413"}, "C++": {"deviation": "37.8688723888", "rating": "1594.41897241", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0682732276733"}, "Standard ML": {"deviation": "35.5500329961", "rating": "1357.78963773", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.061771680859"}, "R": {"deviation": "40.8595309783", "rating": "1273.29885538", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0600298520395"}, "Clojure": {"deviation": "34.3645495341", "rating": "1638.60690152", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0620405341444"}, "Prolog": {"deviation": "35.9810436134", "rating": "1313.8204227", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0599311339045"}, "REBOL": {"deviation": "135.127522298", "rating": "1193.42656505", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0600951714187"}, "Fortran": {"deviation": "38.2583466008", "rating": "1194.70050568", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0602773654365"}, "Assembler": {"deviation": "40.281576236", "rating": "1326.87551382", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0733468538658"}, "Python": {"deviation": "36.940016286", "rating": "1692.43884036", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0636056722499"}, "Pascal": {"deviation": "36.4488745498", "rating": "1372.48149842", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0612213186192"}, "Haskell": {"deviation": "43.2447077106", "rating": "1402.14801813", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0872208523169"}, "Cobol": {"deviation": "38.3475367913", "rating": "1122.06180186", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0611249831307"}, "APL": {"deviation": "40.0836414494", "rating": "1292.90205029", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0606168651071"}, "ActionScript": {"deviation": "162.121418312", "rating": "1848.0300271", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0600589762443"}, "Go": {"deviation": "32.939806434", "rating": "1461.80486769", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.062007149087"}, "Visual Basic": {"deviation": "41.1356482183", "rating": "1322.4096466", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0624760329991"}, "PHP": {"deviation": "41.8583783942", "rating": "1377.96334338", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0658193446722"}, "Mozart-Oz": {"deviation": "34.5571288452", "rating": "1331.11912387", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0602474152652"}, "Smalltalk": {"deviation": "32.7201235927", "rating": "1523.7699336", "ratingsMin": "1122.06180186", "ratingsMax": "1865.59772178", "volatility": "0.0653575152034"}}, "This language is unusually bad for beginners": {"Coq": {"deviation": "37.1047819335", "rating": "1649.31776216", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0601486809923"}, "Eiffel": {"deviation": "35.3109715858", "rating": "1407.27365759", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0611726849613"}, "Java": {"deviation": "148.224395235", "rating": "1390.88652778", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.791912290857"}, "Scala": {"deviation": "43.7443860446", "rating": "1522.82295526", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0781535056704"}, "Delphi": {"deviation": "39.2998859659", "rating": "1407.72272098", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0646265668063"}, "Ada": {"deviation": "33.7711443408", "rating": "1643.22764368", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0661922145475"}, "Perl": {"deviation": "40.6279432079", "rating": "1617.82513716", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0707211503753"}, "Lua": {"deviation": "36.8986093414", "rating": "1364.52406804", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0602901511227"}, "Shell": {"deviation": "40.1684096231", "rating": "1420.94645312", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0710430598877"}, "Matlab": {"deviation": "37.6103770964", "rating": "1479.17029686", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0626593271006"}, "Factor": {"deviation": "34.7690846577", "rating": "1530.42807802", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0617148466086"}, "Haxe": {"deviation": "37.3257373842", "rating": "1485.03169864", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0604740188649"}, "Erlang": {"deviation": "36.7158900135", "rating": "1542.81304411", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0698512316336"}, "Forth": {"deviation": "37.0898766011", "rating": "1570.27275765", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0719711876936"}, "Scheme": {"deviation": "39.9844535566", "rating": "1192.34348074", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0609892315822"}, "Objective C": {"deviation": "37.046943058", "rating": "1564.15675325", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0625859823702"}, "C#": {"deviation": "45.2551846359", "rating": "1410.94000873", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0705786578384"}, "Javascript": {"deviation": "49.6625605067", "rating": "1431.38242034", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0889205283774"}, "Common Lisp": {"deviation": "39.2004000213", "rating": "1503.3872458", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0820150077053"}, "TCL": {"deviation": "34.7802784468", "rating": "1446.66848169", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0660633571839"}, "F#": {"deviation": "34.8512225922", "rating": "1410.0961477", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0638523008935"}, "AWK": {"deviation": "38.3283298673", "rating": "1469.85882362", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0782183744264"}, "Ruby": {"deviation": "40.6531576155", "rating": "1225.92905118", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.061785815084"}, "Agda": {"deviation": "67.7138617126", "rating": "1830.83959904", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0600773015296"}, "Groovy": {"deviation": "39.8395663537", "rating": "1417.64193668", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0623907219286"}, "C": {"deviation": "100.931063898", "rating": "1494.83204051", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.366603261121"}, "Mathematica": {"deviation": "38.4698989762", "rating": "1531.27448393", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0615579075545"}, "D": {"deviation": "36.1563587607", "rating": "1452.23189737", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0620027241357"}, "O'Caml": {"deviation": "37.5072848432", "rating": "1494.92788799", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0715999673093"}, "Io": {"deviation": "36.5098570697", "rating": "1297.31552217", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0600328162164"}, "J": {"deviation": "33.0000176062", "rating": "1565.62009036", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0615969606767"}, "ELisp": {"deviation": "34.6625305388", "rating": "1481.8801335", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0643711102831"}, "C++": {"deviation": "43.7511504154", "rating": "1739.68699714", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0624174255466"}, "Standard ML": {"deviation": "36.179709141", "rating": "1470.09114683", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.061116208433"}, "R": {"deviation": "34.3620441219", "rating": "1444.85777964", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0647123900207"}, "Clojure": {"deviation": "35.9738271769", "rating": "1429.95894821", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.065142460854"}, "Prolog": {"deviation": "37.9762310916", "rating": "1555.72333733", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0670808029755"}, "REBOL": {"deviation": "73.1961196319", "rating": "1097.26910112", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0602506109751"}, "Fortran": {"deviation": "36.6041603323", "rating": "1659.59510874", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0691498624328"}, "Assembler": {"deviation": "42.1616847178", "rating": "1714.87120211", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0616803933752"}, "Python": {"deviation": "44.1538233055", "rating": "1190.20099517", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0600392313279"}, "Pascal": {"deviation": "37.3233638567", "rating": "1442.75026467", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0617479274952"}, "Haskell": {"deviation": "48.4269901954", "rating": "1624.97135988", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.106344332245"}, "Cobol": {"deviation": "35.7567058026", "rating": "1655.06552937", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.062076876705"}, "APL": {"deviation": "35.4862525963", "rating": "1581.43059869", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0602995046327"}, "ActionScript": {"deviation": "148.913475154", "rating": "1654.36527382", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0600045961274"}, "Go": {"deviation": "36.968696554", "rating": "1443.36181299", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0615980918287"}, "Visual Basic": {"deviation": "48.3552014515", "rating": "1421.11118731", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0876731127465"}, "PHP": {"deviation": "59.722687712", "rating": "1574.72513038", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.121824231612"}, "Mozart-Oz": {"deviation": "32.3611497423", "rating": "1313.20198698", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.061775448247"}, "Smalltalk": {"deviation": "36.8200243425", "rating": "1314.32283411", "ratingsMin": "1097.26910112", "ratingsMax": "1830.83959904", "volatility": "0.0607986974681"}}, "It is too easy to write code in this language that looks like it does one thing but actually does something else": {"Coq": {"deviation": "40.8704719007", "rating": "1214.22174835", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.060724330625"}, "Eiffel": {"deviation": "34.6224575505", "rating": "1325.01755612", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0607179888669"}, "Java": {"deviation": "41.2053813803", "rating": "1461.94982137", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0728687294058"}, "Scala": {"deviation": "38.8441305345", "rating": "1472.98760741", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0750989826661"}, "Delphi": {"deviation": "35.2199971143", "rating": "1462.44304133", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.061178146634"}, "Ada": {"deviation": "33.1411687469", "rating": "1301.66039935", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0603397069791"}, "Perl": {"deviation": "35.7593199037", "rating": "1728.47477436", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0601286391822"}, "Lua": {"deviation": "35.1099969018", "rating": "1346.49144124", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0678917330196"}, "Shell": {"deviation": "40.3635899955", "rating": "1695.96031542", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0643292711482"}, "Matlab": {"deviation": "36.8631406144", "rating": "1453.27629084", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0626482718584"}, "Factor": {"deviation": "47.1817088819", "rating": "1754.14894879", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0600187464224"}, "Haxe": {"deviation": "40.8423466364", "rating": "1374.70476106", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0603096515211"}, "Erlang": {"deviation": "32.4394285271", "rating": "1298.26710135", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0626493717202"}, "Forth": {"deviation": "31.0659584568", "rating": "1563.89537359", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.064913641436"}, "Scheme": {"deviation": "36.8939345269", "rating": "1461.13491278", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0771784268034"}, "Objective C": {"deviation": "34.265474498", "rating": "1581.84198555", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0649123157488"}, "C#": {"deviation": "37.4862600334", "rating": "1436.06928911", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0660067271252"}, "Javascript": {"deviation": "39.8529805579", "rating": "1620.39333943", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0716604888484"}, "Common Lisp": {"deviation": "38.8337793556", "rating": "1541.80884897", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.078972763358"}, "TCL": {"deviation": "35.3356010271", "rating": "1543.63317226", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0654034266995"}, "F#": {"deviation": "32.7437152192", "rating": "1449.40761504", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.060256318996"}, "AWK": {"deviation": "37.0488681388", "rating": "1518.20773824", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0721946349478"}, "Ruby": {"deviation": "37.8371774516", "rating": "1504.12159471", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0695728902432"}, "Agda": {"deviation": "115.420449533", "rating": "1115.18891531", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0601494497692"}, "Groovy": {"deviation": "36.2393733026", "rating": "1577.07218841", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0634855047146"}, "C": {"deviation": "49.3034450597", "rating": "1587.0047115", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.113674796765"}, "Mathematica": {"deviation": "35.8412604529", "rating": "1441.55945783", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0645586288605"}, "D": {"deviation": "34.6545644496", "rating": "1407.96858496", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0602028313468"}, "O'Caml": {"deviation": "33.6796622668", "rating": "1350.9053494", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0605110814936"}, "Io": {"deviation": "31.3014104766", "rating": "1451.80273197", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0630881471714"}, "J": {"deviation": "36.8989964283", "rating": "1496.86623436", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.061388140661"}, "ELisp": {"deviation": "36.4351564104", "rating": "1531.48604293", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0647886241305"}, "C++": {"deviation": "38.2609817544", "rating": "1717.42267664", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0606654598908"}, "Standard ML": {"deviation": "35.5130424436", "rating": "1260.21079564", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0600970658545"}, "R": {"deviation": "33.631316714", "rating": "1352.59929467", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0630676478515"}, "Clojure": {"deviation": "36.5109737847", "rating": "1374.72229298", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0621106641036"}, "Prolog": {"deviation": "40.0812106395", "rating": "1393.19189307", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0857156756846"}, "REBOL": {"deviation": "350.0", "rating": "1500.0", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.06"}, "Fortran": {"deviation": "33.5680520123", "rating": "1360.74618806", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0629492211954"}, "Assembler": {"deviation": "38.3688343017", "rating": "1575.6255966", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.073047619727"}, "Python": {"deviation": "42.7227844121", "rating": "1390.45647787", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0775144809486"}, "Pascal": {"deviation": "35.3041912938", "rating": "1226.5339082", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0610167480902"}, "Haskell": {"deviation": "39.8139893801", "rating": "1389.29719762", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0677765463484"}, "Cobol": {"deviation": "37.6988735048", "rating": "1278.26023646", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0600455766703"}, "APL": {"deviation": "31.6424467741", "rating": "1657.69790989", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0613306927668"}, "ActionScript": {"deviation": "73.6026866154", "rating": "1374.87710152", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0599959132331"}, "Go": {"deviation": "31.2624788954", "rating": "1424.70210669", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.060256922722"}, "Visual Basic": {"deviation": "37.7615829613", "rating": "1443.16220536", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0667594605209"}, "PHP": {"deviation": "40.1084186065", "rating": "1634.63601771", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0720263913595"}, "Mozart-Oz": {"deviation": "31.8266712446", "rating": "1397.78349428", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0605915167849"}, "Smalltalk": {"deviation": "33.5602243681", "rating": "1452.08763042", "ratingsMin": "1115.18891531", "ratingsMax": "1754.14894879", "volatility": "0.0626385884111"}}, "This language encourages writing code that is easy to maintain.": {"Coq": {"deviation": "37.9446488104", "rating": "1581.81627099", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0607763646451"}, "Eiffel": {"deviation": "40.9568989408", "rating": "1832.03178077", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0602407467177"}, "Java": {"deviation": "38.4770643802", "rating": "1683.33432935", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0694257540367"}, "Scala": {"deviation": "38.2998038405", "rating": "1762.18784306", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0602336156068"}, "Delphi": {"deviation": "34.3208626445", "rating": "1496.4480751", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0633734499688"}, "Ada": {"deviation": "36.4134572191", "rating": "1728.97581417", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0603566655057"}, "Perl": {"deviation": "34.1693543704", "rating": "1341.42391946", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.060000853016"}, "Lua": {"deviation": "34.9273140328", "rating": "1504.61933683", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0646924889939"}, "Shell": {"deviation": "35.7616010546", "rating": "1177.54011258", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0599210234611"}, "Matlab": {"deviation": "33.5787898548", "rating": "1515.82488444", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0613804348486"}, "Factor": {"deviation": "39.9895717137", "rating": "1522.74038884", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0607277583648"}, "Haxe": {"deviation": "43.5177151834", "rating": "1663.58694853", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0599651239467"}, "Erlang": {"deviation": "33.3512786229", "rating": "1667.19110034", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0612609786578"}, "Forth": {"deviation": "33.1842061078", "rating": "1314.0914654", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0614346567939"}, "Scheme": {"deviation": "32.9566937065", "rating": "1512.79587484", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0652073426269"}, "Objective C": {"deviation": "33.6705300968", "rating": "1491.30378243", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0641530781671"}, "C#": {"deviation": "39.2570277324", "rating": "1725.82894117", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0614177288409"}, "Javascript": {"deviation": "33.8070064431", "rating": "1427.11647104", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0623560505276"}, "Common Lisp": {"deviation": "32.7318543492", "rating": "1482.64248195", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0682618519657"}, "TCL": {"deviation": "31.693429718", "rating": "1389.77087532", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0611343367013"}, "F#": {"deviation": "35.9730637864", "rating": "1711.08484082", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0601336746068"}, "AWK": {"deviation": "32.8259524522", "rating": "1243.85988286", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0602372434518"}, "Ruby": {"deviation": "43.6693131984", "rating": "1560.4599673", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0686186316195"}, "Agda": {"deviation": "114.981289857", "rating": "1691.11362198", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600567375519"}, "Groovy": {"deviation": "37.6490021732", "rating": "1618.98769844", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0611899222832"}, "C": {"deviation": "35.0076433481", "rating": "1452.76231712", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0715639482533"}, "Mathematica": {"deviation": "36.9931506339", "rating": "1433.10609257", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0629456628308"}, "D": {"deviation": "35.7411183887", "rating": "1665.04795603", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600188913439"}, "O'Caml": {"deviation": "35.7575653367", "rating": "1656.04371677", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600894417368"}, "Io": {"deviation": "37.6255350585", "rating": "1456.26861625", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0604990127214"}, "J": {"deviation": "51.2538451695", "rating": "1179.20558905", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0610397557612"}, "ELisp": {"deviation": "35.6612025271", "rating": "1311.24329223", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0608477594341"}, "C++": {"deviation": "35.9006998239", "rating": "1349.39680203", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.071967040933"}, "Standard ML": {"deviation": "35.3860279074", "rating": "1535.28681486", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0603540515913"}, "R": {"deviation": "36.1478396539", "rating": "1309.061464", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600078688799"}, "Clojure": {"deviation": "36.2955596965", "rating": "1604.25075865", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0603613965032"}, "Prolog": {"deviation": "33.231636845", "rating": "1412.02320556", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0708311792502"}, "REBOL": {"deviation": "69.7692734786", "rating": "1318.27101232", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0601682756115"}, "Fortran": {"deviation": "33.2059561481", "rating": "1297.92845351", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0599716627606"}, "Assembler": {"deviation": "46.1602542437", "rating": "928.016105253", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0599734213909"}, "Python": {"deviation": "35.8476641784", "rating": "1712.23986322", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0609152648986"}, "Pascal": {"deviation": "34.2871243037", "rating": "1449.46047653", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0700432806104"}, "Haskell": {"deviation": "41.2456655971", "rating": "1880.54454997", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.060127464115"}, "Cobol": {"deviation": "33.8371269409", "rating": "1352.91038277", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0605944909175"}, "APL": {"deviation": "37.5117108297", "rating": "1296.77132233", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600088788984"}, "ActionScript": {"deviation": "80.5792498808", "rating": "1705.29966941", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600216741708"}, "Go": {"deviation": "35.963647098", "rating": "1550.57628011", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0605762842505"}, "Visual Basic": {"deviation": "32.981299042", "rating": "1426.72427003", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0608684724532"}, "PHP": {"deviation": "36.8726545246", "rating": "1296.79894675", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0604245366637"}, "Mozart-Oz": {"deviation": "47.7474475055", "rating": "1564.72625935", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0600236323962"}, "Smalltalk": {"deviation": "32.8059245269", "rating": "1599.64797354", "ratingsMin": "928.016105253", "ratingsMax": "1880.54454997", "volatility": "0.0613933275396"}}, "There are many good tools for this language": {"Coq": {"deviation": "39.7441912142", "rating": "1283.63196219", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0602076537592"}, "Eiffel": {"deviation": "31.9237899386", "rating": "1548.43646543", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0606377878947"}, "Java": {"deviation": "46.3318297468", "rating": "2022.94893382", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0594394944024"}, "Scala": {"deviation": "38.6380245082", "rating": "1636.21823354", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0641017446441"}, "Delphi": {"deviation": "35.806462041", "rating": "1538.54529582", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0655599269349"}, "Ada": {"deviation": "39.523625569", "rating": "1427.15579485", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0726521688667"}, "Perl": {"deviation": "41.2789981194", "rating": "1623.11331328", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0827091821587"}, "Lua": {"deviation": "36.6914042973", "rating": "1399.88015856", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0625284321808"}, "Shell": {"deviation": "41.9388659249", "rating": "1318.25386586", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0666703963263"}, "Matlab": {"deviation": "34.6725974952", "rating": "1459.65773673", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0627614369388"}, "Factor": {"deviation": "32.9979808902", "rating": "1397.48610135", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.060453599295"}, "Haxe": {"deviation": "40.6503154306", "rating": "1623.44112635", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0605966688508"}, "Erlang": {"deviation": "39.6172189402", "rating": "1435.20714698", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0690136423756"}, "Forth": {"deviation": "35.2885050927", "rating": "1291.91364154", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0606418135538"}, "Scheme": {"deviation": "41.2023029392", "rating": "1519.63278255", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0775556762682"}, "Objective C": {"deviation": "37.8386039017", "rating": "1663.50690916", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.063562435395"}, "C#": {"deviation": "39.2601446788", "rating": "1821.95648195", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0596113977126"}, "Javascript": {"deviation": "40.395283481", "rating": "1679.8293683", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0669331100762"}, "Common Lisp": {"deviation": "36.863311035", "rating": "1605.55035216", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.071631537508"}, "TCL": {"deviation": "36.5638152285", "rating": "1333.69710318", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0631332314571"}, "F#": {"deviation": "36.617009982", "rating": "1701.90657078", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0602381931569"}, "AWK": {"deviation": "40.2705504686", "rating": "1203.35443887", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0598083521092"}, "Ruby": {"deviation": "38.8704568513", "rating": "1592.03532277", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0621277557335"}, "Agda": {"deviation": "82.7852947283", "rating": "1168.89904949", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0599921936143"}, "Groovy": {"deviation": "39.1177171565", "rating": "1494.33522043", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0624632520031"}, "C": {"deviation": "37.9246321259", "rating": "1811.35158133", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0596652797575"}, "Mathematica": {"deviation": "40.7420269765", "rating": "1479.41576417", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0607494678439"}, "D": {"deviation": "35.1929065895", "rating": "1452.89670017", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0618935014662"}, "O'Caml": {"deviation": "34.7944845317", "rating": "1533.88646459", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0620092320019"}, "Io": {"deviation": "41.0985402643", "rating": "1283.16774151", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0601505796626"}, "J": {"deviation": "37.2858905054", "rating": "1241.15709202", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0601970971273"}, "ELisp": {"deviation": "36.4976995878", "rating": "1571.11310677", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0704385489384"}, "C++": {"deviation": "37.3840236957", "rating": "1775.32121409", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0591625332527"}, "Standard ML": {"deviation": "41.2993062449", "rating": "1290.07007627", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0611875192224"}, "R": {"deviation": "35.1644975331", "rating": "1562.44062699", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0645817851917"}, "Clojure": {"deviation": "35.8905432708", "rating": "1507.82226187", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.069978851118"}, "Prolog": {"deviation": "36.7276098129", "rating": "1398.84003876", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0604362819418"}, "REBOL": {"deviation": "103.780674155", "rating": "1036.50339776", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0600466784571"}, "Fortran": {"deviation": "35.8852714926", "rating": "1364.5295987", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0637608578295"}, "Assembler": {"deviation": "40.0460169652", "rating": "1181.79021023", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0671441110296"}, "Python": {"deviation": "37.8103617727", "rating": "1786.03688696", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0600259757063"}, "Pascal": {"deviation": "36.8529764079", "rating": "1397.5011574", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0609875363213"}, "Haskell": {"deviation": "38.3194385012", "rating": "1510.55062242", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0756476254773"}, "Cobol": {"deviation": "38.3178355518", "rating": "1411.63865818", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0608863940297"}, "APL": {"deviation": "40.6138984965", "rating": "1220.30380741", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.060454504864"}, "ActionScript": {"deviation": "107.387483324", "rating": "1389.78981585", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0600195325564"}, "Go": {"deviation": "38.2167807163", "rating": "1330.98396839", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0617274040805"}, "Visual Basic": {"deviation": "42.631196598", "rating": "1483.87576412", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0854375321319"}, "PHP": {"deviation": "43.6972288244", "rating": "1595.05102176", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0825296409822"}, "Mozart-Oz": {"deviation": "33.3442312419", "rating": "1383.31808328", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0600289163588"}, "Smalltalk": {"deviation": "36.6636466408", "rating": "1684.68093748", "ratingsMin": "1036.50339776", "ratingsMax": "2022.94893382", "volatility": "0.0625682949753"}}}
},{}],27:[function(_dereq_,module,exports){

},{}],28:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],29:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],30:[function(_dereq_,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],31:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = _dereq_('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = _dereq_('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,_dereq_("IMmnkj"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":30,"IMmnkj":29,"inherits":28}]},{},[15])
//# sourceMappingURL=data:application/json;base64,
(15)
});
