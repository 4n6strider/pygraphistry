{"name":"Pygraphistry","tagline":"PyGraphistry is library to extract, transform, and visually explore big graphs","body":"# PyGraphistry: Explore Relationships\r\n\r\nPyGraphistry is a visual graph analytics library to extract, transform, and load big graphs into [Graphistry's](http://www.graphistry.com) cloud-based graph explorer. \r\n\r\nIt supports unusually large graphs for interactive visualization. The client's custom WebGL rendering engine renders up to 8MM nodes and edges at a time, and most older client GPUs smoothly support somewhere between 100K and 1MM elements. The serverside OpenCL analytics engine supports even bigger graphs.\r\n\r\n1. [Interactive Demo](#demo-of-friendship-communities-on-facebook)\r\n2. [Graph Gallery](#gallery)\r\n3. [Installation](#installation)\r\n4. [Tutorial](#graphing-les-misérables)\r\n5. [API Reference](#api-reference)\r\n\r\n### Demo of Friendship Communities on Facebook\r\n\r\n<table style=\"width:100%;\">\r\n  <tr valign=\"top\">\r\n    <td align=\"center\">Click to open interactive version! <em>(For server-backed interactive analytics, use an API key)</em><a href=\"http://proxy-labs.graphistry.com/graph/graph.html?dataset=PyGraphistry/NY0D72L2UW&usertag=github&info=true&static=true&contentKey=Facebook_Github_Demo&play=0&center=false&menu=false&goLive=false&left=-2.02e+4&right=1.51e+4&top=-1.07e+4&bottom=9.15e+3&legend={%22nodes%22:%20%22People%20(Names%20are%20fake).%3Cbr/%3E%20Color%20indicates%20community%20and%20size%20shows%20popularity.%22,%20%22edges%22:%20%22Friendships%22,%20%22subtitle%22:%20%22%3Cp%3ECreate%20your%20own%20visualizations%20with%20%3Ca%20href=\\%22https://github.com/graphistry/pygraphistry/\\%22%3EPyGraphistry%3C/a%3E.%3C/p%3E%22,%20%22title%22:%20%22%3Ch3%3EFacebook%20Friendships%20(Read-only%20Mode)%3C/h3%3E%22}\"><img src=\"http://i.imgur.com/Ows4rK4.png\" title=\"Click to open.\"></a>\r\n    <em>Source data: <a href=\"http://snap.stanford.edu\">SNAP</a></em>\r\n\t</td>\r\n  </tr>\r\n</table>\r\n\r\n<!-- IFRAME VERSION\r\n### The Demo:\r\n\r\n<table style=\"width:100%;\">\r\n  <tr valign=\"top\">\r\n    <td align=\"center\"><b>Friendship Communities on Facebook.</b> (Read-only interactive version.)<br><iframe width=\"100%\" height=\"500\" src=\"http://proxy-labs.graphistry.com/graph/graph.html?dataset=PyGraphistry/NY0D72L2UW&usertag=github&info=true&static=true&contentKey=Facebook_Github_Demo&play=0&center=false&menu=false&goLive=false&left=-2.02e+4&right=1.51e+4&top=-1.07e+4&bottom=9.15e+3&legend={%22nodes%22:%20%22People%20(Names%20are%20fake).%3Cbr/%3E%20Color%20indicates%20community%20and%20size%20shows%20popularity.%22,%20%22edges%22:%20%22Friendships%22,%20%22subtitle%22:%20%22%3Cp%3ECreate%20your%20own%20visualizations%20with%20%3Ca%20href=\\%22https://github.com/graphistry/pygraphistry/\\%22%3EPyGraphistry%3C/a%3E.%3C/p%3E%22,%20%22title%22:%20%22%3Ch3%3EFacebook%20Friendships%20(Read-only%20Mode)%3C/h3%3E%22}\"></iframe><br></a>\r\n    <em>Source data: <a href=\"http://snap.stanford.edu\">SNAP</a></em>\r\n\t</td>\r\n  </tr>\r\n</table>\r\n-->\r\n\t\r\n### PyGraphistry is...\r\n\r\n- **Fast & Gorgeous:** Cluster, filter, and inspect large amounts of data at interactive speed. We layout graphs with a descendant of the gorgeous ForceAtlas2 layout algorithm introduced in Gephi. Our data explorer connects to Graphistry's GPU cluster to layout and render hundreds of thousand of nodes+edges in your browser at unparalleled speeds.\r\n\r\n-  **Notebook Friendly:** PyGraphistry plays well with interactive notebooks like [IPython/Juypter](http://ipython.org), [Zeppelin](https://zeppelin.incubator.apache.org/), and [Databricks](http://databricks.com): Process, visualize, and drill into with graphs directly within your notebooks.\r\n\r\n- **Batteries Included:** PyGraphistry works out-of-the-box with popular data science and graph analytics libraries. It is also very easy to use. To create the visualization shown above, download  [this dataset](https://raw.githubusercontent.com/graphistry/pygraphistry/master/demos/data/facebook_combined.txt) of Facebook communities from [SNAP](http://snap.stanford.edu) and load it with your favorite library:\r\n\r\n  - [Pandas](http://pandas.pydata.org)\r\n\r\n     ```python\r\n     edges = pandas.read_csv('facebook_combined.txt', sep=' ', names=['src', 'dst'])\r\n     graphistry.bind(source='src', destination='dst').plot(edges)\r\n     ```\r\n\r\n  - [IGraph](http://igraph.org)\r\n\r\n     ```python\r\n     graph = igraph.read('facebook_combined.txt', format='edgelist', directed=False)\r\n     graphistry.bind(source='src', destination='dst').plot(graph)\r\n     ```\r\n\r\n  - [NetworkX](https://networkx.github.io)\r\n\r\n     ```python\r\n     graph = networkx.read_edgelist('facebook_combined.txt')\r\n     graphistry.bind(source='src', destination='dst', node='nodeid').plot(graph)\r\n     ```\r\n\r\n### Gallery\r\n\r\n<table>\r\n    <tr valign=\"top\">\r\n        <td width=\"33%\" align=\"center\"><a href=\"http://proxy-labs.graphistry.com/graph/graph.html?dataset=Twitter&info=true&play=0&static=true&contentKey=Twitter_Github_Demo&center=false&menu=false&goLive=false&left=-1.92e+3&right=1.68e+3&top=-1.03e+3&bottom=985&usertag=github&legend={%22title%22:%22%3Ch3%3ECriminal%20Twitter%20Botnet%3C/h3%3E%22,%22subtitle%22:%22%3Cp%3EThe%20botnet%20(right%20layer),%20%20launders%20Twitter%20retweets%20through%20an%20indirection%20layer%20(middle)%20%20in%20order%20to%20build%20social%20rank%20for%20fraudsters%20(left).%20%20Twitter%27s%20core%20targeting%20algorithm%20then%20routes%20the%20artificially%20trending%20tweets%20%20to%20potential%20victims%20in%20the%20precise%20demographic%20of%20FIFA/Madden%20gamers.%3C/p%3E%20%3Cp%3EMany%20victims%20have%20been%20tricked%20into%20revealing%20their%20credit%20cards%20and%20passports.%3C/p%3E%22,%22nodes%22:%22Twitter%20accounts%22,%22edges%22:%22Follow%20relationship%22}\">Twitter Botnet<br><img width=\"266\" src=\"http://i.imgur.com/qm5MCqS.jpg\"></a></td>\r\n        <td width=\"33%\" align=\"center\"><a href=\"http://i.imgur.com/074zFve.png\">Edit Wars on Wikipedia<br><img width=\"266\" src=\"http://i.imgur.com/074zFve.png\"></a><em>Source: <a href=\"http://snap.stanford.edu\">SNAP</a></em></td>\r\n        <td width=\"33%\" align=\"center\"><a href=\"http://proxy-labs.graphistry.com/graph/graph.html?dataset=UberAll&scene=gis&controls=gis&static=true&usertag=github&contentKey=UberAll_Github_Demo&play=0&center=false&menu=false&goLive=false&left=0.244&right=0.435&top=-0.634&bottom=-0.511\">Uber Trips in SF<br><img width=\"266\" src=\"http://i.imgur.com/GdT4yV6.jpg\"></a></td>\r\n    </tr>\r\n    <tr valign=\"top\">\r\n        <td width=\"33%\" align=\"center\"><a href=\"http://i.imgur.com/vKUDySw.png\">Port Scan Attack<br><img width=\"266\" src=\"http://i.imgur.com/vKUDySw.png\"></a></td>\r\n        <td width=\"33%\" align=\"center\"><a href=\"http://proxy-labs.graphistry.com/graph/graph.html?dataset=PyGraphistry/K8W1O0OI1C&usertag=github&info=true&static=true&contentKey=Biogrid_Github_Demo&play=0&center=false&menu=false&goLive=false&left=-2.58e+4&right=4.35e+4&top=-1.72e+4&bottom=2.16e+4&legend={%22title%22:%22%3Ch3%3EBioGRID%20Repository%20of%20Protein%20Interactions%3C/h3%3E%22,%22subtitle%22:%22%3Cp%3EEach%20color%20represents%20an%20organism.%20Humans%20are%20in%20light%20blue.%3C/p%3E%22,%22nodes%22:%22Proteins/Genes%22,%22edges%22:%22Interactions%20reported%20in%20scientific%20publications%22}\">Protein Interactions <br><img width=\"266\" src=\"http://i.imgur.com/nrUHLFz.png\"></a><em>Source: <a href=\"http://thebiogrid.org\">BioGRID</a></em></td>\r\n        <td width=\"33%\" align=\"center\"><a href=\"http://proxy-labs.graphistry.com/graph/graph.html?&dataset=PyGraphistry/61910N6WL6&info=true&static=true&contentKey=SocioPlt_Github_Demo&play=0&center=false&menu=false&goLive=false&left=-236&right=265&top=-145&bottom=134&usertag=github&legend=%7B%22nodes%22%3A%20%22%3Cspan%20style%3D%5C%22color%3A%23a6cee3%3B%5C%22%3ELanguages%3C/span%3E%20/%20%3Cspan%20style%3D%5C%22color%3Argb%28106%2C%2061%2C%20154%29%3B%5C%22%3EStatements%3C/span%3E%22%2C%20%22edges%22%3A%20%22Strong%20Correlations%22%2C%20%22subtitle%22%3A%20%22%3Cp%3EFor%20more%20information%2C%20check%20out%20the%20%3Ca%20target%3D%5C%22_blank%5C%22%20href%3D%5C%22https%3A//lmeyerov.github.io/projects/socioplt/viz/index.html%5C%22%3ESocio-PLT%3C/a%3E%20project.%20Make%20your%20own%20visualizations%20with%20%3Ca%20target%3D%5C%22_blank%5C%22%20href%3D%5C%22https%3A//github.com/graphistry/pygraphistry%5C%22%3EPyGraphistry%3C/a%3E.%3C/p%3E%22%2C%20%22title%22%3A%20%22%3Ch3%3ECorrelation%20Between%20Statements%20about%20Programming%20Languages%3C/h3%3E%22%7D\">Programming Languages<br><img width=\"266\" src=\"http://i.imgur.com/0T0EKmD.png\"></a><em>Source: <a href=\"http://lmeyerov.github.io/projects/socioplt/viz/index.html\">Socio-PLT project</a></em></td>\r\n    </tr>\r\n</table>\r\n\r\n## Installation\r\n\r\n### Dependencies\r\n[Python](https://www.python.org) 2.7 or 3.4 (experimental). \r\n\r\nThe simplest way to install PyGraphistry is with Python's pip package manager:\r\n\r\n- Pandas only: `pip install graphistry`\r\n- Pandas, IGraph, and NetworkX: `pip install \"graphistry[all]\"`\r\n\r\n##### IPython (Jupyter) Notebook Integration\r\n\r\nWe recommend [IPython](http://ipython.org) notebooks to interleave code and visualizations.\r\n\r\n- Install IPython:`pip install \"ipython[notebook]\"`\r\n- Launch notebook server: `ipython notebook`\r\n\r\n##### API Key\r\nAn API key gives each visualization access to our GPU cluster. We currently ask for API keys to make sure our servers are not melting :) To get your own, email [pygraphistry@graphistry.com](mailto:pygraphistry@graphistry.com). Set your key after the `import graphistry` statement and you are good to go:\r\n\r\n```python\r\nimport graphistry\r\ngraphistry.register(key='Your key')\r\n```\r\n\r\n## Tutorial: Les Misérables\r\n\r\nLet's visualize relationships between the characters in [Les Misérables](http://en.wikipedia.org/wiki/Les_Misérables).\r\nFor this example, we'll choose [Pandas](http://pandas.pydata.org) to wrangle data and [IGraph](http://igraph.org) to run a community detection algorithm. You can [view](http://graphistry.github.io/pygraphistry/html/Quickstart%20(Les%20Miserables).html) and [download](https://raw.githubusercontent.com/graphistry/pygraphistry/master/demos/MiserablesDemo.ipynb) the IPython notebook containing this example.\r\n\r\nOur [dataset is a CSV file](https://raw.githubusercontent.com/graphistry/pygraphistry/master/demos/data/lesmiserables.csv) that looks like this:\r\n\r\n| source        | target        | value  |\r\n| ------------- |:-------------:| ------:|\r\n| Cravatte |\tMyriel | 1\r\n| Valjean\t| Mme.Magloire | 3\r\n| Valjean\t| Mlle.Baptistine | 3\r\n\r\n*Source* and *target* are character names, and the *value* column counts the number of time they meet. Parsing is a one-liner with Pandas:\r\n\r\n```python\r\nimport pandas\r\nlinks = pandas.read_csv('./lesmiserables.csv')\r\n```\r\n\r\n### Quick Visualization\r\nPyGraphistry can plot graphs directly from Pandas dataframes, IGraph graphs, or NetworkX graphs. Calling *plot* uploads the data to our visualization servers and return an URL to an embeddable webpage containing the visualization.\r\n\r\nTo define the graph, we <code>bind</code> *source* and *destination* to the columns indicating the start and end nodes of each edges:\r\n\r\n```python\r\nimport graphistry\r\ngraphistry.register(key='YOUR_API_KEY_HERE')\r\n\r\nplotter = graphistry.bind(source=\"source\", destination=\"target\")\r\nplotter.plot(links)\r\n```\r\n\r\nYou should see a beautiful graph like this one:\r\n![Graph of Miserables](http://i.imgur.com/dRHHTyK.png)\r\n\r\n### Adding Labels\r\n\r\nLet's add labels to edges in order to show how many times each pair of characters met. We create a new column called *label* in edge table *links* that contains the text of the label and we bind *edge_label* to it.\r\n\r\n```python\r\nlinks[\"label\"] = links.value.map(lambda v: \"#Meetings: %d\" % v)\r\nplotter = plotter.bind(edge_label=\"label\")\r\nplotter.plot(links)\r\n```\r\n\r\n### Controlling Node Size and Color\r\nLet's size nodes based on their [PageRank](http://en.wikipedia.org/wiki/PageRank) score and color them using their [community](https://en.wikipedia.org/wiki/Community_structure). [IGraph](http://igraph.org/python/) already has these algorithms implemented for us. If IGraph is not already installed, fetch it with `pip install igraph-python`. Warning: `pip install igraph` will install the wrong package!\r\n\r\nWe start by converting our edge dateframe into an IGraph. The plotter can do the conversion for us using the *source* and *destination* bindings. Then we create two new node attributes (*pagerank* & *community*).\r\n\r\n```python\r\nig = plotter.pandas2igraph(links)\r\nig.vs['pagerank'] = ig.pagerank()\r\nig.vs['community'] = ig.community_infomap().membership\r\n\r\nplotter.bind(point_color='community', point_size='pagerank').plot(ig)\r\n```\r\n\r\n![Second Graph of Miserables](http://i.imgur.com/P7fm5sn.png)\r\n\r\n## Next Steps\r\n\r\n1. Email [pygraphistry@graphistry.com](mailto:pygraphistry@graphistry.com) for an API key!\r\n2. Read our advanced tutorials:\r\n\t-  [Creating a node table + controlling sizes and colors (HoneyPot)](http://graphistry.github.io/pygraphistry/html/Tutorial%20Part%201%20(Honey%20Pot).html)\r\n\t-  [Aggregating edges and creating multiple views of the same data (Apache Logs)](http://graphistry.github.io/pygraphistry/html/Tutorial%20Part%202%20(Apache%20Logs).html)\r\n3. Check out our [demos folder](https://github.com/graphistry/pygraphistry/tree/master/demos).\r\n\r\n## API Reference\r\n\r\nFull Python (including IPython/Juypter) [API documentation](http://pygraphistry.readthedocs.org/en/latest/).\r\n\r\n","google":"UA-59712214-1","note":"Don't delete this file! It's used internally to help with page regeneration."}