module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "type" },
          peg$FAILED,
          [],
          null,
          { type: "other", description: "cast" },
          function(value, type_name) {
              return {
                type: 'CastExpression',
                value: value,
                type_name: type_name
              };
            },
          function(operator, argument) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'prefix'
                };
              },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          { type: "other", description: "limit" },
          function(limit) { return { type: 'Limit', value: limit } },
          { type: "other", description: "WHERE clause" },
          { type: "other", description: "now" },
          { type: "other", description: "literal" },
          function(commas) { return filledArray(commas.length + 1, null); },
          function(elision, element) {
                  return optionalList(extractOptional(elision, 0)).concat(element);
                },
          function(first, rest) { return Array.prototype.concat.apply(first, rest); },
          function(elision) {
                return {
                  type: 'ListExpression',
                  elements: optionalList(extractOptional(elision, 0))
                }
              },
          function(elements) {
                return {
                  type: 'ListExpression',
                  elements: elements
                }
              },
          function(elements, elision) {
                return {
                  type: 'ListExpression',
                  elements: elements.concat(optionalList(extractOptional(elision, 0)))
                }
              },
          { type: "other", description: "function call" },
          function(callee) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: []
              };
            },
          function(callee, elements) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: elements
              };
            },
          function(expression) { return expression; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          function() {
              return { type: "Literal", dataType: 'integer', value: 0 };
            },
          function() {
              return { type: "Literal", dataType: 'integer', value: parseInt(text()) };
            },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function() {
                return { type: "Literal", dataType: 'float', value: parseFloat(text()) };
              },
          function() {
                return { type: "Literal", dataType: 'integer', value: parseFloat(text()) };
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "0x",
          { type: "literal", value: "0x", description: "\"0x\"" },
          function(digits) {
                return { type: "Literal", dataType: 'integer', value: parseInt(digits, 16) };
               },
          { type: "any", description: "any character" },
          /^[A-Za-z_]/,
          { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          { type: "other", description: "identifier" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          void 0,
          function(name) { return name; },
          { type: "other", description: "number" },
          function(literal) {
                return literal;
              },
          { type: "other", description: "numeric constant" },
          { type: "other", description: "string" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          function(chars) {
                return { type: "Literal", dataType: 'string', value: chars.join("") };
              },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          function() { return text(); },
          function(sequence) { return sequence; },
          function() { return ""; },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          { type: "other", description: "comment" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "",
          { type: "other", description: "null" },
          function() { return { type: "Literal", dataType: 'null', value: null }; },
          { type: "other", description: "boolean" },
          function() { return { type: "Literal", dataType: 'boolean', value: true  }; },
          function() { return { type: "Literal", dataType: 'boolean', value: false }; },
          { type: "other", description: "reserved word" },
          { type: "other", description: "shift operator" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          { type: "other", description: "comparison" },
          { type: "other", description: "equality operator" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\xA0",
          { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
          "\uFEFF",
          { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          { type: "other", description: "end of line" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\u2028",
          { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
          "\u2029",
          { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
          { type: "other", description: "postfix keyword" },
          function(argument, operator) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'postfix'
                };
              },
          function(left, operator, right) {
                return {
                  type: 'LogicalExpression',
                  operator: operator,
                  left: left,
                  right: right
                };
              },
          function(left, operator, right) { return {
                   type: 'LogicalExpression',
                   operator: operator,
                   left: left,
                   right: right
                };
              },
          function(left, operator) { return buildBinaryExpression(first, rest); },
          function(value, low, high) {
                // TODO: use negated
                return {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                };
              },
          { type: "other", description: "text comparison" },
          function(value, operator, like, escapeChar) { return {
                  type: 'LikePredicate',
                  operator: operator,
                  left: value,
                  right: like,
                  escapeChar: escapeChar
                };
              },
          function(value, operator, like) { return {
                  type: 'LikePredicate',
                  operator: operator,
                  left: value,
                  right: like
                };
              },
          { type: "other", description: "regex expression" },
          function(value, operator, matcher) {
                return {
                  type: 'RegexPredicate',
                  operator: operator,
                  left: value,
                  right: matcher
                };
              },
          { type: "other", description: "not" },
          function(operator, argument) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: argument
                };
              },
          function(property) { return { name: property }; },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type:     'MemberAccess',
                    object:   result,
                    name:     element.name
                  };
                });
              },
          { type: "other", description: "prefix operator" },
          function(operator, argument) {
              return {
                type: 'UnaryExpression',
                operator: operator,
                argument: argument,
                fixity: 'prefix'
              };
            },
          { type: "other", description: "multiplicative operator" },
          /^[A-Za-z0-9_:]/,
          { type: "class", value: "[A-Za-z0-9_:]", description: "[A-Za-z0-9_:]" },
          function(str) { return str.join(''); },
          function(c) { return { column: c[2], graph_namespace: c[1] }; },
          function(c) { return { column: c }; },
          function(gcn) { return gcn[1]; },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "false",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "ilike",
          { type: "literal", value: "ILIKE", description: "\"ILIKE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "infinity",
          { type: "literal", value: "INFINITY", description: "\"INFINITY\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "nan",
          { type: "literal", value: "NaN", description: "\"NaN\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "similar",
          { type: "literal", value: "SIMILAR", description: "\"SIMILAR\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "true",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("7("),
          peg$decode("8! \"7=+&$,#&7=\"\"\" !+\x8B$!7[+7$74+-%7\\+#%'#%$## !$\"# !\"# !*V \"!7[+K$74+A%7Q+7%74+-%7\\+#%'%%$%# !$$# !$## !$\"# !\"# !*# \" #+#%'\"%$\"# !\"# !9*\" 3 "),
          peg$decode("8!7\xA9+\x8D$7+\x83%7[+y%7+o%7(+e%7+[%7\x9F+Q%7+G%7!+=%7+3%7\\+)%4+6%+\"&\"%$+# !$*# !$)# !$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !9*\" 3$"),
          peg$decode("!7\xE5+=$7+3%7#+)%4#6&#\"\" %$## !$\"# !\"# !*# \"7z"),
          peg$decode("!7#+\x8D$ \"!7+A$7\x9E+7%7+-%7#+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7\x9E+7%7+-%7#+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("!7$+\x8D$ \"!7+A$7\xEB+7%7+-%7$+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7\xEB+7%7+-%7$+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("8!7\xE0+<$7+2%7>+(%4#6)#! %$## !$\"# !\"# !9*\" 3("),
          peg$decode("87%9*\" 3*"),
          peg$decode("7&*# \"7'"),
          peg$decode("87\x94*) \"7\x95*# \"7\x969*\" 3+"),
          peg$decode("87>*A \"7?*; \"7@*5 \"7@*/ \"7q*) \"7r*# \"7)9*\" 3,"),
          peg$decode("!7Q+d$ \"!7+-$7Q+#%'\"%$\"# !\"# !,8&!7+-$7Q+#%'\"%$\"# !\"# !\"+(%4\"6-\"! %$\"# !\"# !"),
          peg$decode("!!!7++-$7+#%'\"%$\"# !\"# !*# \" #+3$7\x8B+)%4\"6.\"\"! %$\"# !\"# !+\xE3$ \"!7+l$7Q+b%7+X%!7++-$7+#%'\"%$\"# !\"# !*# \" #+3%7\x8B+)%4%6.%\"! %$%# !$$# !$## !$\"# !\"# !,w&!7+l$7Q+b%7+X%!7++-$7+#%'\"%$\"# !\"# !*# \" #+3%7\x8B+)%4%6.%\"! %$%# !$$# !$## !$\"# !\"# !\"+)%4\"6/\"\"! %$\"# !\"# !"),
          peg$decode("!7[+a$7+W%!7++-$7+#%'\"%$\"# !\"# !*# \" #+2%7\\+(%4$60$!!%$$# !$## !$\"# !\"# !*\xD3 \"!7[+P$7+F%7,+<%7+2%7\\+(%4%61%!\"%$%# !$$# !$## !$\"# !\"# !*\x95 \"!7[+\x8A$7+\x80%7,+v%7+l%7Q+b%7+X%!7++-$7+#%'\"%$\"# !\"# !*# \" #+3%7\\+)%4(62(\"%!%$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("8!7=+P$7+F%7[+<%7+2%7\\+(%4%64%!$%$%# !$$# !$## !$\"# !\"# !*p \"!7=+e$7+[%7[+Q%7+G%7,+=%7+3%7\\+)%4'65'\"&\"%$'# !$&# !$%# !$$# !$## !$\"# !\"# !9*\" 33"),
          peg$decode("7.*m \"7=*g \"7**a \"!7[+P$7+F%7'+<%7+2%7\\+(%4%66%!\"%$%# !$$# !$## !$\"# !\"# !*# \"7-"),
          peg$decode("07\"\"1!38"),
          peg$decode("09\"\"1!3:"),
          peg$decode("!.;\"\"2;3<+& 4!6=! %*D \"!71+9$ \"70,#&70\"+'%4\"6>\" %$\"# !\"# !"),
          peg$decode("/?\"\"1!3@"),
          peg$decode("!0A\"\"1!3B*# \" #+<$ \"70+&$,#&70\"\"\" !+#%'\"%$\"# !\"# !"),
          peg$decode("!73+-$74+#%'\"%$\"# !\"# !"),
          peg$decode("!72+S$7P+I% \"70,#&70\"+7%75*# \" #+'%4$6C$ %$$# !$## !$\"# !\"# !*\x80 \"!7P+P$ \"70+&$,#&70\"\"\" !+7%75*# \" #+'%4#6C# %$## !$\"# !\"# !*B \"!72+7$75*# \" #+'%4\"6D\" %$\"# !\"# !"),
          peg$decode("0E\"\"1!3F"),
          peg$decode("!/G\"\"1\"3H+G$! \"77+&$,#&77\"\"\" !+! (%+(%4\"6I\"! %$\"# !\"# !"),
          peg$decode("-\"\"1!3J"),
          peg$decode("0K\"\"1!3L"),
          peg$decode("7:*) \"7R*# \"70"),
          peg$decode("8!7:+;$ \"7;,#&7;\"+)%4\"6N\"\"! %$\"# !\"# !9*\" 3M"),
          peg$decode("!!87s9*$$\"\" O\"# !+2$7<+(%4\"6P\"! %$\"# !\"# !"),
          peg$decode("8!78+F$!87:*# \"709*$$\"\" O\"# !+(%4\"6R\"!!%$\"# !\"# !*Q \"!76+F$!87:*# \"709*$$\"\" O\"# !+(%4\"6R\"!!%$\"# !\"# !9*\" 3Q"),
          peg$decode("87\xD3*# \"7\xE29*\" 3S"),
          peg$decode("8!.U\"\"2U3V+J$ \"7B,#&7B\"+8%.U\"\"2U3V+(%4#6W#!!%$## !$\"# !\"# !*[ \"!.X\"\"2X3Y+J$ \"7C,#&7C\"+8%.X\"\"2X3Y+(%4#6W#!!%$## !$\"# !\"# !9*\" 3T"),
          peg$decode(".Z\"\"2Z3["),
          peg$decode("!!8.U\"\"2U3V*) \"7A*# \"7}9*$$\"\" O\"# !+1$79+'%4\"6\\\" %$\"# !\"# !*I \"!.Z\"\"2Z3[+2$7E+(%4\"6]\"! %$\"# !\"# !*# \"7D"),
          peg$decode("!!8.X\"\"2X3Y*) \"7A*# \"7}9*$$\"\" O\"# !+1$79+'%4\"6\\\" %$\"# !\"# !*C \"!7A+2$7E+(%4\"6]\"! %$\"# !\"# !*# \"7D"),
          peg$decode("!7A+1$7~+'%4\"6^\" %$\"# !\"# !"),
          peg$decode("7F*\\ \"!.;\"\"2;3<+?$!8709*$$\"\" O\"# !+'%4\"6_\" %$\"# !\"# !*) \"7J*# \"7K"),
          peg$decode("7G*# \"7H"),
          peg$decode(".X\"\"2X3Y*\xB9 \".U\"\"2U3V*\xAD \"7A*\xA7 \"!.`\"\"2`3a+& 4!6b! %*\x90 \"!.c\"\"2c3d+& 4!6e! %*y \"!.f\"\"2f3g+& 4!6h! %*b \"!.i\"\"2i3j+& 4!6k! %*K \"!.l\"\"2l3m+& 4!6n! %*4 \"!.o\"\"2o3p+& 4!6q! %"),
          peg$decode("!!87I*# \"7}9*$$\"\" O\"# !+1$79+'%4\"6\\\" %$\"# !\"# !"),
          peg$decode("7G*; \"70*5 \".r\"\"2r3s*) \".t\"\"2t3u"),
          peg$decode("!.r\"\"2r3s+M$!!77+-$77+#%'\"%$\"# !\"# !+! (%+(%4\"6v\"! %$\"# !\"# !"),
          peg$decode("!.t\"\"2t3u+a$!!77+A$77+7%77+-%77+#%'$%$$# !$## !$\"# !\"# !+! (%+(%4\"6v\"! %$\"# !\"# !"),
          peg$decode("87N*# \"7M9*\" 3w"),
          peg$decode("!7k+{$ \"!!87}9*$$\"\" O\"# !+-$79+#%'\"%$\"# !\"# !,F&!!87}9*$$\"\" O\"# !+-$79+#%'\"%$\"# !\"# !\"+#%'\"%$\"# !\"# !"),
          peg$decode("!7l+\x85$ \"!!87m9*$$\"\" O\"# !+-$79+#%'\"%$\"# !\"# !,F&!!87m9*$$\"\" O\"# !+-$79+#%'\"%$\"# !\"# !\"+-%7m+#%'#%$## !$\"# !\"# !"),
          peg$decode("!7l+\x91$ \"!!87m*# \"7}9*$$\"\" O\"# !+-$79+#%'\"%$\"# !\"# !,L&!!87m*# \"7}9*$$\"\" O\"# !+-$79+#%'\"%$\"# !\"# !\"+-%7m+#%'#%$## !$\"# !\"# !"),
          peg$decode(".x\"\"2x3y"),
          peg$decode(".z\"\"2z3{"),
          peg$decode(".|\"\"2|3}"),
          peg$decode(".~\"\"2~3"),
          peg$decode(".\x80\"\"2\x803\x81"),
          peg$decode(".\x82\"\"2\x823\x83"),
          peg$decode(".\x84\"\"2\x843\x85"),
          peg$decode(".\x86\"\"2\x863\x87"),
          peg$decode(".\x88\"\"2\x883\x89"),
          peg$decode(".\x8A\"\"2\x8A3\x8B"),
          peg$decode(".\x8C\"\"2\x8C3\x8D"),
          peg$decode(".\x8E\"\"2\x8E3\x8F"),
          peg$decode(".\x90\"\"2\x903\x91"),
          peg$decode(".\x92\"\"2\x923\x93"),
          peg$decode(".\x94\"\"2\x943\x95"),
          peg$decode(".\x96\"\"2\x963\x97"),
          peg$decode(".\x98\"\"2\x983\x99"),
          peg$decode(".\x9A\"\"2\x9A3\x9B"),
          peg$decode(".\x9C\"\"2\x9C3\x9D"),
          peg$decode(".\x9E\"\"2\x9E3\x9F"),
          peg$decode(".\xA0\"\"2\xA03\xA1"),
          peg$decode(".\xA2\"\"2\xA23\xA3"),
          peg$decode(".\xA4\"\"2\xA43\xA5"),
          peg$decode(".\xA6\"\"2\xA63\xA7"),
          peg$decode(".\x86\"\"2\x863\x87"),
          peg$decode(".\xA8\"\"2\xA83\xA9"),
          peg$decode(" \"0\xAA\"\"1!3\xAB,)&0\xAA\"\"1!3\xAB\""),
          peg$decode(".\xAC\"\"2\xAC3\xAD*# \"7T"),
          peg$decode(".\xAE\"\"2\xAE3\xAF"),
          peg$decode(".\xB0\"\"2\xB03\xB1"),
          peg$decode("! \"-\"\"1!3J,(&-\"\"1!3J\"+A$!8.\xB0\"\"2\xB03\xB19+$$\"# O\"\" !+#%'\"%$\"# !\"# !"),
          peg$decode(" \xB2"),
          peg$decode("7\x9E*\xA1 \"7\x9F*\x9B \"7\xA4*\x95 \"7\xA5*\x8F \"7\xA8*\x89 \"7\xA9*\x83 \"7\xBD*} \"7\xBE*w \"7\xBF*q \"7\xC2*k \"7\xC8*e \"7\xCC*_ \"7\xD0*Y \"7\xDA*S \"7\xDB*M \"7\xDF*G \"7\xE5*A \"7\xE6*; \"7\xEB*5 \"7\u0103*/ \"7\u0104*) \"7\u0110*# \"7\u0111"),
          peg$decode("8!7\xE7+& 4!6\xB4! %9*\" 3\xB3"),
          peg$decode("8!7\u0107+& 4!6\xB6! %*. \"!7\xC5+& 4!6\xB7! %9*\" 3\xB5"),
          peg$decode("87p*) \"7q*# \"7r9*\" 3\xB8"),
          peg$decode("7V*# \"7U"),
          peg$decode("!7\x8F+\x8D$ \"!7+A$7t+7%7+-%7\x8F+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7t+7%7+-%7\x8F+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("8.\xBA\"\"2\xBA3\xBB*) \".\xBC\"\"2\xBC3\xBD9*\" 3\xB9"),
          peg$decode("!7u+\x8D$ \"!7+A$7v+7%7+-%7u+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7v+7%7+-%7u+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("87b*\x81 \"7c*{ \"!!7`+;$!87`9*$$\"\" O\"# !+#%'\"%$\"# !\"# !+! (%*L \"!!7a+;$!87a9*$$\"\" O\"# !+#%'\"%$\"# !\"# !+! (%9*\" 3\xBE"),
          peg$decode("!7w+\x8D$ \"!7+A$7x+7%7+-%7w+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7x+7%7+-%7w+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !*# \"7\x87"),
          peg$decode("!7y+\x8D$ \"!7+A$7{+7%7+-%7y+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7{+7%7+-%7y+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("87f*/ \"7e*) \"7d*# \"7g9*\" 3\xBF"),
          peg$decode("8.\xC1\"\"2\xC13\xC2*Y \".\xC3\"\"2\xC33\xC4*M \".\xC5\"\"2\xC53\xC6*A \".\xC7\"\"2\xC73\xC8*5 \".\xC9\"\"2\xC93\xCA*) \".\xCB\"\"2\xCB3\xCC9*\" 3\xC0"),
          peg$decode("80\xCE\"\"1!3\xCF9*\" 3\xCD"),
          peg$decode("8.\xA8\"\"2\xA83\xA9*M \".\xD1\"\"2\xD13\xD2*A \".\xD3\"\"2\xD33\xD4*5 \".\xD5\"\"2\xD53\xD6*) \".\xD7\"\"2\xD73\xD89*\" 3\xD0"),
          peg$decode(" \"7|*) \"7~*# \"7L,/&7|*) \"7~*# \"7L\""),
          peg$decode(" \"7|*# \"7O,)&7|*# \"7O\""),
          peg$decode("87\xDB*# \"7\xE69*\" 3\xD9"),
          peg$decode("!7\x8B+=$7+3%7\x81+)%4#6\xDA#\"\" %$## !$\"# !\"# !"),
          peg$decode("!7\x8B+R$7+H%7\xDA+>%7+4%7\x8E+*%4%6\xDB%#$\" %$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!7\x8B+R$7+H%7\xD0+>%7+4%7(+*%4%6\xDC%#$\" %$%# !$$# !$## !$\"# !\"# !*\xCD \"!7\x8B+\xC2$7+\xB8%7\xD0+\xAE%7+\xA4%7[+\x9A% \"!7\x8B+7$7Q+-%7+#%'#%$## !$\"# !\"# !+E$,B&!7\x8B+7$7Q+-%7+#%'#%$## !$\"# !\"# !\"\"\" !*# \" #+=%7+3%7\\+)%4(6\xDD(\"'%%$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!7\x8B+z$7+p%7\xA5+f%7+\\%7\x8B+R%7+H%7\x9E+>%7+4%7\x8B+*%4)6\xDE)#($ %$)# !$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("87\xDF*# \"7\xCE9*\" 3\xDF"),
          peg$decode("8!7\x8B+q$7+g%7\x86+]%7+S%7\x8B+I%7+?%7\xBF+5%7@++%4(6\xE0($'%# %$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !*] \"!7\x8B+R$7+H%7\x86+>%7+4%7\x8B+*%4%6\xE1%#$\" %$%# !$$# !$## !$\"# !\"# !9*\" 3\xDF"),
          peg$decode("7\xF4*B \"!7\xFF+7$7+-%7\u0104+#%'#%$## !$\"# !\"# !"),
          peg$decode("8!7\x8B+R$7+H%7\x88+>%7+4%7\x8B+*%4%6\xE3%#$\" %$%# !$$# !$## !$\"# !\"# !9*\" 3\xE2"),
          peg$decode("8!7\xE5+=$7+3%7\x8C+)%4#6\xE5#\"\" %$## !$\"# !\"# !9*\" 3\xE4"),
          peg$decode("!7/+\xBF$ \"!7+Z$7]+P%7+F%7(+<%7+2%7^+(%4&6\xE6&!\"%$&# !$%# !$$# !$## !$\"# !\"# !,e&!7+Z$7]+P%7+F%7(+<%7+2%7^+(%4&6\xE6&!\"%$&# !$%# !$$# !$## !$\"# !\"# !\"+)%4\"6\xE7\"\"! %$\"# !\"# !"),
          peg$decode("7\x8A*G \"7\x87*A \"7\x89*; \"7\x85*5 \"7\x84*/ \"7\x82*) \"7\x83*# \"7\x8B"),
          peg$decode("87U*) \"7V*# \"7Z9*\" 3\xE8"),
          peg$decode("!7\x8D+=$7+3%7\x8C+)%4#6\xE9#\"\" %$## !$\"# !\"# !*# \"7\x8C"),
          peg$decode("!7\x8E+\x8D$ \"!7+A$7\x90+7%7+-%7\x8E+#%'$%$$# !$## !$\"# !\"# !,L&!7+A$7\x90+7%7+-%7\x8E+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("87W*) \"7X*# \"7Y9*\" 3\xEA"),
          peg$decode("! \"0\xEB\"\"1!3\xEC+,$,)&0\xEB\"\"1!3\xEC\"\"\" !+' 4!6\xED!! %"),
          peg$decode("!!!7=+7$7R+-%7\x91+#%'#%$## !$\"# !\"# !+' 4!6\xEE!! %*/ \"!7\x91+' 4!6\xEF!! %+' 4!6\xF0!! %"),
          peg$decode("!.\xF1\"\"2\xF13\xF2+-$7=+#%'\"%$\"# !\"# !"),
          peg$decode(".\xF3\"\"2\xF33\xF4"),
          peg$decode(".\xF3\"\"2\xF33\xF4"),
          peg$decode(".\xF3\"\"2\xF33\xF4"),
          peg$decode("/\xF5\"\"1%3\xF6"),
          peg$decode("/\xF7\"\"1&3\xF8"),
          peg$decode("/\xF9\"\"1#3\xFA"),
          peg$decode("/\xFB\"\"1%3\xFC"),
          peg$decode("/\xFD\"\"1#3\xFE"),
          peg$decode("/\xFF\"\"1%3\u0100"),
          peg$decode("/\u0101\"\"1'3\u0102"),
          peg$decode("/\u0103\"\"1#3\u0104"),
          peg$decode("/\u0105\"\"1\"3\u0106"),
          peg$decode("/\u0107\"\"1#3\u0108"),
          peg$decode("/\u0109\"\"1&3\u010A"),
          peg$decode("/\u010B\"\"1-3\u010C"),
          peg$decode("/\u010D\"\"1&3\u010E"),
          peg$decode("/\u010F\"\"1%3\u0110"),
          peg$decode("/\u0111\"\"1'3\u0112"),
          peg$decode("/\u0113\"\"1\"3\u0114"),
          peg$decode("/\u0115\"\"1'3\u0116"),
          peg$decode("/\u0117\"\"1$3\u0118"),
          peg$decode("/\u0119\"\"1$3\u011A"),
          peg$decode("/\u011B\"\"1%3\u011C"),
          peg$decode("/\u011D\"\"1'3\u011E"),
          peg$decode("/\u011F\"\"1&3\u0120"),
          peg$decode("/\u0121\"\"1&3\u0122"),
          peg$decode("/\u0123\"\"1(3\u0124"),
          peg$decode("/\u0125\"\"1*3\u0126"),
          peg$decode("!7+3$/\u0127\"\"1&3\u0128+#%'\"%$\"# !\"# !"),
          peg$decode("/\u0129\"\"1%3\u012A"),
          peg$decode("/\u012B\"\"1(3\u012C"),
          peg$decode("/\u012D\"\"1'3\u012E"),
          peg$decode("/\u012F\"\"1*3\u0130"),
          peg$decode("/\u0131\"\"1(3\u0132"),
          peg$decode("!7+3$/\u0133\"\"1&3\u0134+#%'\"%$\"# !\"# !"),
          peg$decode("/\u0135\"\"1$3\u0136"),
          peg$decode("/\u0137\"\"1&3\u0138"),
          peg$decode("/\u0139\"\"1(3\u013A"),
          peg$decode("/\u013B\"\"1$3\u013C"),
          peg$decode("/?\"\"1!3\u013D"),
          peg$decode("/\u013E\"\"1$3\u013F"),
          peg$decode("/\u0140\"\"1$3\u0141"),
          peg$decode("/\u0142\"\"1#3\u0143"),
          peg$decode("/\u0144\"\"1&3\u0145"),
          peg$decode("/\u0146\"\"1&3\u0147"),
          peg$decode("/\u0148\"\"1)3\u0149"),
          peg$decode("/\u014A\"\"1&3\u014B"),
          peg$decode("!7+3$/\u014C\"\"1'3\u014D+#%'\"%$\"# !\"# !"),
          peg$decode("/\u014E\"\"1$3\u014F"),
          peg$decode("/\u0150\"\"1%3\u0151"),
          peg$decode("/\u0152\"\"1#3\u0153"),
          peg$decode("/\u0154\"\"1'3\u0155"),
          peg$decode("/\u0156\"\"1$3\u0157"),
          peg$decode("/\u0158\"\"1$3\u0159"),
          peg$decode("/\u015A\"\"1%3\u015B"),
          peg$decode("/\u015C\"\"1&3\u015D"),
          peg$decode("/\u015E\"\"1\"3\u015F"),
          peg$decode("/\u0160\"\"1&3\u0161"),
          peg$decode("/\u0162\"\"1%3\u0163"),
          peg$decode("/\u0164\"\"1)3\u0165"),
          peg$decode("/\u0166\"\"1\"3\u0167"),
          peg$decode("/\u0168\"\"1%3\u0169"),
          peg$decode("/\u016A\"\"1'3\u016B"),
          peg$decode("/\u016C\"\"1(3\u016D"),
          peg$decode("/\u016E\"\"1)3\u016F"),
          peg$decode("/\u0170\"\"1%3\u0171"),
          peg$decode("!7+3$/\u0172\"\"1&3\u0173+#%'\"%$\"# !\"# !"),
          peg$decode("/\u0174\"\"1'3\u0175"),
          peg$decode("/\u0176\"\"1)3\u0177"),
          peg$decode("/\u0178\"\"1$3\u0179"),
          peg$decode("/\u017A\"\"1\"3\u017B"),
          peg$decode("/\u017C\"\"1&3\u017D"),
          peg$decode("/\u017E\"\"1$3\u017F"),
          peg$decode("/\u0180\"\"1#3\u0181"),
          peg$decode("/\u0182\"\"1$3\u0183"),
          peg$decode("/\u0184\"\"1$3\u0185"),
          peg$decode("/\u0186\"\"1%3\u0187"),
          peg$decode("/\u0188\"\"1%3\u0189"),
          peg$decode("/\u018A\"\"1#3\u018B"),
          peg$decode("/\u018C\"\"1'3\u018D"),
          peg$decode("/\u018E\"\"1\"3\u018F"),
          peg$decode("/\u0190\"\"1#3\u0191"),
          peg$decode("/\u0192\"\"1'3\u0193"),
          peg$decode("/\u0194\"\"1$3\u0195"),
          peg$decode("/\u0196\"\"1\"3\u0197"),
          peg$decode("/\u0198\"\"1&3\u0199"),
          peg$decode("/\u019A\"\"1\"3\u019B"),
          peg$decode("/\u019C\"\"1\"3\u019D"),
          peg$decode("/\u019E\"\"1%3\u019F"),
          peg$decode("/\u01A0\"\"1%3\u01A1"),
          peg$decode("/\u01A2\"\"1$3\u01A3"),
          peg$decode("/\u01A4\"\"1&3\u01A5"),
          peg$decode("/\u01A6\"\"1'3\u01A7"),
          peg$decode("/\u01A8\"\"1%3\u01A9"),
          peg$decode("/\u01AA\"\"1%3\u01AB"),
          peg$decode("/\u01AC\"\"1*3\u01AD"),
          peg$decode("/\u01AE\"\"1&3\u01AF"),
          peg$decode("/\u01B0\"\"1'3\u01B1"),
          peg$decode("/\u01B2\"\"1'3\u01B3"),
          peg$decode("/\u01B4\"\"1&3\u01B5"),
          peg$decode("!7+3$/\u01B6\"\"1'3\u01B7+#%'\"%$\"# !\"# !"),
          peg$decode("/\u01B8\"\"1(3\u01B9"),
          peg$decode("/\u01BA\"\"1(3\u01BB"),
          peg$decode("/\u01BC\"\"1#3\u01BD"),
          peg$decode("/\u01BE\"\"1)3\u01BF"),
          peg$decode("!7+3$/\u01C0\"\"1&3\u01C1+#%'\"%$\"# !\"# !"),
          peg$decode("/\u01C2\"\"1#3\u01C3"),
          peg$decode("/\u01C4\"\"1'3\u01C5"),
          peg$decode("/\u01C6\"\"1%3\u01C7"),
          peg$decode("/\u01C8\"\"1$3\u01C9"),
          peg$decode("/\u01CA\"\"1)3\u01CB"),
          peg$decode("/\u01CC\"\"1$3\u01CD"),
          peg$decode("/\u01CE\"\"1\"3\u01CF"),
          peg$decode("/\u01D0\"\"1+3\u01D1"),
          peg$decode("/\u01D2\"\"1'3\u01D3"),
          peg$decode("/\u01D4\"\"1$3\u01D5"),
          peg$decode("/\u01D6\"\"1%3\u01D7"),
          peg$decode("/\u01D8\"\"1&3\u01D9"),
          peg$decode("!7+3$/\u01DA\"\"1&3\u01DB+#%'\"%$\"# !\"# !"),
          peg$decode("/\u01DC\"\"1%3\u01DD"),
          peg$decode("/\u01DE\"\"1&3\u01DF"),
          peg$decode("/\u01E0\"\"1&3\u01E1"),
          peg$decode("/\u01E2\"\"1$3\u01E3"),
          peg$decode("/\u01E4\"\"1'3\u01E5"),
          peg$decode("/\u01E6\"\"1$3\u01E7"),
          peg$decode("/\u01E8\"\"1%3\u01E9")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 242 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      //var unroll = options.util.makeUnroll(line, column, offset, SyntaxError)
      //var ast    = options.util.makeAST(line, column, offset, options)

      // Header/utility functions for grammar match bodies.
      //

      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();