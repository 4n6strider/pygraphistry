module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "type" },
          peg$FAILED,
          [],
          null,
          { type: "other", description: "cast" },
          function(value, type_name) {
              return {
                type: 'CastExpression',
                value: value,
                type_name: type_name
              };
            },
          function(operator, argument) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'prefix'
                };
              },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          { type: "other", description: "limit" },
          function(limit) { return { type: 'Limit', value: limit } },
          { type: "other", description: "WHERE clause" },
          { type: "other", description: "now" },
          { type: "other", description: "literal" },
          function(commas) { return filledArray(commas.length + 1, null); },
          function(elision, element) {
                  return optionalList(extractOptional(elision, 0)).concat(element);
                },
          function(first, rest) { return Array.prototype.concat.apply(first, rest); },
          function(elision) {
                return {
                  type: 'ListExpression',
                  elements: optionalList(extractOptional(elision, 0))
                }
              },
          function(elements) {
                return {
                  type: 'ListExpression',
                  elements: elements
                }
              },
          function(elements, elision) {
                return {
                  type: 'ListExpression',
                  elements: elements.concat(optionalList(extractOptional(elision, 0)))
                }
              },
          { type: "other", description: "function call" },
          function(callee, elements) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: elements
              };
            },
          function(expression) { return expression; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function() {
                return { type: "Literal", value: parseFloat(text()) };
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "0x",
          { type: "literal", value: "0x", description: "\"0x\"" },
          function(digits) {
                return { type: "Literal", value: parseInt(digits, 16) };
               },
          { type: "any", description: "any character" },
          /^[A-Za-z_]/,
          { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          { type: "other", description: "identifier" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          void 0,
          function(name) { return name; },
          { type: "other", description: "number" },
          function(literal) {
                return literal;
              },
          { type: "other", description: "string" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          function(chars) {
                return { type: "Literal", value: chars.join("") };
              },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          function() { return text(); },
          function(sequence) { return sequence; },
          function() { return ""; },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          { type: "other", description: "comment" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "",
          { type: "other", description: "null" },
          function() { return { type: "Literal", value: null }; },
          { type: "other", description: "boolean" },
          function() { return { type: "Literal", value: true  }; },
          function() { return { type: "Literal", value: false }; },
          { type: "other", description: "reserved word" },
          { type: "other", description: "shift operator" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          { type: "other", description: "comparison" },
          { type: "other", description: "equality operator" },
          "===",
          { type: "literal", value: "===", description: "\"===\"" },
          "!==",
          { type: "literal", value: "!==", description: "\"!==\"" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\xA0",
          { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
          "\uFEFF",
          { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          { type: "other", description: "end of line" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\u2028",
          { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
          "\u2029",
          { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
          { type: "other", description: "postfix keyword" },
          function(argument, operator) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'postfix'
                };
              },
          function(left, operator, right) {
                return {
                  type: 'LogicalExpression',
                  operator: operator,
                  left: left,
                  right: right
                };
              },
          function(left, operator, right) { return {
                   type: 'LogicalExpression',
                   operator: operator,
                   left: left,
                   right: right
                };
              },
          function(left, operator) { return buildBinaryExpression(first, rest); },
          function(value, low, high) {
                // TODO: use negated
                return {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                };
              },
          { type: "other", description: "text comparison" },
          function(value, operator, like) { return {
                  type: 'LikePredicate',
                  operator: operator,
                  left: value,
                  right: like
                };
              },
          { type: "other", description: "regex expression" },
          function(value, operator, matcher) {
                return {
                  type: 'RegexPredicate',
                  operator: operator,
                  left: value,
                  right: matcher
                };
              },
          { type: "other", description: "not" },
          function(operator, argument) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: argument
                };
              },
          { type: "other", description: "prefix operator" },
          function(operator, argument) {
              return {
                type: 'UnaryExpression',
                operator: operator,
                argument: argument,
                fixity: 'prefix'
              };
            },
          { type: "other", description: "multiplicative operator" },
          /^[A-Za-z0-9_:]/,
          { type: "class", value: "[A-Za-z0-9_:]", description: "[A-Za-z0-9_:]" },
          function(str) { return str.join(''); },
          function(c) { return { column: c[2], graph_namespace: c[1] }; },
          function(c) { return { column: c }; },
          function(gcn) { return gcn[1]; },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "false",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "ilike",
          { type: "literal", value: "ILIKE", description: "\"ILIKE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "similar",
          { type: "literal", value: "SIMILAR", description: "\"SIMILAR\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "true",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("7("),
          peg$decode("8! \"7=+&$,#&7=\"\"\" !+\x8B$!7Z+7$74+-%7[+#%'#%$## !$\"# !\"# !*V \"!7Z+K$74+A%7P+7%74+-%7[+#%'%%$%# !$$# !$## !$\"# !\"# !*# \" #+#%'\"%$\"# !\"# !9*\" 3 "),
          peg$decode("8!7\xA5+\x8D$7|+\x83%7Z+y%7|+o%7(+e%7|+[%7\x9B+Q%7|+G%7!+=%7|+3%7[+)%4+6%+\"&\"%$+# !$*# !$)# !$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !9*\" 3$"),
          peg$decode("!7\xDF+=$7|+3%7#+)%4#6&#\"\" %$## !$\"# !\"# !*# \"7w"),
          peg$decode("!7#+\x8D$ \"!7|+A$7\x9A+7%7|+-%7#+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7\x9A+7%7|+-%7#+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("!7$+\x8D$ \"!7|+A$7\xE5+7%7|+-%7$+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7\xE5+7%7|+-%7$+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("8!7\xDB+<$7|+2%7>+(%4#6)#! %$## !$\"# !\"# !9*\" 3("),
          peg$decode("87%9*\" 3*"),
          peg$decode("7&*# \"7'"),
          peg$decode("87\x90*) \"7\x91*# \"7\x929*\" 3+"),
          peg$decode("87>*; \"7?*5 \"7?*/ \"7n*) \"7o*# \"7)9*\" 3,"),
          peg$decode("!7P+d$ \"!7|+-$7P+#%'\"%$\"# !\"# !,8&!7|+-$7P+#%'\"%$\"# !\"# !\"+(%4\"6-\"! %$\"# !\"# !"),
          peg$decode("!!!7++-$7|+#%'\"%$\"# !\"# !*# \" #+3$7'+)%4\"6.\"\"! %$\"# !\"# !+\xE3$ \"!7|+l$7P+b%7|+X%!7++-$7|+#%'\"%$\"# !\"# !*# \" #+3%7'+)%4%6.%\"! %$%# !$$# !$## !$\"# !\"# !,w&!7|+l$7P+b%7|+X%!7++-$7|+#%'\"%$\"# !\"# !*# \" #+3%7'+)%4%6.%\"! %$%# !$$# !$## !$\"# !\"# !\"+)%4\"6/\"\"! %$\"# !\"# !"),
          peg$decode("!7Z+a$7|+W%!7++-$7|+#%'\"%$\"# !\"# !*# \" #+2%7[+(%4$60$!!%$$# !$## !$\"# !\"# !*\xD3 \"!7Z+P$7|+F%7,+<%7|+2%7[+(%4%61%!\"%$%# !$$# !$## !$\"# !\"# !*\x95 \"!7Z+\x8A$7|+\x80%7,+v%7|+l%7P+b%7|+X%!7++-$7|+#%'\"%$\"# !\"# !*# \" #+3%7[+)%4(62(\"%!%$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("8!7=+e$7|+[%7Z+Q%7|+G%7,+=%7|+3%7[+)%4'64'\"&\"%$'# !$&# !$%# !$$# !$## !$\"# !\"# !9*\" 33"),
          peg$decode("7.*m \"7=*g \"7**a \"!7Z+P$7|+F%7'+<%7|+2%7[+(%4%65%!\"%$%# !$$# !$## !$\"# !\"# !*# \"7-"),
          peg$decode("06\"\"1!37"),
          peg$decode("08\"\"1!39"),
          peg$decode(".:\"\"2:3;*@ \"!71+5$ \"70,#&70\"+#%'\"%$\"# !\"# !"),
          peg$decode("/<\"\"1!3="),
          peg$decode("!0>\"\"1!3?*# \" #+<$ \"70+&$,#&70\"\"\" !+#%'\"%$\"# !\"# !"),
          peg$decode("!73+-$74+#%'\"%$\"# !\"# !"),
          peg$decode("!72+S$7O+I% \"70,#&70\"+7%75*# \" #+'%4$6@$ %$$# !$## !$\"# !\"# !*\x80 \"!7O+P$ \"70+&$,#&70\"\"\" !+7%75*# \" #+'%4#6@# %$## !$\"# !\"# !*B \"!72+7$75*# \" #+'%4\"6@\" %$\"# !\"# !"),
          peg$decode("0A\"\"1!3B"),
          peg$decode("!/C\"\"1\"3D+G$! \"77+&$,#&77\"\"\" !+! (%+(%4\"6E\"! %$\"# !\"# !"),
          peg$decode("-\"\"1!3F"),
          peg$decode("0G\"\"1!3H"),
          peg$decode("7:*) \"7Q*# \"70"),
          peg$decode("8!7:+;$ \"7;,#&7;\"+)%4\"6J\"\"! %$\"# !\"# !9*\" 3I"),
          peg$decode("!!87p9*$$\"\" K\"# !+2$7<+(%4\"6L\"! %$\"# !\"# !"),
          peg$decode("8!78+F$!87:*# \"709*$$\"\" K\"# !+(%4\"6N\"!!%$\"# !\"# !*Q \"!76+F$!87:*# \"709*$$\"\" K\"# !+(%4\"6N\"!!%$\"# !\"# !9*\" 3M"),
          peg$decode("8!.P\"\"2P3Q+J$ \"7A,#&7A\"+8%.P\"\"2P3Q+(%4#6R#!!%$## !$\"# !\"# !*[ \"!.S\"\"2S3T+J$ \"7B,#&7B\"+8%.S\"\"2S3T+(%4#6R#!!%$## !$\"# !\"# !9*\" 3O"),
          peg$decode(".U\"\"2U3V"),
          peg$decode("!!8.P\"\"2P3Q*) \"7@*# \"7z9*$$\"\" K\"# !+1$79+'%4\"6W\" %$\"# !\"# !*I \"!.U\"\"2U3V+2$7D+(%4\"6X\"! %$\"# !\"# !*# \"7C"),
          peg$decode("!!8.S\"\"2S3T*) \"7@*# \"7z9*$$\"\" K\"# !+1$79+'%4\"6W\" %$\"# !\"# !*C \"!7@+2$7D+(%4\"6X\"! %$\"# !\"# !*# \"7C"),
          peg$decode("!7@+1$7{+'%4\"6Y\" %$\"# !\"# !"),
          peg$decode("7E*\\ \"!.:\"\"2:3;+?$!8709*$$\"\" K\"# !+'%4\"6Z\" %$\"# !\"# !*) \"7I*# \"7J"),
          peg$decode("7F*# \"7G"),
          peg$decode(".S\"\"2S3T*\xB9 \".P\"\"2P3Q*\xAD \"7@*\xA7 \"!.[\"\"2[3\\+& 4!6]! %*\x90 \"!.^\"\"2^3_+& 4!6`! %*y \"!.a\"\"2a3b+& 4!6c! %*b \"!.d\"\"2d3e+& 4!6f! %*K \"!.g\"\"2g3h+& 4!6i! %*4 \"!.j\"\"2j3k+& 4!6l! %"),
          peg$decode("!!87H*# \"7z9*$$\"\" K\"# !+1$79+'%4\"6W\" %$\"# !\"# !"),
          peg$decode("7F*; \"70*5 \".m\"\"2m3n*) \".o\"\"2o3p"),
          peg$decode("!.m\"\"2m3n+M$!!77+-$77+#%'\"%$\"# !\"# !+! (%+(%4\"6q\"! %$\"# !\"# !"),
          peg$decode("!.o\"\"2o3p+a$!!77+A$77+7%77+-%77+#%'$%$$# !$## !$\"# !\"# !+! (%+(%4\"6q\"! %$\"# !\"# !"),
          peg$decode("87M*# \"7L9*\" 3r"),
          peg$decode("!7h+{$ \"!!87z9*$$\"\" K\"# !+-$79+#%'\"%$\"# !\"# !,F&!!87z9*$$\"\" K\"# !+-$79+#%'\"%$\"# !\"# !\"+#%'\"%$\"# !\"# !"),
          peg$decode("!7i+\x85$ \"!!87j9*$$\"\" K\"# !+-$79+#%'\"%$\"# !\"# !,F&!!87j9*$$\"\" K\"# !+-$79+#%'\"%$\"# !\"# !\"+-%7j+#%'#%$## !$\"# !\"# !"),
          peg$decode("!7i+\x91$ \"!!87j*# \"7z9*$$\"\" K\"# !+-$79+#%'\"%$\"# !\"# !,L&!!87j*# \"7z9*$$\"\" K\"# !+-$79+#%'\"%$\"# !\"# !\"+-%7j+#%'#%$## !$\"# !\"# !"),
          peg$decode(".s\"\"2s3t"),
          peg$decode(".u\"\"2u3v"),
          peg$decode(".w\"\"2w3x"),
          peg$decode(".y\"\"2y3z"),
          peg$decode(".{\"\"2{3|"),
          peg$decode(".}\"\"2}3~"),
          peg$decode(".\"\"23\x80"),
          peg$decode(".\x81\"\"2\x813\x82"),
          peg$decode(".\x83\"\"2\x833\x84"),
          peg$decode(".\x85\"\"2\x853\x86"),
          peg$decode(".\x87\"\"2\x873\x88"),
          peg$decode(".\x89\"\"2\x893\x8A"),
          peg$decode(".\x8B\"\"2\x8B3\x8C"),
          peg$decode(".\x8D\"\"2\x8D3\x8E"),
          peg$decode(".\x8F\"\"2\x8F3\x90"),
          peg$decode(".\x91\"\"2\x913\x92"),
          peg$decode(".\x93\"\"2\x933\x94"),
          peg$decode(".\x95\"\"2\x953\x96"),
          peg$decode(".\x97\"\"2\x973\x98"),
          peg$decode(".\x99\"\"2\x993\x9A"),
          peg$decode(".\x9B\"\"2\x9B3\x9C"),
          peg$decode(".\x9D\"\"2\x9D3\x9E"),
          peg$decode(".\x81\"\"2\x813\x82"),
          peg$decode(".\x9F\"\"2\x9F3\xA0"),
          peg$decode(" \"0\xA1\"\"1!3\xA2,)&0\xA1\"\"1!3\xA2\""),
          peg$decode(".\xA3\"\"2\xA33\xA4*# \"7S"),
          peg$decode(".\xA5\"\"2\xA53\xA6"),
          peg$decode(".\xA7\"\"2\xA73\xA8"),
          peg$decode("! \"-\"\"1!3F,(&-\"\"1!3F\"+A$!8.\xA7\"\"2\xA73\xA89+$$\"# K\"\" !+#%'\"%$\"# !\"# !"),
          peg$decode(" \xA9"),
          peg$decode("7\x9A*\xA1 \"7\x9B*\x9B \"7\xA0*\x95 \"7\xA1*\x8F \"7\xA4*\x89 \"7\xA5*\x83 \"7\xB9*} \"7\xBA*w \"7\xBB*q \"7\xBE*k \"7\xC4*e \"7\xC8*_ \"7\xCC*Y \"7\xD5*S \"7\xD6*M \"7\xDA*G \"7\xDF*A \"7\xE0*; \"7\xE5*5 \"7\xFD*/ \"7\xFE*) \"7\u010A*# \"7\u010B"),
          peg$decode("8!7\xE1+& 4!6\xAB! %9*\" 3\xAA"),
          peg$decode("8!7\u0101+& 4!6\xAD! %*. \"!7\xC1+& 4!6\xAE! %9*\" 3\xAC"),
          peg$decode("87m*) \"7n*# \"7o9*\" 3\xAF"),
          peg$decode("7U*# \"7T"),
          peg$decode("!7\x8B+\x8D$ \"!7|+A$7q+7%7|+-%7\x8B+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7q+7%7|+-%7\x8B+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("8.\xB1\"\"2\xB13\xB2*) \".\xB3\"\"2\xB33\xB49*\" 3\xB0"),
          peg$decode("!7r+\x8D$ \"!7|+A$7s+7%7|+-%7r+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7s+7%7|+-%7r+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("87_*\x81 \"7`*{ \"!!7]+;$!87]9*$$\"\" K\"# !+#%'\"%$\"# !\"# !+! (%*L \"!!7^+;$!87^9*$$\"\" K\"# !+#%'\"%$\"# !\"# !+! (%9*\" 3\xB5"),
          peg$decode("!7t+\x8D$ \"!7|+A$7u+7%7|+-%7t+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7u+7%7|+-%7t+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !*# \"7\x84"),
          peg$decode("!7v+\x8D$ \"!7|+A$7x+7%7|+-%7v+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7x+7%7|+-%7v+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("8.\xB7\"\"2\xB73\xB8*M \".\xB9\"\"2\xB93\xBA*A \".\x99\"\"2\x993\x9A*5 \".\x9B\"\"2\x9B3\x9C*) \".\x9D\"\"2\x9D3\x9E9*\" 3\xB6"),
          peg$decode("8.\xBC\"\"2\xBC3\xBD*Y \".\xBE\"\"2\xBE3\xBF*M \".\xC0\"\"2\xC03\xC1*A \".\xC2\"\"2\xC23\xC3*5 \".\xC4\"\"2\xC43\xC5*) \".\xC6\"\"2\xC63\xC79*\" 3\xBB"),
          peg$decode("80\xC9\"\"1!3\xCA9*\" 3\xC8"),
          peg$decode("8.\x9F\"\"2\x9F3\xA0*M \".\xCC\"\"2\xCC3\xCD*A \".\xCE\"\"2\xCE3\xCF*5 \".\xD0\"\"2\xD03\xD1*) \".\xD2\"\"2\xD23\xD39*\" 3\xCB"),
          peg$decode(" \"7y*) \"7{*# \"7K,/&7y*) \"7{*# \"7K\""),
          peg$decode(" \"7y*# \"7N,)&7y*# \"7N\""),
          peg$decode("87\xD6*# \"7\xE09*\" 3\xD4"),
          peg$decode("!7/+=$7|+3%7~+)%4#6\xD5#\"\" %$## !$\"# !\"# !"),
          peg$decode("!7/+R$7|+H%7\xD5+>%7|+4%7\x8A+*%4%6\xD6%#$\" %$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!7/+R$7|+H%7\xCC+>%7|+4%7(+*%4%6\xD7%#$\" %$%# !$$# !$## !$\"# !\"# !*\xCD \"!7/+\xC2$7|+\xB8%7\xCC+\xAE%7|+\xA4%7Z+\x9A% \"!7/+7$7P+-%7|+#%'#%$## !$\"# !\"# !+E$,B&!7/+7$7P+-%7|+#%'#%$## !$\"# !\"# !\"\"\" !*# \" #+=%7|+3%7[+)%4(6\xD8(\"'%%$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!7/+z$7|+p%7\xA1+f%7|+\\%7/+R%7|+H%7\x9A+>%7|+4%7/+*%4)6\xD9)#($ %$)# !$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("87\xDA*# \"7\xCA9*\" 3\xDA"),
          peg$decode("8!7/+R$7|+H%7\x83+>%7|+4%7/+*%4%6\xDB%#$\" %$%# !$$# !$## !$\"# !\"# !9*\" 3\xDA"),
          peg$decode("7\xEE*B \"!7\xF9+7$7|+-%7\xFE+#%'#%$## !$\"# !\"# !"),
          peg$decode("8!7/+R$7|+H%7\x85+>%7|+4%7/+*%4%6\xDD%#$\" %$%# !$$# !$## !$\"# !\"# !9*\" 3\xDC"),
          peg$decode("8!7\xDF+=$7|+3%7\x88+)%4#6\xDF#\"\" %$## !$\"# !\"# !9*\" 3\xDE"),
          peg$decode("7\x87*G \"7\x84*A \"7\x86*; \"7\x82*5 \"7\x81*/ \"7*) \"7\x80*# \"7/"),
          peg$decode("87T*) \"7U*# \"7Y9*\" 3\xE0"),
          peg$decode("!7\x89+=$7|+3%7\x88+)%4#6\xE1#\"\" %$## !$\"# !\"# !*# \"7\x88"),
          peg$decode("!7\x8A+\x8D$ \"!7|+A$7\x8C+7%7|+-%7\x8A+#%'$%$$# !$## !$\"# !\"# !,L&!7|+A$7\x8C+7%7|+-%7\x8A+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"6'\"\"! %$\"# !\"# !"),
          peg$decode("87V*) \"7W*# \"7X9*\" 3\xE2"),
          peg$decode("! \"0\xE3\"\"1!3\xE4+,$,)&0\xE3\"\"1!3\xE4\"\"\" !+' 4!6\xE5!! %"),
          peg$decode("!!!7=+7$7Q+-%7\x8D+#%'#%$## !$\"# !\"# !+' 4!6\xE6!! %*/ \"!7\x8D+' 4!6\xE7!! %+' 4!6\xE8!! %"),
          peg$decode("!.\xE9\"\"2\xE93\xEA+-$7=+#%'\"%$\"# !\"# !"),
          peg$decode(".\xEB\"\"2\xEB3\xEC"),
          peg$decode(".\xEB\"\"2\xEB3\xEC"),
          peg$decode(".\xEB\"\"2\xEB3\xEC"),
          peg$decode("/\xED\"\"1%3\xEE"),
          peg$decode("/\xEF\"\"1&3\xF0"),
          peg$decode("/\xF1\"\"1#3\xF2"),
          peg$decode("/\xF3\"\"1%3\xF4"),
          peg$decode("/\xF5\"\"1#3\xF6"),
          peg$decode("/\xF7\"\"1%3\xF8"),
          peg$decode("/\xF9\"\"1'3\xFA"),
          peg$decode("/\xFB\"\"1#3\xFC"),
          peg$decode("/\xFD\"\"1\"3\xFE"),
          peg$decode("/\xFF\"\"1#3\u0100"),
          peg$decode("/\u0101\"\"1&3\u0102"),
          peg$decode("/\u0103\"\"1-3\u0104"),
          peg$decode("/\u0105\"\"1&3\u0106"),
          peg$decode("/\u0107\"\"1%3\u0108"),
          peg$decode("/\u0109\"\"1'3\u010A"),
          peg$decode("/\u010B\"\"1\"3\u010C"),
          peg$decode("/\u010D\"\"1'3\u010E"),
          peg$decode("/\u010F\"\"1$3\u0110"),
          peg$decode("/\u0111\"\"1$3\u0112"),
          peg$decode("/\u0113\"\"1%3\u0114"),
          peg$decode("/\u0115\"\"1'3\u0116"),
          peg$decode("/\u0117\"\"1&3\u0118"),
          peg$decode("/\u0119\"\"1&3\u011A"),
          peg$decode("/\u011B\"\"1(3\u011C"),
          peg$decode("/\u011D\"\"1*3\u011E"),
          peg$decode("!7|+3$/\u011F\"\"1&3\u0120+#%'\"%$\"# !\"# !"),
          peg$decode("/\u0121\"\"1%3\u0122"),
          peg$decode("/\u0123\"\"1(3\u0124"),
          peg$decode("/\u0125\"\"1'3\u0126"),
          peg$decode("/\u0127\"\"1*3\u0128"),
          peg$decode("/\u0129\"\"1(3\u012A"),
          peg$decode("!7|+3$/\u012B\"\"1&3\u012C+#%'\"%$\"# !\"# !"),
          peg$decode("/\u012D\"\"1$3\u012E"),
          peg$decode("/\u012F\"\"1&3\u0130"),
          peg$decode("/\u0131\"\"1(3\u0132"),
          peg$decode("/\u0133\"\"1$3\u0134"),
          peg$decode("/<\"\"1!3\u0135"),
          peg$decode("/\u0136\"\"1$3\u0137"),
          peg$decode("/\u0138\"\"1$3\u0139"),
          peg$decode("/\u013A\"\"1#3\u013B"),
          peg$decode("/\u013C\"\"1&3\u013D"),
          peg$decode("/\u013E\"\"1&3\u013F"),
          peg$decode("/\u0140\"\"1)3\u0141"),
          peg$decode("/\u0142\"\"1&3\u0143"),
          peg$decode("!7|+3$/\u0144\"\"1'3\u0145+#%'\"%$\"# !\"# !"),
          peg$decode("/\u0146\"\"1$3\u0147"),
          peg$decode("/\u0148\"\"1%3\u0149"),
          peg$decode("/\u014A\"\"1#3\u014B"),
          peg$decode("/\u014C\"\"1'3\u014D"),
          peg$decode("/\u014E\"\"1$3\u014F"),
          peg$decode("/\u0150\"\"1$3\u0151"),
          peg$decode("/\u0152\"\"1%3\u0153"),
          peg$decode("/\u0154\"\"1&3\u0155"),
          peg$decode("/\u0156\"\"1\"3\u0157"),
          peg$decode("/\u0158\"\"1&3\u0159"),
          peg$decode("/\u015A\"\"1%3\u015B"),
          peg$decode("/\u015C\"\"1)3\u015D"),
          peg$decode("/\u015E\"\"1\"3\u015F"),
          peg$decode("/\u0160\"\"1%3\u0161"),
          peg$decode("/\u0162\"\"1'3\u0163"),
          peg$decode("/\u0164\"\"1)3\u0165"),
          peg$decode("/\u0166\"\"1%3\u0167"),
          peg$decode("!7|+3$/\u0168\"\"1&3\u0169+#%'\"%$\"# !\"# !"),
          peg$decode("/\u016A\"\"1'3\u016B"),
          peg$decode("/\u016C\"\"1)3\u016D"),
          peg$decode("/\u016E\"\"1$3\u016F"),
          peg$decode("/\u0170\"\"1\"3\u0171"),
          peg$decode("/\u0172\"\"1&3\u0173"),
          peg$decode("/\u0174\"\"1$3\u0175"),
          peg$decode("/\u0176\"\"1#3\u0177"),
          peg$decode("/\u0178\"\"1$3\u0179"),
          peg$decode("/\u017A\"\"1$3\u017B"),
          peg$decode("/\u017C\"\"1%3\u017D"),
          peg$decode("/\u017E\"\"1%3\u017F"),
          peg$decode("/\u0180\"\"1'3\u0181"),
          peg$decode("/\u0182\"\"1\"3\u0183"),
          peg$decode("/\u0184\"\"1#3\u0185"),
          peg$decode("/\u0186\"\"1'3\u0187"),
          peg$decode("/\u0188\"\"1$3\u0189"),
          peg$decode("/\u018A\"\"1\"3\u018B"),
          peg$decode("/\u018C\"\"1&3\u018D"),
          peg$decode("/\u018E\"\"1\"3\u018F"),
          peg$decode("/\u0190\"\"1\"3\u0191"),
          peg$decode("/\u0192\"\"1%3\u0193"),
          peg$decode("/\u0194\"\"1%3\u0195"),
          peg$decode("/\u0196\"\"1$3\u0197"),
          peg$decode("/\u0198\"\"1&3\u0199"),
          peg$decode("/\u019A\"\"1'3\u019B"),
          peg$decode("/\u019C\"\"1%3\u019D"),
          peg$decode("/\u019E\"\"1%3\u019F"),
          peg$decode("/\u01A0\"\"1*3\u01A1"),
          peg$decode("/\u01A2\"\"1&3\u01A3"),
          peg$decode("/\u01A4\"\"1'3\u01A5"),
          peg$decode("/\u01A6\"\"1'3\u01A7"),
          peg$decode("/\u01A8\"\"1&3\u01A9"),
          peg$decode("!7|+3$/\u01AA\"\"1'3\u01AB+#%'\"%$\"# !\"# !"),
          peg$decode("/\u01AC\"\"1(3\u01AD"),
          peg$decode("/\u01AE\"\"1(3\u01AF"),
          peg$decode("/\u01B0\"\"1#3\u01B1"),
          peg$decode("/\u01B2\"\"1)3\u01B3"),
          peg$decode("!7|+3$/\u01B4\"\"1&3\u01B5+#%'\"%$\"# !\"# !"),
          peg$decode("/\u01B6\"\"1#3\u01B7"),
          peg$decode("/\u01B8\"\"1'3\u01B9"),
          peg$decode("/\u01BA\"\"1%3\u01BB"),
          peg$decode("/\u01BC\"\"1$3\u01BD"),
          peg$decode("/\u01BE\"\"1)3\u01BF"),
          peg$decode("/\u01C0\"\"1$3\u01C1"),
          peg$decode("/\u01C2\"\"1\"3\u01C3"),
          peg$decode("/\u01C4\"\"1+3\u01C5"),
          peg$decode("/\u01C6\"\"1'3\u01C7"),
          peg$decode("/\u01C8\"\"1$3\u01C9"),
          peg$decode("/\u01CA\"\"1%3\u01CB"),
          peg$decode("/\u01CC\"\"1&3\u01CD"),
          peg$decode("!7|+3$/\u01CE\"\"1&3\u01CF+#%'\"%$\"# !\"# !"),
          peg$decode("/\u01D0\"\"1%3\u01D1"),
          peg$decode("/\u01D2\"\"1&3\u01D3"),
          peg$decode("/\u01D4\"\"1&3\u01D5"),
          peg$decode("/\u01D6\"\"1$3\u01D7"),
          peg$decode("/\u01D8\"\"1'3\u01D9"),
          peg$decode("/\u01DA\"\"1$3\u01DB"),
          peg$decode("/\u01DC\"\"1%3\u01DD")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 236 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      //var unroll = options.util.makeUnroll(line, column, offset, SyntaxError)
      //var ast    = options.util.makeAST(line, column, offset, options)

      // Header/utility functions for grammar match bodies.
      //

      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();