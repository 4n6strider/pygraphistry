module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "type name" },
          { type: "other", description: "type" },
          peg$FAILED,
          [],
          null,
          { type: "other", description: "cast" },
          function(value, type_name) {
              return {
                type: 'CastExpression',
                value: value,
                type_name: type_name
              };
            },
          function(operator, argument) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'prefix'
                };
              },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          { type: "other", description: "limit" },
          function(limit) { return { type: 'Limit', value: limit } },
          { type: "other", description: "WHERE clause" },
          { type: "other", description: "now" },
          { type: "other", description: "literal" },
          function(element) {
                  return optionalList(element);
                },
          function(first, rest) { return Array.prototype.concat.apply(first, rest); },
          function() {
                return {
                  type: 'ListExpression',
                  elements: []
                }
              },
          function(elements) {
                return {
                  type: 'ListExpression',
                  elements: elements
                }
              },
          { type: "other", description: "function call" },
          function(callee) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: []
              };
            },
          function(callee, elements) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: elements
              };
            },
          function(expression) { return expression; },
          void 0,
          { type: "any", description: "any character" },
          function() { return {type: "Literal", dataType: 'boolean', value: true }; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          function() {
              return { type: "Literal", dataType: 'integer', value: 0 };
            },
          function() {
              return { type: "Literal", dataType: 'integer', value: parseInt(text()) };
            },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function() {
                return { type: "Literal", dataType: 'float', value: parseFloat(text()) };
              },
          function() {
                return { type: "Literal", dataType: 'integer', value: parseFloat(text()) };
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "0x",
          { type: "literal", value: "0x", description: "\"0x\"" },
          function(digits) {
                return { type: "Literal", dataType: 'integer', value: parseInt(digits, 16) };
               },
          /^[A-Za-z_]/,
          { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          { type: "other", description: "identifier" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          function(name) { return name; },
          { type: "other", description: "number" },
          function(literal) {
                return literal;
              },
          { type: "other", description: "numeric constant" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          { type: "other", description: "identifier with brackets" },
          function(chars) {
                return {
                  type: "Identifier",
                  name: chars.join("")
                };
              },
          function() { return text(); },
          function(sequence) { return sequence; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          { type: "other", description: "string" },
          function(chars) {
                return { type: "Literal", dataType: 'string', value: chars.join("") };
              },
          function() { return ""; },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          { type: "other", description: "comment" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "",
          { type: "other", description: "null" },
          function() { return { type: "Literal", dataType: 'null', value: null }; },
          { type: "other", description: "boolean" },
          function() { return { type: "Literal", dataType: 'boolean', value: true  }; },
          function() { return { type: "Literal", dataType: 'boolean', value: false }; },
          { type: "other", description: "reserved word" },
          { type: "other", description: "shift operator" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          { type: "other", description: "comparison" },
          { type: "other", description: "equality operator" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\xA0",
          { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
          "\uFEFF",
          { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          { type: "other", description: "end of line" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\u2028",
          { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
          "\u2029",
          { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
          { type: "other", description: "postfix keyword" },
          function(argument, operator) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'postfix'
                };
              },
          function(left, operator, right) {
                return {
                  type: 'LogicalExpression',
                  operator: operator,
                  left: left,
                  right: right
                };
              },
          function(left, operator, right) { return {
                   type: 'LogicalExpression',
                   operator: operator,
                   left: left,
                   right: right
                };
              },
          function(left, operator) { return buildBinaryExpression(first, rest); },
          function(value, low, high) {
                // TODO: use negated
                return {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                };
              },
          { type: "other", description: "text comparison" },
          function(value, operator, like, escapeChar) { return {
                  type: 'LikePredicate',
                  operator: operator,
                  left: value,
                  right: like,
                  escapeChar: escapeChar
                };
              },
          function(value, operator, like) { return {
                  type: 'LikePredicate',
                  operator: operator,
                  left: value,
                  right: like
                };
              },
          { type: "other", description: "regex expression" },
          function(value, operator, matcher) {
                return {
                  type: 'RegexPredicate',
                  operator: operator,
                  left: value,
                  right: matcher
                };
              },
          { type: "other", description: "not" },
          function(operator, argument) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: argument
                };
              },
          function(property) { return { name: property }; },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type:     'MemberAccess',
                    object:   result,
                    name:     element.name
                  };
                });
              },
          { type: "other", description: "prefix operator" },
          function(operator, argument) {
              return {
                type: 'UnaryExpression',
                operator: operator,
                argument: argument,
                fixity: 'prefix'
              };
            },
          { type: "other", description: "multiplicative operator" },
          /^[A-Za-z0-9_:]/,
          { type: "class", value: "[A-Za-z0-9_:]", description: "[A-Za-z0-9_:]" },
          function(str) { return str.join(''); },
          function(c) { return { column: c[2], graph_namespace: c[1] }; },
          function(c) { return { column: c }; },
          function(gcn) { return gcn[1]; },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "array",
          { type: "literal", value: "ARRAY", description: "\"ARRAY\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "false",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "ilike",
          { type: "literal", value: "ILIKE", description: "\"ILIKE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "infinity",
          { type: "literal", value: "INFINITY", description: "\"INFINITY\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "integer",
          { type: "literal", value: "INTEGER", description: "\"INTEGER\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "nan",
          { type: "literal", value: "NaN", description: "\"NaN\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "number",
          { type: "literal", value: "NUMBER", description: "\"NUMBER\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "similar",
          { type: "literal", value: "SIMILAR", description: "\"SIMILAR\"" },
          "string",
          { type: "literal", value: "STRING", description: "\"STRING\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "true",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("7)"),
          peg$decode("87\u0107*/ \"7\xDD*) \"7\xEE*# \"7\xA39*\" 3 "),
          peg$decode("8! #7!+&$,#&7!\"\"\" \"+\x8B$!7_+7$74+-%7`+#%'#%$## \"$\"# \"\"# \"*V \"!7_+K$74+A%7U+7%74+-%7`+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \" $+#%'\"%$\"# \"\"# \"9*\" 3!"),
          peg$decode("8!7\xAE+\x8D$7\x83+\x83%7_+y%7\x83+o%7)+e%7\x83+[%7\xA4+Q%7\x83+G%7\"+=%7\x83+3%7`+)%4+6&+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3%"),
          peg$decode("!7\xEB+=$7\x83+3%7$+)%4#6'#\"\" %$## \"$\"# \"\"# \"*# \"7~"),
          peg$decode("!7$+\x8D$ #!7\x83+A$7\xA2+7%7\x83+-%7$+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7\xA2+7%7\x83+-%7$+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \""),
          peg$decode("!7%+\x8D$ #!7\x83+A$7\xF2+7%7\x83+-%7%+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7\xF2+7%7\x83+-%7%+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \""),
          peg$decode("8!7\xE6+<$7\x83+2%7)+(%4#6*#! %$## \"$\"# \"\"# \"9*\" 3)"),
          peg$decode("87&9*\" 3+"),
          peg$decode("7'*# \"7("),
          peg$decode("87\x98*) \"7\x99*# \"7\x9A9*\" 3,"),
          peg$decode("87>*A \"7?*; \"7E*5 \"7E*/ \"7u*) \"7v*# \"7*9*\" 3-"),
          peg$decode("!!7&+' 4!6.!! %+\x97$ #!7\x83+F$7U+<%7\x83+2%7&+(%4$6.$! %$$# \"$## \"$\"# \"\"# \",Q&!7\x83+F$7U+<%7\x83+2%7&+(%4$6.$! %$$# \"$## \"$\"# \"\"# \"\"+)%4\"6/\"\"! %$\"# \"\"# \""),
          peg$decode("!7_+;$7\x83+1%7`+'%4#60# %$## \"$\"# \"\"# \"*\xAD \"!7_+P$7\x83+F%7,+<%7\x83+2%7`+(%4%61%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*o \"!7_+d$7\x83+Z%7,+P%7\x83+F%7U+<%7\x83+2%7`+(%4'61'!$%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("8!7=+P$7\x83+F%7_+<%7\x83+2%7`+(%4%63%!$%$%# \"$$# \"$## \"$\"# \"\"# \"*p \"!7=+e$7\x83+[%7_+Q%7\x83+G%7,+=%7\x83+3%7`+)%4'64'\"&\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 32"),
          peg$decode("7A*\x9D \"7#*\x97 \"7.*\x91 \"7=*\x8B \"7+*\x85 \"!7_+P$7\x83+F%7(+<%7\x83+2%7`+(%4%65%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*G \"7-*A \"!!8-\"\"1!379*$$\"\" 6\"# \"+& 4!68! %"),
          peg$decode("09\"\"1!3:"),
          peg$decode("0;\"\"1!3<"),
          peg$decode("!.=\"\"2=3>+& 4!6?! %*D \"!71+9$ #70,#&70\"+'%4\"6@\" %$\"# \"\"# \""),
          peg$decode("/A\"\"1!3B"),
          peg$decode("!0C\"\"1!3D*# \" $+<$ #70+&$,#&70\"\"\" \"+#%'\"%$\"# \"\"# \""),
          peg$decode("!73+-$74+#%'\"%$\"# \"\"# \""),
          peg$decode("!72+S$7T+I% #70,#&70\"+7%75*# \" $+'%4$6E$ %$$# \"$## \"$\"# \"\"# \"*\x80 \"!7T+P$ #70+&$,#&70\"\"\" \"+7%75*# \" $+'%4#6E# %$## \"$\"# \"\"# \"*B \"!72+7$75*# \" $+'%4\"6F\" %$\"# \"\"# \""),
          peg$decode("0G\"\"1!3H"),
          peg$decode("!/I\"\"1\"3J+G$! #77+&$,#&77\"\"\" \"+! (%+(%4\"6K\"! %$\"# \"\"# \""),
          peg$decode("-\"\"1!37"),
          peg$decode("0L\"\"1!3M"),
          peg$decode("7:*) \"7V*# \"70"),
          peg$decode("8!7:+;$ #7;,#&7;\"+)%4\"6O\"\"! %$\"# \"\"# \"9*\" 3N"),
          peg$decode("!!87w9*$$\"\" 6\"# \"+2$7<+(%4\"6P\"! %$\"# \"\"# \""),
          peg$decode("8!78+F$!87:*# \"709*$$\"\" 6\"# \"+(%4\"6R\"!!%$\"# \"\"# \"*Q \"!76+F$!87:*# \"709*$$\"\" 6\"# \"+(%4\"6R\"!!%$\"# \"\"# \"9*\" 3Q"),
          peg$decode("87\xD8*# \"7\xE89*\" 3S"),
          peg$decode(".T\"\"2T3U"),
          peg$decode("8!7a+D$ #7B,#&7B\"+2%7b+(%4#6W#!!%$## \"$\"# \"\"# \"9*\" 3V"),
          peg$decode("!!87b*) \"7@*# \"7\x819*$$\"\" 6\"# \"+1$79+'%4\"6X\" %$\"# \"\"# \"*C \"!7@+2$7I+(%4\"6Y\"! %$\"# \"\"# \"*# \"7H"),
          peg$decode(".Z\"\"2Z3["),
          peg$decode(".\\\"\"2\\3]"),
          peg$decode("8!7C+D$ #7F,#&7F\"+2%7C+(%4#6_#!!%$## \"$\"# \"\"# \"*O \"!7D+D$ #7G,#&7G\"+2%7D+(%4#6_#!!%$## \"$\"# \"\"# \"9*\" 3^"),
          peg$decode("!!87C*) \"7@*# \"7\x819*$$\"\" 6\"# \"+1$79+'%4\"6X\" %$\"# \"\"# \"*C \"!7@+2$7I+(%4\"6Y\"! %$\"# \"\"# \"*# \"7H"),
          peg$decode("!!87D*) \"7@*# \"7\x819*$$\"\" 6\"# \"+1$79+'%4\"6X\" %$\"# \"\"# \"*C \"!7@+2$7I+(%4\"6Y\"! %$\"# \"\"# \"*# \"7H"),
          peg$decode("!7@+1$7\x82+'%4\"6`\" %$\"# \"\"# \""),
          peg$decode("7J*\\ \"!.=\"\"2=3>+?$!8709*$$\"\" 6\"# \"+'%4\"6a\" %$\"# \"\"# \"*) \"7N*# \"7O"),
          peg$decode("7K*# \"7L"),
          peg$decode("7D*\xB3 \"7C*\xAD \"7@*\xA7 \"!.b\"\"2b3c+& 4!6d! %*\x90 \"!.e\"\"2e3f+& 4!6g! %*y \"!.h\"\"2h3i+& 4!6j! %*b \"!.k\"\"2k3l+& 4!6m! %*K \"!.n\"\"2n3o+& 4!6p! %*4 \"!.q\"\"2q3r+& 4!6s! %"),
          peg$decode("!!87M*# \"7\x819*$$\"\" 6\"# \"+1$79+'%4\"6X\" %$\"# \"\"# \""),
          peg$decode("7K*; \"70*5 \".t\"\"2t3u*) \".v\"\"2v3w"),
          peg$decode("!.t\"\"2t3u+M$!!77+-$77+#%'\"%$\"# \"\"# \"+! (%+(%4\"6x\"! %$\"# \"\"# \""),
          peg$decode("!.v\"\"2v3w+a$!!77+A$77+7%77+-%77+#%'$%$$# \"$## \"$\"# \"\"# \"+! (%+(%4\"6x\"! %$\"# \"\"# \""),
          peg$decode("87R*# \"7Q9*\" 3y"),
          peg$decode("!7o+{$ #!!87\x819*$$\"\" 6\"# \"+-$79+#%'\"%$\"# \"\"# \",F&!!87\x819*$$\"\" 6\"# \"+-$79+#%'\"%$\"# \"\"# \"\"+#%'\"%$\"# \"\"# \""),
          peg$decode("!7p+\x85$ #!!87q9*$$\"\" 6\"# \"+-$79+#%'\"%$\"# \"\"# \",F&!!87q9*$$\"\" 6\"# \"+-$79+#%'\"%$\"# \"\"# \"\"+-%7q+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("!7p+\x91$ #!!87q*# \"7\x819*$$\"\" 6\"# \"+-$79+#%'\"%$\"# \"\"# \",L&!!87q*# \"7\x819*$$\"\" 6\"# \"+-$79+#%'\"%$\"# \"\"# \"\"+-%7q+#%'#%$## \"$\"# \"\"# \""),
          peg$decode(".z\"\"2z3{"),
          peg$decode(".|\"\"2|3}"),
          peg$decode(".~\"\"2~3"),
          peg$decode(".\x80\"\"2\x803\x81"),
          peg$decode(".\x82\"\"2\x823\x83"),
          peg$decode(".\x84\"\"2\x843\x85"),
          peg$decode(".\x86\"\"2\x863\x87"),
          peg$decode(".\x88\"\"2\x883\x89"),
          peg$decode(".\x8A\"\"2\x8A3\x8B"),
          peg$decode(".\x8C\"\"2\x8C3\x8D"),
          peg$decode(".\x8E\"\"2\x8E3\x8F"),
          peg$decode(".\x90\"\"2\x903\x91"),
          peg$decode(".\x92\"\"2\x923\x93"),
          peg$decode(".\x94\"\"2\x943\x95"),
          peg$decode(".\x96\"\"2\x963\x97"),
          peg$decode(".\x98\"\"2\x983\x99"),
          peg$decode(".\x9A\"\"2\x9A3\x9B"),
          peg$decode(".\x9C\"\"2\x9C3\x9D"),
          peg$decode(".\x9E\"\"2\x9E3\x9F"),
          peg$decode(".\xA0\"\"2\xA03\xA1"),
          peg$decode(".\xA2\"\"2\xA23\xA3"),
          peg$decode(".\xA4\"\"2\xA43\xA5"),
          peg$decode(".\xA6\"\"2\xA63\xA7"),
          peg$decode(".\xA8\"\"2\xA83\xA9"),
          peg$decode(".\x88\"\"2\x883\x89"),
          peg$decode(".\xAA\"\"2\xAA3\xAB"),
          peg$decode(" #0\xAC\"\"1!3\xAD,)&0\xAC\"\"1!3\xAD\""),
          peg$decode(".\xAE\"\"2\xAE3\xAF*# \"7X"),
          peg$decode(".\xB0\"\"2\xB03\xB1"),
          peg$decode(".\xB2\"\"2\xB23\xB3"),
          peg$decode("! #-\"\"1!37,(&-\"\"1!37\"+A$!8.\xB2\"\"2\xB23\xB39+$$\"# 6\"\" \"+#%'\"%$\"# \"\"# \""),
          peg$decode(" \xB4"),
          peg$decode("!7\xA2+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u03A3 \"!7\xA4+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u037A \"!7\xA9+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0351 \"!7\xAA+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0328 \"!7\xAD+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u02FF \"!7\xAE+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u02D6 \"!7\xC2+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u02AD \"!7\xC3+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0284 \"!7\xC4+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u025B \"!7\xC7+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0232 \"!7\xCD+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0209 \"!7\xD1+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u01E0 \"!7\xD5+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u01B7 \"!7\xE0+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u018E \"!7\xE1+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0165 \"!7\xE5+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u013C \"!7\xEB+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\u0113 \"!7\xEC+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\xEA \"!7\xF2+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\xC1 \"!7\u010B+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*\x98 \"!7\u010C+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*o \"!7\u0118+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"*F \"!7\u0119+;$!87;9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \""),
          peg$decode("8!7\xED+& 4!6\xB6! %9*\" 3\xB5"),
          peg$decode("8!7\u010F+& 4!6\xB8! %*. \"!7\xCA+& 4!6\xB9! %9*\" 3\xB7"),
          peg$decode("87t*) \"7u*# \"7v9*\" 3\xBA"),
          peg$decode("7Z*# \"7Y"),
          peg$decode("!7\x93+\x8D$ #!7\x83+A$7x+7%7\x83+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7x+7%7\x83+-%7\x93+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \""),
          peg$decode("8.\xBC\"\"2\xBC3\xBD*) \".\xBE\"\"2\xBE3\xBF9*\" 3\xBB"),
          peg$decode("!7y+\x8D$ #!7\x83+A$7z+7%7\x83+-%7y+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7z+7%7\x83+-%7y+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \""),
          peg$decode("87f*\x81 \"7g*{ \"!!7d+;$!87d9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"+! (%*L \"!!7e+;$!87e9*$$\"\" 6\"# \"+#%'\"%$\"# \"\"# \"+! (%9*\" 3\xC0"),
          peg$decode("!7{+\x8D$ #!7\x83+A$7|+7%7\x83+-%7{+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7|+7%7\x83+-%7{+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \"*# \"7\x8B"),
          peg$decode("!7}+\x8D$ #!7\x83+A$7+7%7\x83+-%7}+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7+7%7\x83+-%7}+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \""),
          peg$decode("87j*/ \"7i*) \"7h*# \"7k9*\" 3\xC1"),
          peg$decode("8.\xC3\"\"2\xC33\xC4*Y \".\xC5\"\"2\xC53\xC6*M \".\xC7\"\"2\xC73\xC8*A \".\xC9\"\"2\xC93\xCA*5 \".\xCB\"\"2\xCB3\xCC*) \".\xCD\"\"2\xCD3\xCE9*\" 3\xC2"),
          peg$decode("80\xD0\"\"1!3\xD19*\" 3\xCF"),
          peg$decode("8.\xAA\"\"2\xAA3\xAB*M \".\xD3\"\"2\xD33\xD4*A \".\xD5\"\"2\xD53\xD6*5 \".\xD7\"\"2\xD73\xD8*) \".\xD9\"\"2\xD93\xDA9*\" 3\xD2"),
          peg$decode(" #7\x80*) \"7\x82*# \"7P,/&7\x80*) \"7\x82*# \"7P\""),
          peg$decode(" #7\x80*# \"7S,)&7\x80*# \"7S\""),
          peg$decode("87\xE1*# \"7\xEC9*\" 3\xDB"),
          peg$decode("!7\x8F+=$7\x83+3%7\x85+)%4#6\xDC#\"\" %$## \"$\"# \"\"# \""),
          peg$decode("!7\x8F+R$7\x83+H%7\xE0+>%7\x83+4%7\x92+*%4%6\xDD%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("!7\x8F+R$7\x83+H%7\xD5+>%7\x83+4%7)+*%4%6\xDE%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*\xCD \"!7\x8F+\xC2$7\x83+\xB8%7\xD5+\xAE%7\x83+\xA4%7_+\x9A% #!7\x8F+7$7U+-%7\x83+#%'#%$## \"$\"# \"\"# \"+E$,B&!7\x8F+7$7U+-%7\x83+#%'#%$## \"$\"# \"\"# \"\"\"\" \"*# \" $+=%7\x83+3%7`+)%4(6\xDF(\"'%%$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("!7\x8F+z$7\x83+p%7\xAA+f%7\x83+\\%7\x8F+R%7\x83+H%7\xA2+>%7\x83+4%7\x8F+*%4)6\xE0)#($ %$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("87\xE5*# \"7\xD39*\" 3\xE1"),
          peg$decode("8!7\x8F+q$7\x83+g%7\x8A+]%7\x83+S%7\x8F+I%7\x83+?%7\xC4+5%7E++%4(6\xE2($'%# %$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*] \"!7\x8F+R$7\x83+H%7\x8A+>%7\x83+4%7\x8F+*%4%6\xE3%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xE1"),
          peg$decode("7\xFB*B \"!7\u0106+7$7\x83+-%7\u010C+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("8!7\x8F+R$7\x83+H%7\x8C+>%7\x83+4%7\x8F+*%4%6\xE5%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xE4"),
          peg$decode("8!7\xEB+=$7\x83+3%7\x90+)%4#6\xE7#\"\" %$## \"$\"# \"\"# \"9*\" 3\xE6"),
          peg$decode("!7/+\xBF$ #!7\x83+Z$7a+P%7\x83+F%7)+<%7\x83+2%7b+(%4&6\xE8&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",e&!7\x83+Z$7a+P%7\x83+F%7)+<%7\x83+2%7b+(%4&6\xE8&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xE9\"\"! %$\"# \"\"# \""),
          peg$decode("7\x8E*G \"7\x8B*A \"7\x8D*; \"7\x89*5 \"7\x88*/ \"7\x86*) \"7\x87*# \"7\x8F"),
          peg$decode("87Y*) \"7Z*# \"7^9*\" 3\xEA"),
          peg$decode("!7\x91+=$7\x83+3%7\x90+)%4#6\xEB#\"\" %$## \"$\"# \"\"# \"*# \"7\x90"),
          peg$decode("!7\x92+\x8D$ #!7\x83+A$7\x94+7%7\x83+-%7\x92+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x83+A$7\x94+7%7\x83+-%7\x92+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6(\"\"! %$\"# \"\"# \""),
          peg$decode("87[*) \"7\\*# \"7]9*\" 3\xEC"),
          peg$decode("! #0\xED\"\"1!3\xEE+,$,)&0\xED\"\"1!3\xEE\"\"\" \"+' 4!6\xEF!! %"),
          peg$decode("!!!7=+7$7V+-%7\x95+#%'#%$## \"$\"# \"\"# \"+' 4!6\xF0!! %*/ \"!7\x95+' 4!6\xF1!! %+' 4!6\xF2!! %"),
          peg$decode("!.\xF3\"\"2\xF33\xF4+-$7=+#%'\"%$\"# \"\"# \""),
          peg$decode(".\xF5\"\"2\xF53\xF6"),
          peg$decode(".\xF5\"\"2\xF53\xF6"),
          peg$decode(".\xF5\"\"2\xF53\xF6"),
          peg$decode("/\xF7\"\"1%3\xF8"),
          peg$decode("/\xF9\"\"1&3\xFA"),
          peg$decode("/\xFB\"\"1#3\xFC"),
          peg$decode("/\xFD\"\"1%3\xFE"),
          peg$decode("/\xFF\"\"1#3\u0100"),
          peg$decode("/\u0101\"\"1%3\u0102"),
          peg$decode("/\u0103\"\"1'3\u0104"),
          peg$decode("/\u0105\"\"1#3\u0106"),
          peg$decode("/\u0107\"\"1%3\u0108"),
          peg$decode("/\u0109\"\"1\"3\u010A"),
          peg$decode("/\u010B\"\"1#3\u010C"),
          peg$decode("/\u010D\"\"1&3\u010E"),
          peg$decode("/\u010F\"\"1-3\u0110"),
          peg$decode("/\u0111\"\"1&3\u0112"),
          peg$decode("/\u0113\"\"1%3\u0114"),
          peg$decode("/\u0115\"\"1'3\u0116"),
          peg$decode("/\u0117\"\"1\"3\u0118"),
          peg$decode("/\u0119\"\"1'3\u011A"),
          peg$decode("/\u011B\"\"1$3\u011C"),
          peg$decode("/\u011D\"\"1$3\u011E"),
          peg$decode("/\u011F\"\"1%3\u0120"),
          peg$decode("/\u0121\"\"1'3\u0122"),
          peg$decode("/\u0123\"\"1&3\u0124"),
          peg$decode("/\u0125\"\"1&3\u0126"),
          peg$decode("/\u0127\"\"1(3\u0128"),
          peg$decode("/\u0129\"\"1*3\u012A"),
          peg$decode("!7\x83+3$/\u012B\"\"1&3\u012C+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u012D\"\"1%3\u012E"),
          peg$decode("/\u012F\"\"1(3\u0130"),
          peg$decode("/\u0131\"\"1'3\u0132"),
          peg$decode("/\u0133\"\"1*3\u0134"),
          peg$decode("/\u0135\"\"1(3\u0136"),
          peg$decode("!7\x83+3$/\u0137\"\"1&3\u0138+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0139\"\"1$3\u013A"),
          peg$decode("/\u013B\"\"1&3\u013C"),
          peg$decode("/\u013D\"\"1(3\u013E"),
          peg$decode("/\u013F\"\"1$3\u0140"),
          peg$decode("/A\"\"1!3\u0141"),
          peg$decode("/\u0142\"\"1$3\u0143"),
          peg$decode("/\u0144\"\"1$3\u0145"),
          peg$decode("/\u0146\"\"1#3\u0147"),
          peg$decode("/\u0148\"\"1&3\u0149"),
          peg$decode("/\u014A\"\"1&3\u014B"),
          peg$decode("/\u014C\"\"1)3\u014D"),
          peg$decode("/\u014E\"\"1&3\u014F"),
          peg$decode("!7\x83+3$/\u0150\"\"1'3\u0151+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0152\"\"1$3\u0153"),
          peg$decode("/\u0154\"\"1%3\u0155"),
          peg$decode("/\u0156\"\"1#3\u0157"),
          peg$decode("/\u0158\"\"1'3\u0159"),
          peg$decode("/\u015A\"\"1$3\u015B"),
          peg$decode("/\u015C\"\"1$3\u015D"),
          peg$decode("/\u015E\"\"1%3\u015F"),
          peg$decode("/\u0160\"\"1&3\u0161"),
          peg$decode("/\u0162\"\"1\"3\u0163"),
          peg$decode("/\u0164\"\"1&3\u0165"),
          peg$decode("/\u0166\"\"1%3\u0167"),
          peg$decode("/\u0168\"\"1)3\u0169"),
          peg$decode("/\u016A\"\"1\"3\u016B"),
          peg$decode("/\u016C\"\"1%3\u016D"),
          peg$decode("/\u016E\"\"1'3\u016F"),
          peg$decode("/\u0170\"\"1(3\u0171"),
          peg$decode("/\u0172\"\"1)3\u0173"),
          peg$decode("/\u0174\"\"1%3\u0175"),
          peg$decode("!7\x83+3$/\u0176\"\"1&3\u0177+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0178\"\"1'3\u0179"),
          peg$decode("/\u017A\"\"1'3\u017B"),
          peg$decode("/\u017C\"\"1)3\u017D"),
          peg$decode("/\u017E\"\"1$3\u017F"),
          peg$decode("/\u0180\"\"1\"3\u0181"),
          peg$decode("/\u0182\"\"1&3\u0183"),
          peg$decode("/\u0184\"\"1$3\u0185"),
          peg$decode("/\u0186\"\"1#3\u0187"),
          peg$decode("/\u0188\"\"1$3\u0189"),
          peg$decode("/\u018A\"\"1$3\u018B"),
          peg$decode("/\u018C\"\"1%3\u018D"),
          peg$decode("/\u018E\"\"1%3\u018F"),
          peg$decode("/\u0190\"\"1#3\u0191"),
          peg$decode("/\u0192\"\"1'3\u0193"),
          peg$decode("/\u0194\"\"1\"3\u0195"),
          peg$decode("/\u0196\"\"1#3\u0197"),
          peg$decode("/\u0198\"\"1'3\u0199"),
          peg$decode("/\u019A\"\"1$3\u019B"),
          peg$decode("/\u019C\"\"1&3\u019D"),
          peg$decode("/\u019E\"\"1\"3\u019F"),
          peg$decode("/\u01A0\"\"1&3\u01A1"),
          peg$decode("/\u01A2\"\"1\"3\u01A3"),
          peg$decode("/\u01A4\"\"1\"3\u01A5"),
          peg$decode("/\u01A6\"\"1%3\u01A7"),
          peg$decode("/\u01A8\"\"1%3\u01A9"),
          peg$decode("/\u01AA\"\"1$3\u01AB"),
          peg$decode("/\u01AC\"\"1&3\u01AD"),
          peg$decode("/\u01AE\"\"1'3\u01AF"),
          peg$decode("/\u01B0\"\"1%3\u01B1"),
          peg$decode("/\u01B2\"\"1%3\u01B3"),
          peg$decode("/\u01B4\"\"1*3\u01B5"),
          peg$decode("/\u01B6\"\"1&3\u01B7"),
          peg$decode("/\u01B8\"\"1'3\u01B9"),
          peg$decode("/\u01BA\"\"1'3\u01BB"),
          peg$decode("/\u01BC\"\"1&3\u01BD"),
          peg$decode("!7\x83+3$/\u01BE\"\"1'3\u01BF+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01C0\"\"1(3\u01C1"),
          peg$decode("/\u01C2\"\"1(3\u01C3"),
          peg$decode("/\u01C4\"\"1#3\u01C5"),
          peg$decode("/\u01C6\"\"1)3\u01C7"),
          peg$decode("!7\x83+3$/\u01C8\"\"1&3\u01C9+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01CA\"\"1#3\u01CB"),
          peg$decode("/\u01CC\"\"1'3\u01CD"),
          peg$decode("/\u01CE\"\"1&3\u01CF"),
          peg$decode("/\u01D0\"\"1%3\u01D1"),
          peg$decode("/\u01D2\"\"1$3\u01D3"),
          peg$decode("/\u01D4\"\"1)3\u01D5"),
          peg$decode("/\u01D6\"\"1$3\u01D7"),
          peg$decode("/\u01D8\"\"1\"3\u01D9"),
          peg$decode("/\u01DA\"\"1+3\u01DB"),
          peg$decode("/\u01DC\"\"1'3\u01DD"),
          peg$decode("/\u01DE\"\"1$3\u01DF"),
          peg$decode("/\u01E0\"\"1%3\u01E1"),
          peg$decode("/\u01E2\"\"1&3\u01E3"),
          peg$decode("!7\x83+3$/\u01E4\"\"1&3\u01E5+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01E6\"\"1%3\u01E7"),
          peg$decode("/\u01E8\"\"1&3\u01E9"),
          peg$decode("/\u01EA\"\"1&3\u01EB"),
          peg$decode("/\u01EC\"\"1$3\u01ED"),
          peg$decode("/\u01EE\"\"1'3\u01EF"),
          peg$decode("/\u01F0\"\"1$3\u01F1"),
          peg$decode("/\u01F2\"\"1%3\u01F3")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 250 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      //var unroll = options.util.makeUnroll(line, column, offset, SyntaxError)
      //var ast    = options.util.makeAST(line, column, offset, options)

      // Header/utility functions for grammar match bodies.
      //

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();