module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          null,
          function(x) { return { literal: x } },
          function(b) { return { bind: b } },
          function(t) { return { column: t[2], table: t[1] } },
          function(c) { return { column: c } },
          function(v) { return v[1] },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          function(limit) { return { type: 'Limit', value: limit } },
          { type: "other", description: "literal" },
          function(commas) { return filledArray(commas.length + 1, null); },
          function(elision, element) {
                  return optionalList(extractOptional(elision, 0)).concat(element);
                },
          function(first, rest) { return Array.prototype.concat.apply(first, rest); },
          function(elision) {
                return {
                  type: 'ListExpression',
                  elements: optionalList(extractOptional(elision, 0))
                }
              },
          function(elements) {
                return {
                  type: 'ListExpression',
                  elements: elements
                }
              },
          function(elements, elision) {
                return {
                  type: 'ListExpression',
                  elements: elements.concat(optionalList(extractOptional(elision, 0)))
                }
              },
          function(expression) { return expression; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function() {
                return { type: "Literal", value: parseFloat(text()) };
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "0x",
          { type: "literal", value: "0x", description: "\"0x\"" },
          function(digits) {
                return { type: "Literal", value: parseInt(digits, 16) };
               },
          { type: "any", description: "any character" },
          /^[A-Za-z_]/,
          { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          { type: "other", description: "identifier" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          void 0,
          function(name) { return name; },
          { type: "other", description: "number" },
          function(literal) {
                return literal;
              },
          { type: "other", description: "string" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          function(chars) {
                return { type: "Literal", value: chars.join("") };
              },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          function() { return text(); },
          function(sequence) { return sequence; },
          function() { return ""; },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          { type: "other", description: "comment" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "",
          function() { return { type: "Literal", value: null }; },
          function() { return { type: "Literal", value: true  }; },
          function() { return { type: "Literal", value: false }; },
          { type: "other", description: "reserved word" },
          { type: "other", description: "shift operator" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          function(first) { return buildLogicalExpression(first, [container]); },
          function(value, low, high) {
                // TODO: use negated
                return {
                    type: 'BetweenAndExpression',
                    value: value,
                    start: low,
                    stop:  high
                };
              },
          { type: "other", description: "relational operator" },
          { type: "other", description: "equality operator" },
          "===",
          { type: "literal", value: "===", description: "\"===\"" },
          "!==",
          { type: "literal", value: "!==", description: "\"!==\"" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\xA0",
          { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
          "\uFEFF",
          { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          { type: "other", description: "end of line" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\u2028",
          { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
          "\u2029",
          { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
          { type: "other", description: "postfix operator" },
          function(argument, operator) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'postfix'
                }
              },
          { type: "other", description: "prefix operator" },
          function(operator, argument) {
              return {
                type: 'UnaryExpression',
                operator: operator,
                argument: argument,
                fixity: 'prefix'
              }
            },
          "&",
          { type: "literal", value: "&", description: "\"&\"" },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "is not",
          { type: "literal", value: "IS NOT", description: "\"IS NOT\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          function(x) { return x[1] },
          /^[A-Za-z0-9_]/,
          { type: "class", value: "[A-Za-z0-9_]", description: "[A-Za-z0-9_]" },
          function(str) { return str.join('') },
          /^[A-Za-z0-9_:]/,
          { type: "class", value: "[A-Za-z0-9_:]", description: "[A-Za-z0-9_:]" },
          function(c) { return { column: c[2], graph_namespace: c[1] } },
          function(gcn) { return gcn[1] },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "false",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "true",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("7'"),
          peg$decode("! !7\x87+&$,#&7\x87\"\"\"  +\x8B$!7X+7$72+-%7Y+#%'#%$##  $\"#  \"#  *V \"!7X+K$72+A%7N+7%72+-%7Y+#%'%%$%#  $$#  $##  $\"#  \"#  *# \" \"+#%'\"%$\"#  \"#  "),
          peg$decode("!!7}+\u01E6$!7)+' 4!6#!! %*\u01CA \"!7\x8A+' 4!6$!! %*\u01B8 \"!!7\x87+7$7M+-%7\x88+#%'#%$##  $\"#  \"#  +' 4!6%!! %*\u0187 \"!7\x88+' 4!6&!! %*\u0175 \"!7\x81+-$7'+#%'\"%$\"#  \"#  *\u015A \"7(*\u0154 \"!7}+K$7X+A%7'+7%7}+-%7Y+#%'%%$%#  $$#  $##  $\"#  \"#  *\u011B \"!7\xA0+U$7X+K%7'+A%7\x96+7%7!+-%7Y+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  *\xD8 \"!7\x9F+\xCD$7'*# \" \"+\xBD% !!7\u0103+A$7'+7%7\xF6+-%7'+#%'$%$$#  $##  $\"#  \"#  +O$,L&!7\u0103+A$7'+7%7\xF6+-%7'+#%'$%$$#  $##  $\"#  \"#  \"\"\"  +R%!7\xB4+-$7'+#%'\"%$\"#  \"#  *# \" \"+-%7\xB5+#%'%%$%#  $$#  $##  $\"#  \"#  +#%'\"%$\"#  \"#  +' 4!6'!! %"),
          peg$decode("!7\xD9+7$7}+-%7w+#%'#%$##  $\"#  \"#  *# \"7w"),
          peg$decode("!7#+\x8D$ !!7}+A$7\x95+7%7}+-%7#+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7\x95+7%7}+-%7#+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("!7$+\x8D$ !!7}+A$7\xDF+7%7}+-%7$+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7\xDF+7%7}+-%7$+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("!7\xD5+<$7}+2%7<+(%4#6)#! %$##  $\"#  \"#  "),
          peg$decode("7&*# \"7%"),
          peg$decode("!7\x87+\u0156$7}+\u014C%7X+\u0142%!7\xB0*# \" \"+\xF2$ !!7'+s$ !!7}+7$7N+-%7'+#%'#%$##  $\"#  \"#  ,B&!7}+7$7N+-%7'+#%'#%$##  $\"#  \"#  \"+#%'\"%$\"#  \"#  +\x81$,~&!7'+s$ !!7}+7$7N+-%7'+#%'#%$##  $\"#  \"#  ,B&!7}+7$7N+-%7'+#%'#%$##  $\"#  \"#  \"+#%'\"%$\"#  \"#  \"\"\"  +#%'\"%$\"#  \"#  *8 \"!7}+-$7c+#%'\"%$\"#  \"#  *# \" \"+7%7}+-%7Y+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("87<*A \"7=*; \"7=*5 \"7\xDB*/ \"7\x8B*) \"7\x8C*# \"7\x8D9*\" 3*"),
          peg$decode("!7N+d$ !!7}+-$7N+#%'\"%$\"#  \"#  ,8&!7}+-$7N+#%'\"%$\"#  \"#  \"+(%4\"6+\"! %$\"#  \"#  "),
          peg$decode("!!!7*+-$7}+#%'\"%$\"#  \"#  *# \" \"+3$7-+)%4\"6,\"\"! %$\"#  \"#  +\xE3$ !!7}+l$7N+b%7}+X%!7*+-$7}+#%'\"%$\"#  \"#  *# \" \"+3%7-+)%4%6,%\"! %$%#  $$#  $##  $\"#  \"#  ,w&!7}+l$7N+b%7}+X%!7*+-$7}+#%'\"%$\"#  \"#  *# \" \"+3%7-+)%4%6,%\"! %$%#  $$#  $##  $\"#  \"#  \"+)%4\"6-\"\"! %$\"#  \"#  "),
          peg$decode("!7X+a$7}+W%!7*+-$7}+#%'\"%$\"#  \"#  *# \" \"+2%7Y+(%4$6.$!!%$$#  $##  $\"#  \"#  *\xD3 \"!7X+P$7}+F%7++<%7}+2%7Y+(%4%6/%!\"%$%#  $$#  $##  $\"#  \"#  *\x95 \"!7X+\x8A$7}+\x80%7++v%7}+l%7N+b%7}+X%!7*+-$7}+#%'\"%$\"#  \"#  *# \" \"+3%7Y+)%4(60(\"%!%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("7;*g \"7)*a \"7,*[ \"!7X+P$7}+F%7'+<%7}+2%7Y+(%4%61%!\"%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("02\"\"1!33"),
          peg$decode("04\"\"1!35"),
          peg$decode(".6\"\"2637*@ \"!7/+5$ !7.,#&7.\"+#%'\"%$\"#  \"#  "),
          peg$decode("/8\"\"1!39"),
          peg$decode("!0:\"\"1!3;*# \" \"+<$ !7.+&$,#&7.\"\"\"  +#%'\"%$\"#  \"#  "),
          peg$decode("!71+-$72+#%'\"%$\"#  \"#  "),
          peg$decode("!70+Y$.<\"\"2<3=+I% !7.,#&7.\"+7%73*# \" \"+'%4$6>$ %$$#  $##  $\"#  \"#  *\x86 \"!.<\"\"2<3=+P$ !7.+&$,#&7.\"\"\"  +7%73*# \" \"+'%4#6># %$##  $\"#  \"#  *B \"!70+7$73*# \" \"+'%4\"6>\" %$\"#  \"#  "),
          peg$decode("0?\"\"1!3@"),
          peg$decode("!/A\"\"1\"3B+G$! !75+&$,#&75\"\"\"  +! (%+(%4\"6C\"! %$\"#  \"#  "),
          peg$decode("-\"\"1!3D"),
          peg$decode("0E\"\"1!3F"),
          peg$decode("78*) \"02\"\"1!33"),
          peg$decode("8!78+;$ !79,#&79\"+)%4\"6H\"\"! %$\"#  \"#  9*\" 3G"),
          peg$decode("!!87m9*$$\"\" I\"#  +2$7:+(%4\"6J\"! %$\"#  \"#  "),
          peg$decode("8!76+F$!878*# \"7.9*$$\"\" I\"#  +(%4\"6L\"!!%$\"#  \"#  *Q \"!74+F$!878*# \"7.9*$$\"\" I\"#  +(%4\"6L\"!!%$\"#  \"#  9*\" 3K"),
          peg$decode("8!.N\"\"2N3O+J$ !7?,#&7?\"+8%.N\"\"2N3O+(%4#6P#!!%$##  $\"#  \"#  *[ \"!.Q\"\"2Q3R+J$ !7@,#&7@\"+8%.Q\"\"2Q3R+(%4#6P#!!%$##  $\"#  \"#  9*\" 3M"),
          peg$decode(".S\"\"2S3T"),
          peg$decode("!!8.N\"\"2N3O*) \"7>*# \"7{9*$$\"\" I\"#  +1$77+'%4\"6U\" %$\"#  \"#  *I \"!.S\"\"2S3T+2$7B+(%4\"6V\"! %$\"#  \"#  *# \"7A"),
          peg$decode("!!8.Q\"\"2Q3R*) \"7>*# \"7{9*$$\"\" I\"#  +1$77+'%4\"6U\" %$\"#  \"#  *C \"!7>+2$7B+(%4\"6V\"! %$\"#  \"#  *# \"7A"),
          peg$decode("!7>+1$7|+'%4\"6W\" %$\"#  \"#  "),
          peg$decode("7C*\\ \"!.6\"\"2637+?$!87.9*$$\"\" I\"#  +'%4\"6X\" %$\"#  \"#  *) \"7G*# \"7H"),
          peg$decode("7D*# \"7E"),
          peg$decode(".Q\"\"2Q3R*\xB9 \".N\"\"2N3O*\xAD \"7>*\xA7 \"!.Y\"\"2Y3Z+& 4!6[! %*\x90 \"!.\\\"\"2\\3]+& 4!6^! %*y \"!._\"\"2_3`+& 4!6a! %*b \"!.b\"\"2b3c+& 4!6d! %*K \"!.e\"\"2e3f+& 4!6g! %*4 \"!.h\"\"2h3i+& 4!6j! %"),
          peg$decode("!!87F*# \"7{9*$$\"\" I\"#  +1$77+'%4\"6U\" %$\"#  \"#  "),
          peg$decode("7D*; \"7.*5 \".k\"\"2k3l*) \".m\"\"2m3n"),
          peg$decode("!.k\"\"2k3l+M$!!75+-$75+#%'\"%$\"#  \"#  +! (%+(%4\"6o\"! %$\"#  \"#  "),
          peg$decode("!.m\"\"2m3n+a$!!75+A$75+7%75+-%75+#%'$%$$#  $##  $\"#  \"#  +! (%+(%4\"6o\"! %$\"#  \"#  "),
          peg$decode("87K*# \"7J9*\" 3p"),
          peg$decode("!7Q+{$ !!!87{9*$$\"\" I\"#  +-$77+#%'\"%$\"#  \"#  ,F&!!87{9*$$\"\" I\"#  +-$77+#%'\"%$\"#  \"#  \"+#%'\"%$\"#  \"#  "),
          peg$decode("!7f+\x85$ !!!87g9*$$\"\" I\"#  +-$77+#%'\"%$\"#  \"#  ,F&!!87g9*$$\"\" I\"#  +-$77+#%'\"%$\"#  \"#  \"+-%7g+#%'#%$##  $\"#  \"#  "),
          peg$decode("!7f+\x91$ !!!87g*# \"7{9*$$\"\" I\"#  +-$77+#%'\"%$\"#  \"#  ,L&!!87g*# \"7{9*$$\"\" I\"#  +-$77+#%'\"%$\"#  \"#  \"+-%7g+#%'#%$##  $\"#  \"#  "),
          peg$decode(".<\"\"2<3="),
          peg$decode(".q\"\"2q3r"),
          peg$decode(".s\"\"2s3t"),
          peg$decode(".u\"\"2u3v"),
          peg$decode(".w\"\"2w3x"),
          peg$decode(".y\"\"2y3z"),
          peg$decode(".{\"\"2{3|"),
          peg$decode(".}\"\"2}3~"),
          peg$decode(".\"\"23\x80"),
          peg$decode(".\x81\"\"2\x813\x82"),
          peg$decode(".\x83\"\"2\x833\x84"),
          peg$decode(".\x85\"\"2\x853\x86"),
          peg$decode(".\x87\"\"2\x873\x88"),
          peg$decode(".\x89\"\"2\x893\x8A"),
          peg$decode(".\x8B\"\"2\x8B3\x8C"),
          peg$decode(".\x8D\"\"2\x8D3\x8E"),
          peg$decode(".\x8F\"\"2\x8F3\x90"),
          peg$decode(".\x91\"\"2\x913\x92"),
          peg$decode(".\x93\"\"2\x933\x94"),
          peg$decode(".\x95\"\"2\x953\x96"),
          peg$decode(".\x97\"\"2\x973\x98"),
          peg$decode(".\x99\"\"2\x993\x9A"),
          peg$decode(".}\"\"2}3~"),
          peg$decode(".\x9B\"\"2\x9B3\x9C"),
          peg$decode(" !0\x9D\"\"1!3\x9E,)&0\x9D\"\"1!3\x9E\""),
          peg$decode(".\x9F\"\"2\x9F3\xA0"),
          peg$decode(".\xA1\"\"2\xA13\xA2"),
          peg$decode("! !-\"\"1!3D,(&-\"\"1!3D\"+A$!8.\xA1\"\"2\xA13\xA29+$$\"# I\"\"  +#%'\"%$\"#  \"#  "),
          peg$decode(" \xA3"),
          peg$decode("7\x95*\x9B \"7\x96*\x95 \"7\x9B*\x8F \"7\x9F*\x89 \"7\xA0*\x83 \"7\xB4*} \"7\xB5*w \"7\xB6*q \"7\xB9*k \"7\xBF*e \"7\xC3*_ \"7\xC6*Y \"7\xCF*S \"7\xD0*M \"7\xD4*G \"7\xD9*A \"7\xDA*; \"7\xDF*5 \"7\xF6*/ \"7\xF7*) \"7\u0103*# \"7\u0104"),
          peg$decode("!7\xDB+& 4!6\xA4! %"),
          peg$decode("!7\xFA+& 4!6\xA5! %*. \"!7\xBC+& 4!6\xA6! %"),
          peg$decode("87j*) \"7k*# \"7l9*\" 3\xA7"),
          peg$decode("7S*# \"7R"),
          peg$decode("!7\x83+\x8D$ !!7}+A$7n+7%7}+-%7\x83+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7n+7%7}+-%7\x83+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("8.\xA9\"\"2\xA93\xAA*) \".\xAB\"\"2\xAB3\xAC9*\" 3\xA8"),
          peg$decode("!7o+\x8D$ !!7}+A$7p+7%7}+-%7o+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7p+7%7}+-%7o+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("!7q+K$7}+A%7\xCF+7%7}+-%7'+#%'%%$%#  $$#  $##  $\"#  \"#  *m \"!7q+7$7}+-%7\xD0+#%'#%$##  $\"#  \"#  *H \"!7q+=$7}+3%7\xDA+)%4#6(#\"\" %$##  $\"#  \"#  "),
          peg$decode("!7r+K$7}+A%7\xC6+7%7}+-%7'+#%'%%$%#  $$#  $##  $\"#  \"#  *\xE6 \"!7-+\xDB$7}+\xD1%7\xD9*# \" \"+\xC1%7}+\xB7%7\xC6+\xAD%7}+\xA3%7X+\x99% !!7-+7$7N+-%7}+#%'#%$##  $\"#  \"#  +E$,B&!7-+7$7N+-%7}+#%'#%$##  $\"#  \"#  \"\"\"  *# \" \"+<%7}+2%7Y+(%4*6\xAD*!)%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7s+\x8A$7}+\x80%7\xD9*# \" \"+p%7\x9C+f%7}+\\%7s+R%7}+H%7\x95+>%7}+4%7s+*%4*6\xAE*#)$ %$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *# \"7s"),
          peg$decode("!7t+l$!7}+Q$7\xD9*# \" \"+A%7\xD4+7%7}+-%7q+#%'%%$%#  $$#  $##  $\"#  \"#  +)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("87]*\x87 \"7^*\x81 \"!!7[+;$!87[9*$$\"\" I\"#  +#%'\"%$\"#  \"#  +! (%*R \"!!7\\+;$!87\\9*$$\"\" I\"#  +#%'\"%$\"#  \"#  +! (%*# \"7\xC69*\" 3\xAF"),
          peg$decode("!7q+\x8D$ !!7}+A$7v+7%7}+-%7q+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7v+7%7}+-%7q+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("!7w+\x8D$ !!7}+A$7y+7%7}+-%7w+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7y+7%7}+-%7w+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("8.\xB1\"\"2\xB13\xB2*M \".\xB3\"\"2\xB33\xB4*A \".\x95\"\"2\x953\x96*5 \".\x97\"\"2\x973\x98*) \".\x99\"\"2\x993\x9A9*\" 3\xB0"),
          peg$decode("8.\xB6\"\"2\xB63\xB7*Y \".\xB8\"\"2\xB83\xB9*M \".\xBA\"\"2\xBA3\xBB*A \".\xBC\"\"2\xBC3\xBD*5 \".\xBE\"\"2\xBE3\xBF*) \".\xC0\"\"2\xC03\xC19*\" 3\xB5"),
          peg$decode("80\xC3\"\"1!3\xC49*\" 3\xC2"),
          peg$decode("8.\x9B\"\"2\x9B3\x9C*M \".\xC6\"\"2\xC63\xC7*A \".\xC8\"\"2\xC83\xC9*5 \".\xCA\"\"2\xCA3\xCB*) \".\xCC\"\"2\xCC3\xCD9*\" 3\xC5"),
          peg$decode(" !7z*) \"7|*# \"7I,/&7z*) \"7|*# \"7I\""),
          peg$decode(" !7z*# \"7L,)&7z*# \"7L\""),
          peg$decode("87\xD0*# \"7\xDA9*\" 3\xCE"),
          peg$decode("!7-+=$7}+3%7+)%4#6\xCF#\"\" %$##  $\"#  \"#  *# \"7-"),
          peg$decode("87R*/ \"7S*) \"7W*# \"7\xD99*\" 3\xD0"),
          peg$decode("7\x80*H \"!7\x81+=$7}+3%7\x82+)%4#6\xD1#\"\" %$##  $\"#  \"#  "),
          peg$decode("!7\x82+\x8D$ !!7}+A$7\x84+7%7}+-%7\x82+#%'$%$$#  $##  $\"#  \"#  ,L&!7}+A$7\x84+7%7}+-%7\x82+#%'$%$$#  $##  $\"#  \"#  \"+)%4\"6(\"\"! %$\"#  \"#  "),
          peg$decode("7T*) \"7U*# \"7V"),
          peg$decode("!!7}+\u0147$7Z*\u0137 \"7T*\u0131 \"7U*\u012B \"7V*\u0125 \"7S*\u011F \"7R*\u0119 \".\xA9\"\"2\xA93\xAA*\u010D \".\xAB\"\"2\xAB3\xAC*\u0101 \".\xD2\"\"2\xD23\xD3*\xF5 \".\xD4\"\"2\xD43\xD5*\xE9 \".\x8F\"\"2\x8F3\x90*\xDD \".\x91\"\"2\x913\x92*\xD1 \".\x8B\"\"2\x8B3\x8C*\xC5 \".\x8D\"\"2\x8D3\x8E*\xB9 \".\x93\"\"2\x933\x94*\xAD \".\x95\"\"2\x953\x96*\xA1 \".\x97\"\"2\x973\x98*\x95 \".\x99\"\"2\x993\x9A*\x89 \"/\xD6\"\"1\"3\xD7*} \"/\xD8\"\"1&3\xD9*q \"/\xDA\"\"1\"3\xDB*e \"/\xDC\"\"1$3\xDD*Y \"/\xDE\"\"1$3\xDF*M \"/\xE0\"\"1%3\xE1*A \"/\xE2\"\"1&3\xE3*5 \"/\xE4\"\"1#3\xE5*) \"/\xE6\"\"1\"3\xE7+#%'\"%$\"#  \"#  +' 4!6\xE8!! %"),
          peg$decode("!!7}+\x93$/\xD6\"\"1\"3\xD7*} \"/\xD8\"\"1&3\xD9*q \"/\xDA\"\"1\"3\xDB*e \"/\xDC\"\"1$3\xDD*Y \"/\xDE\"\"1$3\xDF*M \"/\xE0\"\"1%3\xE1*A \"/\xE2\"\"1&3\xE3*5 \"/\xE4\"\"1#3\xE5*) \"/\xE6\"\"1\"3\xE7+#%'\"%$\"#  \"#  +' 4!6\xE8!! %"),
          peg$decode("! !0\xE9\"\"1!3\xEA+,$,)&0\xE9\"\"1!3\xEA\"\"\"  +' 4!6\xEB!! %"),
          peg$decode("! !0\xEC\"\"1!3\xED+,$,)&0\xEC\"\"1!3\xED\"\"\"  +' 4!6\xEB!! %"),
          peg$decode("!!!7\x87+7$7O+-%7\x88+#%'#%$##  $\"#  \"#  +' 4!6\xEE!! %*/ \"!7\x88+' 4!6&!! %+' 4!6\xEF!! %"),
          peg$decode("!.\xF0\"\"2\xF03\xF1+-$7\x87+#%'\"%$\"#  \"#  "),
          peg$decode(".\xF2\"\"2\xF23\xF3"),
          peg$decode(".\xF2\"\"2\xF23\xF3"),
          peg$decode(".\xF2\"\"2\xF23\xF3"),
          peg$decode("/\xF4\"\"1%3\xF5"),
          peg$decode("/\xF6\"\"1&3\xF7"),
          peg$decode("/\xF8\"\"1#3\xF9"),
          peg$decode("/\xFA\"\"1%3\xFB"),
          peg$decode("/\xFC\"\"1#3\xFD"),
          peg$decode("/\xFE\"\"1%3\xFF"),
          peg$decode("/\u0100\"\"1'3\u0101"),
          peg$decode("/\xE4\"\"1#3\xE5"),
          peg$decode("/\u0102\"\"1\"3\u0103"),
          peg$decode("/\u0104\"\"1#3\u0105"),
          peg$decode("/\u0106\"\"1&3\u0107"),
          peg$decode("/\u0108\"\"1-3\u0109"),
          peg$decode("/\u010A\"\"1&3\u010B"),
          peg$decode("/\u010C\"\"1%3\u010D"),
          peg$decode("/\u010E\"\"1'3\u010F"),
          peg$decode("/\u0110\"\"1\"3\u0111"),
          peg$decode("/\u0112\"\"1'3\u0113"),
          peg$decode("/\u0114\"\"1$3\u0115"),
          peg$decode("/\u0116\"\"1$3\u0117"),
          peg$decode("/\u0118\"\"1%3\u0119"),
          peg$decode("/\u011A\"\"1'3\u011B"),
          peg$decode("/\u011C\"\"1&3\u011D"),
          peg$decode("/\u011E\"\"1&3\u011F"),
          peg$decode("/\u0120\"\"1(3\u0121"),
          peg$decode("/\u0122\"\"1*3\u0123"),
          peg$decode("!7}+3$/\u0124\"\"1&3\u0125+#%'\"%$\"#  \"#  "),
          peg$decode("/\u0126\"\"1%3\u0127"),
          peg$decode("/\u0128\"\"1(3\u0129"),
          peg$decode("/\u012A\"\"1'3\u012B"),
          peg$decode("/\u012C\"\"1*3\u012D"),
          peg$decode("/\u012E\"\"1(3\u012F"),
          peg$decode("!7}+3$/\u0130\"\"1&3\u0131+#%'\"%$\"#  \"#  "),
          peg$decode("/\u0132\"\"1$3\u0133"),
          peg$decode("/\u0134\"\"1&3\u0135"),
          peg$decode("/\u0136\"\"1(3\u0137"),
          peg$decode("/\u0138\"\"1$3\u0139"),
          peg$decode("/8\"\"1!3\u013A"),
          peg$decode("/\u013B\"\"1$3\u013C"),
          peg$decode("/\u013D\"\"1$3\u013E"),
          peg$decode("/\u013F\"\"1#3\u0140"),
          peg$decode("/\u0141\"\"1&3\u0142"),
          peg$decode("/\u0143\"\"1&3\u0144"),
          peg$decode("/\u0145\"\"1)3\u0146"),
          peg$decode("/\u0147\"\"1&3\u0148"),
          peg$decode("!7}+3$/\u0149\"\"1'3\u014A+#%'\"%$\"#  \"#  "),
          peg$decode("/\u014B\"\"1$3\u014C"),
          peg$decode("/\u014D\"\"1%3\u014E"),
          peg$decode("/\u014F\"\"1#3\u0150"),
          peg$decode("/\u0151\"\"1'3\u0152"),
          peg$decode("/\u0153\"\"1$3\u0154"),
          peg$decode("/\xDE\"\"1$3\xDF"),
          peg$decode("/\u0155\"\"1%3\u0156"),
          peg$decode("/\u0157\"\"1&3\u0158"),
          peg$decode("/\u0159\"\"1\"3\u015A"),
          peg$decode("/\u015B\"\"1&3\u015C"),
          peg$decode("/\u015D\"\"1)3\u015E"),
          peg$decode("/\xDA\"\"1\"3\xDB"),
          peg$decode("/\u015F\"\"1%3\u0160"),
          peg$decode("/\u0161\"\"1'3\u0162"),
          peg$decode("/\u0163\"\"1)3\u0164"),
          peg$decode("/\u0165\"\"1%3\u0166"),
          peg$decode("!7}+3$/\u0167\"\"1&3\u0168+#%'\"%$\"#  \"#  "),
          peg$decode("/\u0169\"\"1'3\u016A"),
          peg$decode("/\u016B\"\"1)3\u016C"),
          peg$decode("/\u016D\"\"1$3\u016E"),
          peg$decode("/\xD6\"\"1\"3\xD7"),
          peg$decode("/\u016F\"\"1&3\u0170"),
          peg$decode("/\u0171\"\"1$3\u0172"),
          peg$decode("/\u0173\"\"1#3\u0174"),
          peg$decode("/\u0175\"\"1$3\u0176"),
          peg$decode("/\xDC\"\"1$3\xDD"),
          peg$decode("/\u0177\"\"1%3\u0178"),
          peg$decode("/\xE0\"\"1%3\xE1"),
          peg$decode("/\u0179\"\"1'3\u017A"),
          peg$decode("/\u017B\"\"1\"3\u017C"),
          peg$decode("/\u017D\"\"1#3\u017E"),
          peg$decode("/\u017F\"\"1'3\u0180"),
          peg$decode("/\u0181\"\"1$3\u0182"),
          peg$decode("/\u0183\"\"1\"3\u0184"),
          peg$decode("/\u0185\"\"1&3\u0186"),
          peg$decode("/\u0187\"\"1\"3\u0188"),
          peg$decode("/\xE6\"\"1\"3\xE7"),
          peg$decode("/\u0189\"\"1%3\u018A"),
          peg$decode("/\u018B\"\"1%3\u018C"),
          peg$decode("/\u018D\"\"1$3\u018E"),
          peg$decode("/\u018F\"\"1&3\u0190"),
          peg$decode("/\u0191\"\"1'3\u0192"),
          peg$decode("/\u0193\"\"1%3\u0194"),
          peg$decode("/\u0195\"\"1%3\u0196"),
          peg$decode("/\u0197\"\"1*3\u0198"),
          peg$decode("/\xE2\"\"1&3\xE3"),
          peg$decode("/\u0199\"\"1'3\u019A"),
          peg$decode("/\u019B\"\"1'3\u019C"),
          peg$decode("/\u019D\"\"1&3\u019E"),
          peg$decode("!7}+3$/\u019F\"\"1'3\u01A0+#%'\"%$\"#  \"#  "),
          peg$decode("/\u01A1\"\"1(3\u01A2"),
          peg$decode("/\u01A3\"\"1(3\u01A4"),
          peg$decode("/\u01A5\"\"1#3\u01A6"),
          peg$decode("/\u01A7\"\"1)3\u01A8"),
          peg$decode("!7}+3$/\u01A9\"\"1&3\u01AA+#%'\"%$\"#  \"#  "),
          peg$decode("/\u01AB\"\"1#3\u01AC"),
          peg$decode("/\u01AD\"\"1%3\u01AE"),
          peg$decode("/\u01AF\"\"1$3\u01B0"),
          peg$decode("/\u01B1\"\"1)3\u01B2"),
          peg$decode("/\u01B3\"\"1$3\u01B4"),
          peg$decode("/\u01B5\"\"1\"3\u01B6"),
          peg$decode("/\u01B7\"\"1+3\u01B8"),
          peg$decode("/\u01B9\"\"1'3\u01BA"),
          peg$decode("/\u01BB\"\"1$3\u01BC"),
          peg$decode("/\u01BD\"\"1%3\u01BE"),
          peg$decode("/\u01BF\"\"1&3\u01C0"),
          peg$decode("!7}+3$/\u01C1\"\"1&3\u01C2+#%'\"%$\"#  \"#  "),
          peg$decode("/\u01C3\"\"1%3\u01C4"),
          peg$decode("/\u01C5\"\"1&3\u01C6"),
          peg$decode("/\u01C7\"\"1&3\u01C8"),
          peg$decode("/\u01C9\"\"1$3\u01CA"),
          peg$decode("/\u01CB\"\"1'3\u01CC"),
          peg$decode("/\u01CD\"\"1$3\u01CE"),
          peg$decode("/\u01CF\"\"1%3\u01D0")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 229 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      //var unroll = options.util.makeUnroll(line, column, offset, SyntaxError)
      //var ast    = options.util.makeAST(line, column, offset, options)

      // Header/utility functions for grammar match bodies.
      //

      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function buildLogicalExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "LogicalExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();