module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          null,
          function(x) { return { literal: x } },
          function(b) { return { bind: b } },
          function(c) { return { column: c } },
          function(t) { return { column: t[2], table: t[1] } },
          function(v) { return v[1] },
          function(e) { return e[1]; },
          function(digits) { var x = flatstr(digits);
              if (x.indexOf('.') >= 0) {
                return parseFloat(x);
              }
              return parseInt(x);
            },
          function(cx) { var acc = [];
                                  for (var i = 0; i < cx.length; i++) {
                                    acc[i] = cx[i][2];
                                  }
                                  return acc;
                                },
          function(j) { return j ? j[1] : [] },
          function(e) { return e ? e[1] : [] },
          function(d, c, f, w) { c[1].unshift(c[0]);
              var res = { results: c[1] };
              res = put_if_not_null(res, "distinct", nonempty(flatstr(d)));
              res = put_if_not_null(res, "from", nonempty(f));
              res = put_if_not_null(res, "where", nonempty(w));
              // res = put_if_not_null(res, "group_by", nonempty(g));
              return res;
            },
          function(a) { return { alias: a[2] } },
          function(c) { return merge(c[1], c[0]) },
          function(c) { return { table: c[0],
                                   column: '*' } },
          function() { return { column: '*' } },
          function(r) { return r[1] },
          function(s) { var acc = [s[1]];
              var rest = s[2];
              for (var i = 0; rest != null && i < rest.length; i++) {
                acc[acc.length] = merge(merge(rest[i][0], rest[i][2]), rest[i][3]);
              }
              return acc;
            },
          function(x) { return { database: x[0], table: x[2], alias: x[5] } },
          function(x) { return { database: x[0], table: x[2] } },
          function(x) { return { table: x[0], alias: x[3] } },
          function(x) { return { table: x } },
          function(t) { return merge(t[1], t[0]) },
          function(idx) { return { indexed_by: idx[3] } },
          function() { return { indexed_by: null } },
          function(s) { return merge(s[1], s[0]) },
          function(j) { return j[1] },
          function() { return "JOIN" },
          function(j) { return flatstr(j) },
          function(r) { return { join_op: r } },
          function(r) { return { join_constraint: nonempty(r) } },
          function(o) { return { compound_operator: flatstr(o) } },
          function(d) { return { database: d[0] } },
          function(r) { return merge(r[1], r[0]) },
          function(t) { return { table: t[0] } },
          function(x) { return { graph_namespace: x.graph_namespace, column: x.column } },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          { type: "any", description: "any character" },
          void 0,
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"]/,
          { type: "class", value: "[^\"]", description: "[^\"]" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          "",
          /^[ \t\n\r]/,
          { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          function(x) { return x[1] },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          "&",
          { type: "literal", value: "&", description: "\"&\"" },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "is not",
          { type: "literal", value: "IS NOT", description: "\"IS NOT\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[A-Za-z0-9_]/,
          { type: "class", value: "[A-Za-z0-9_]", description: "[A-Za-z0-9_]" },
          function(str) { return str.join('') },
          function(c) { return { column: c[2], graph_namespace: c[1] } },
          function(gcn) { return gcn[1] },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          "e",
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("7$"),
          peg$decode("! !7J+&$,#&7J\"\"\"  +\x8B$!79+7$7\"+-%7:+#%'#%$##  $\"#  \"#  *V \"!79+K$7\"+A%73+7%7\"+-%7:+#%'%%$%#  $$#  $##  $\"#  \"#  *# \" \"+#%'\"%$\"#  \"#  "),
          peg$decode("!78*# \"77*# \" \"+-$7'+#%'\"%$\"#  \"#  "),
          peg$decode("!!7D+\u01E6$!7&+' 4!6#!! %*\u01CA \"!7L+' 4!6$!! %*\u01B8 \"!7K+' 4!6%!! %*\u01A6 \"!!7J+7$72+-%7K+#%'#%$##  $\"#  \"#  +' 4!6&!! %*\u0175 \"!7F+-$7$+#%'\"%$\"#  \"#  *\u015A \"7%*\u0154 \"!7D+K$79+A%7$+7%7D+-%7:+#%'%%$%#  $$#  $##  $\"#  \"#  *\u011B \"!7c+U$79+K%7$+A%7Y+7%7!+-%7:+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  *\xD8 \"!7b+\xCD$7$*# \" \"+\xBD% !!7\xC4+A$7$+7%7\xB8+-%7$+#%'$%$$#  $##  $\"#  \"#  +O$,L&!7\xC4+A$7$+7%7\xB8+-%7$+#%'$%$$#  $##  $\"#  \"#  \"\"\"  +R%!7w+-$7$+#%'\"%$\"#  \"#  *# \" \"+-%7x+#%'%%$%#  $$#  $##  $\"#  \"#  +#%'\"%$\"#  \"#  +' 4!6'!! %"),
          peg$decode("!!7D+\u019D$!7#+7$7G+-%7$+#%'#%$##  $\"#  \"#  *\u016E \"!7#+7$7e+-%7J+#%'#%$##  $\"#  \"#  *\u0149 \"!7#+~$7\x9B*# \" \"+n%7\x96*/ \"7\x82*) \"7\xAA*# \"7\x98+R%7$+H%!7y+-$7$+#%'\"%$\"#  \"#  *# \" \"+#%'%%$%#  $$#  $##  $\"#  \"#  *\xDD \"!7#+N$7\x92*> \"7\x9C*8 \"!7\x9B+-$7\x9D+#%'\"%$\"#  \"#  +#%'\"%$\"#  \"#  *\xA1 \"!7#+G$7\x91+=%7\x9B*# \" \"+-%7$+#%'$%$$#  $##  $\"#  \"#  *l \"!7#+[$7\x9B*# \" \"+K%7_+A%7$+7%7X+-%7$+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  *# \"7#+#%'\"%$\"#  \"#  +' 4!6(!! %"),
          peg$decode("!7J+\u0156$7D+\u014C%79+\u0142%!7s*# \" \"+\xF2$ !!7$+s$ !!7D+7$73+-%7$+#%'#%$##  $\"#  \"#  ,B&!7D+7$73+-%7$+#%'#%$##  $\"#  \"#  \"+#%'\"%$\"#  \"#  +\x81$,~&!7$+s$ !!7D+7$73+-%7$+#%'#%$##  $\"#  \"#  ,B&!7D+7$73+-%7$+#%'#%$##  $\"#  \"#  \"+#%'\"%$\"#  \"#  \"\"\"  +#%'\"%$\"#  \"#  *8 \"!7D+-$7;+#%'\"%$\"#  \"#  *# \" \"+7%7D+-%7:+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("7'*A \"7A*; \"7A*5 \"7\x9D*/ \"7M*) \"7N*# \"7O"),
          peg$decode("!!! !7H+&$,#&7H\"\"\"  +W$!72+<$ !7H+&$,#&7H\"\"\"  +#%'\"%$\"#  \"#  *# \" \"+#%'\"%$\"#  \"#  *G \"!72+<$ !7H+&$,#&7H\"\"\"  +#%'\"%$\"#  \"#  +m$!7u+R$78*# \"77*# \" \"+<% !7H+&$,#&7H\"\"\"  +#%'#%$##  $\"#  \"#  *# \" \"+#%'\"%$\"#  \"#  +' 4!6)!! %"),
          peg$decode("!7\xB3+\u0114$7s*# \"7U*# \" \"+\xFE%!7)+$! !!7D+7$73+-%7)+#%'#%$##  $\"#  \"#  ,B&!7D+7$73+-%7)+#%'#%$##  $\"#  \"#  \"+' 4!6*!! %+#%'\"%$\"#  \"#  +\x8D%!!7\x81+-$7*+#%'\"%$\"#  \"#  *# \" \"+' 4!6+!! %+\\%!!7\xC5+-$7$+#%'\"%$\"#  \"#  *# \" \"+' 4!6,!! %++%4%6-%$#\"! %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!!7D+\xC1$!!70+^$!!7Y+7$7D+-%7J+#%'#%$##  $\"#  \"#  +' 4!6.!! %*# \" \"+#%'\"%$\"#  \"#  +' 4!6/!! %*_ \"!!7J+7$72+-%7;+#%'#%$##  $\"#  \"#  +' 4!60!! %*. \"!7;+& 4!61! %+#%'\"%$\"#  \"#  +' 4!62!! %"),
          peg$decode("!!7D+\x91$7++\x87% !!7,+A$7D+7%7++-%7-+#%'$%$$#  $##  $\"#  \"#  ,L&!7,+A$7D+7%7++-%7-+#%'$%$$#  $##  $\"#  \"#  \"+#%'#%$##  $\"#  \"#  +' 4!63!! %"),
          peg$decode("!!7J+U$72+K%7J+A%7Y+7%7E+-%7J+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  +' 4!64!! %*\u019F \"!!7J+7$72+-%7J+#%'#%$##  $\"#  \"#  +' 4!65!! %*\u016E \"!!7J+A$7Y+7%7E+-%7J+#%'$%$$#  $##  $\"#  \"#  +' 4!66!! %*\u0133 \"!7J+' 4!67!! %*\u0121 \"!!!!7/+^$!!7Y+7$7E+-%7J+#%'#%$##  $\"#  \"#  +' 4!6.!! %*# \" \"+#%'\"%$\"#  \"#  +' 4!68!! %+\x87$!!7\x8A+A$7`+7%7D+-%7J+#%'$%$$#  $##  $\"#  \"#  +' 4!69!! %*< \"!7\x9B+1$7\x8A+'%4\"6:\" %$\"#  \"#  *# \" \"+#%'\"%$\"#  \"#  +' 4!6;!! %*N \"!!79+7$7*+-%7:+#%'#%$##  $\"#  \"#  +' 4!6<!! %"),
          peg$decode("!!7D+1$73+'%4\"6=\" %$\"#  \"#  *\x81 \"!!7\x99*# \" \"+d$!7\x95+3$7\xA3*# \" \"+#%'\"%$\"#  \"#  *) \"7\x8C*# \"7k*# \" \"+-%7\x93+#%'#%$##  $\"#  \"#  +' 4!6>!! %+' 4!6?!! %"),
          peg$decode("!!7\xA0+-$7$+#%'\"%$\"#  \"#  *\xD9 \"!7\xBF+\xCE$7D+\xC4%79+\xBA%!7D+\x91$7K+\x87% !!7D+A$73+7%7D+-%7K+#%'$%$$#  $##  $\"#  \"#  ,L&!7D+A$73+7%7D+-%7K+#%'$%$$#  $##  $\"#  \"#  \"+#%'#%$##  $\"#  \"#  +7%7D+-%7:+#%'&%$&#  $%#  $$#  $##  $\"#  \"#  *# \" \"+' 4!6@!! %"),
          peg$decode("!!7\xBC+3$7U*# \" \"+#%'\"%$\"#  \"#  *) \"7\x8F*# \"7z+' 4!6A!! %"),
          peg$decode("!!!!7J+-$72+#%'\"%$\"#  \"#  +' 4!6B!! %*# \" \"+9$!7J+' 4!67!! %+#%'\"%$\"#  \"#  +' 4!6C!! %"),
          peg$decode("!!!!7J+-$72+#%'\"%$\"#  \"#  +' 4!6D!! %*# \" \"+9$!7K+' 4!6E!! %+#%'\"%$\"#  \"#  +' 4!6C!! %"),
          peg$decode("!76+L$ !7=+&$,#&7=\"\"\"  +3%7<*# \"7P+#%'#%$##  $\"#  \"#  *W \"!7>+L$ !7@+&$,#&7@\"\"\"  +3%7?*# \"7P+#%'#%$##  $\"#  \"#  "),
          peg$decode(".F\"\"2F3G"),
          peg$decode(".H\"\"2H3I"),
          peg$decode(".J\"\"2J3K"),
          peg$decode(".L\"\"2L3M"),
          peg$decode(".N\"\"2N3O"),
          peg$decode(".P\"\"2P3Q"),
          peg$decode(".R\"\"2R3S"),
          peg$decode(".T\"\"2T3U"),
          peg$decode(".V\"\"2V3W"),
          peg$decode(".X\"\"2X3Y"),
          peg$decode(".Z\"\"2Z3["),
          peg$decode(" !0\\\"\"1!3],)&0\\\"\"1!3]\""),
          peg$decode(".^\"\"2^3_"),
          peg$decode(".`\"\"2`3a"),
          peg$decode("! !-\"\"1!3b,(&-\"\"1!3b\"+A$!8.`\"\"2`3a9+$$\"# c\"\"  +#%'\"%$\"#  \"#  "),
          peg$decode("!.d\"\"2d3e+]$ !7B*) \"0f\"\"1!3g,/&7B*) \"0f\"\"1!3g\"+3%.d\"\"2d3e+#%'#%$##  $\"#  \"#  "),
          peg$decode("!.h\"\"2h3i+2$-\"\"1!3b+#%'\"%$\"#  \"#  "),
          peg$decode(" j"),
          peg$decode(" !0k\"\"1!3l,)&0k\"\"1!3l\""),
          peg$decode(" !0k\"\"1!3l+,$,)&0k\"\"1!3l\"\"\"  "),
          peg$decode("!!7D+W$.P\"\"2P3Q*A \".R\"\"2R3S*5 \".m\"\"2m3n*) \"/o\"\"1#3p+#%'\"%$\"#  \"#  +' 4!6q!! %"),
          peg$decode("!!7D+\u016B$.r\"\"2r3s*\u0155 \".X\"\"2X3Y*\u0149 \".t\"\"2t3u*\u013D \".v\"\"2v3w*\u0131 \".R\"\"2R3S*\u0125 \".P\"\"2P3Q*\u0119 \".x\"\"2x3y*\u010D \".z\"\"2z3{*\u0101 \".|\"\"2|3}*\xF5 \".~\"\"2~3*\xE9 \".\x80\"\"2\x803\x81*\xDD \".\x82\"\"2\x823\x83*\xD1 \".\x84\"\"2\x843\x85*\xC5 \".\x86\"\"2\x863\x87*\xB9 \".\x88\"\"2\x883\x89*\xAD \".\x8A\"\"2\x8A3\x8B*\xA1 \".\x8C\"\"2\x8C3\x8D*\x95 \".\x8E\"\"2\x8E3\x8F*\x89 \"/\x90\"\"1\"3\x91*} \"/\x92\"\"1&3\x93*q \"/\x94\"\"1\"3\x95*e \"/\x96\"\"1$3\x97*Y \"/\x98\"\"1$3\x99*M \"/\x9A\"\"1%3\x9B*A \"/\x9C\"\"1&3\x9D*5 \"/\x9E\"\"1#3\x9F*) \"/\xA0\"\"1\"3\xA1+#%'\"%$\"#  \"#  +' 4!6q!! %"),
          peg$decode("0\xA2\"\"1!3\xA3"),
          peg$decode(".\x88\"\"2\x883\x89"),
          peg$decode("! !0\xA4\"\"1!3\xA5+,$,)&0\xA4\"\"1!3\xA5\"\"\"  +' 4!6\xA6!! %"),
          peg$decode("!!7J+' 4!6%!! %*N \"!!7J+7$74+-%7J+#%'#%$##  $\"#  \"#  +' 4!6\xA7!! %+' 4!6\xA8!! %"),
          peg$decode("!.\xA9\"\"2\xA93\xAA+-$7J+#%'\"%$\"#  \"#  "),
          peg$decode(".\xAB\"\"2\xAB3\xAC"),
          peg$decode(".\xAB\"\"2\xAB3\xAC"),
          peg$decode(".\xAB\"\"2\xAB3\xAC"),
          peg$decode(" j"),
          peg$decode("!7E+3$/\xAD\"\"1%3\xAE+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xAF\"\"1&3\xB0+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xB1\"\"1#3\xB2+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xB3\"\"1%3\xB4+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xB5\"\"1#3\xB6+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xB7\"\"1%3\xB8+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xB9\"\"1'3\xBA+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x9E\"\"1#3\x9F+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xBB\"\"1\"3\xBC+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xBD\"\"1#3\xBE+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xBF\"\"1&3\xC0+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xC1\"\"1-3\xC2+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xC3\"\"1&3\xC4+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xC5\"\"1%3\xC6+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xC7\"\"1'3\xC8+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xC9\"\"1\"3\xCA+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xCB\"\"1'3\xCC+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xCD\"\"1$3\xCE+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xCF\"\"1$3\xD0+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xD1\"\"1%3\xD2+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xD3\"\"1'3\xD4+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xD5\"\"1&3\xD6+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xD7\"\"1&3\xD8+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xD9\"\"1(3\xDA+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xDB\"\"1*3\xDC+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\xDD\"\"1&3\xDE+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xDF\"\"1%3\xE0+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xE1\"\"1(3\xE2+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xE3\"\"1'3\xE4+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xE5\"\"1*3\xE6+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xE7\"\"1(3\xE8+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\xE9\"\"1&3\xEA+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xEB\"\"1$3\xEC+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xED\"\"1&3\xEE+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xEF\"\"1(3\xF0+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xF1\"\"1$3\xF2+#%'\"%$\"#  \"#  "),
          peg$decode("/\xF3\"\"1!3\xF4"),
          peg$decode("!7E+3$/\xF5\"\"1$3\xF6+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xF7\"\"1$3\xF8+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xF9\"\"1#3\xFA+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xFB\"\"1&3\xFC+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xFD\"\"1&3\xFE+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xFF\"\"1)3\u0100+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0101\"\"1&3\u0102+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\u0103\"\"1'3\u0104+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0105\"\"1$3\u0106+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0107\"\"1#3\u0108+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0109\"\"1'3\u010A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u010B\"\"1$3\u010C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x98\"\"1$3\x99+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u010D\"\"1%3\u010E+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u010F\"\"1&3\u0110+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0111\"\"1\"3\u0112+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0113\"\"1&3\u0114+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0115\"\"1)3\u0116+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x94\"\"1\"3\x95+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0117\"\"1%3\u0118+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0119\"\"1'3\u011A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u011B\"\"1)3\u011C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u011D\"\"1%3\u011E+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\u011F\"\"1&3\u0120+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0121\"\"1'3\u0122+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0123\"\"1)3\u0124+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0125\"\"1$3\u0126+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x90\"\"1\"3\x91+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0127\"\"1&3\u0128+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0129\"\"1$3\u012A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u012B\"\"1#3\u012C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u012D\"\"1$3\u012E+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x96\"\"1$3\x97+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u012F\"\"1%3\u0130+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x9A\"\"1%3\x9B+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0131\"\"1'3\u0132+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0133\"\"1\"3\u0134+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/o\"\"1#3p+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0135\"\"1'3\u0136+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0137\"\"1$3\u0138+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0139\"\"1\"3\u013A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u013B\"\"1&3\u013C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u013D\"\"1\"3\u013E+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\xA0\"\"1\"3\xA1+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u013F\"\"1%3\u0140+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0141\"\"1%3\u0142+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0143\"\"1$3\u0144+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0145\"\"1&3\u0146+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0147\"\"1'3\u0148+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0149\"\"1%3\u014A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u014B\"\"1%3\u014C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u014D\"\"1*3\u014E+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\x9C\"\"1&3\x9D+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u014F\"\"1'3\u0150+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0151\"\"1'3\u0152+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0153\"\"1&3\u0154+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\u0155\"\"1'3\u0156+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0157\"\"1(3\u0158+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0159\"\"1(3\u015A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u015B\"\"1#3\u015C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u015D\"\"1)3\u015E+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\u015F\"\"1&3\u0160+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0161\"\"1#3\u0162+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0163\"\"1%3\u0164+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0165\"\"1$3\u0166+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0167\"\"1)3\u0168+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0169\"\"1$3\u016A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u016B\"\"1\"3\u016C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u016D\"\"1+3\u016E+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u016F\"\"1'3\u0170+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0171\"\"1%3\u0172+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0173\"\"1&3\u0174+#%'\"%$\"#  \"#  "),
          peg$decode("!7D+3$/\u0175\"\"1&3\u0176+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0177\"\"1%3\u0178+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0179\"\"1&3\u017A+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u017B\"\"1&3\u017C+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u017D\"\"1$3\u017E+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u017F\"\"1'3\u0180+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0181\"\"1$3\u0182+#%'\"%$\"#  \"#  "),
          peg$decode("!7E+3$/\u0183\"\"1%3\u0184+#%'\"%$\"#  \"#  ")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      // Header/utility functions for sql.pegjs grammar match bodies.
      //
      function append(arr, x) {
        arr[arr.length] = x;
        return arr;
      }

      function flatten(x, rejectSpace, acc) {
        acc = acc || [];
        if (x == null || x == undefined) {
          if (!rejectSpace) {
            return append(acc, x);
          }
          return acc;
        }
        if (x.length == undefined) { // Just an object, not a string or array.
          return append(acc, x);
        }
        if (rejectSpace &&
          ((x.length == 0) ||
           (typeof(x) == "string" &&
            x.match(/^\s*$/)))) {
          return acc;
        }
        if (typeof(x) == "string") {
          return append(acc, x);
        }
        for (var i = 0; i < x.length; i++) {
          flatten(x[i], rejectSpace, acc);
        }
        return acc;
      }

      function flatstr(x, rejectSpace, joinChar) {
        return flatten(x, rejectSpace, []).join(joinChar || '');
      }

      function filter(arr, x) {
        var acc = [];
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] != x) {
            acc[acc.length] = arr[i];
          }
        }
        return acc;
      }

      function nonempty(x) {             // Ex: nonempty("") == null;
        if (x == null || x.length > 0) { // Ex: nonempty(null) == null;
          return x;
        }
        return null;
       }

      function put_if_not_null(m, key, val) {
        if (val) {
          m[key] = val;
        }
        return m;
      }
      function merge(src, dst) {
        for (var k in src) {
          dst[k] = src[k];
        }
        return dst;
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
