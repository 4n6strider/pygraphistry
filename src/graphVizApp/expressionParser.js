module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "type name" },
          { type: "other", description: "type" },
          peg$FAILED,
          [],
          null,
          { type: "other", description: "cast" },
          function(value, type_name) {
              return {
                type: 'CastExpression',
                value: value,
                type_name: type_name
              };
            },
          { type: "other", description: "cases" },
          function(condition, result) {
                  return {
                    type: 'CaseBranch',
                    condition: condition,
                    result: result
                  };
                },
          function(first, rest) { return [first].concat(rest); },
          { type: "other", description: "case" },
          function(value, cases) {
                return {
                  type: 'CaseExpression',
                  value: value,
                  cases: cases,
                  elseClause: undefined
                };
              },
          function(cases) {
                return {
                  type: 'CaseExpression',
                  value: undefined,
                  cases: cases,
                  elseClause: undefined
                };
              },
          function(value, cases, elseClause) {
                return {
                  type: 'CaseExpression',
                  value: value,
                  cases: cases,
                  elseClause: elseClause
                };
              },
          function(cases, elseClause) {
                return {
                  type: 'CaseExpression',
                  value: undefined,
                  cases: cases,
                  elseClause: elseClause
                };
              },
          { type: "other", description: "in set" },
          void 0,
          function(operator, value) {
              return {
                type: 'MemberOfExpression',
                operator: operator,
                value: value
              };
            },
          function(condition, result) {
                return {
                  type: 'CaseBranch',
                  condition: condition,
                  result: result
                };
              },
          { type: "other", description: "conditional" },
          function(cases) {
                return {
                  type: 'ConditionalExpression',
                  cases: cases,
                  elseClause: undefined
                };
              },
          function(cases, elseClause) {
                return {
                  type: 'ConditionalExpression',
                  cases: cases,
                  elseClause: elseClause
                };
              },
          { type: "other", description: "not" },
          function(operator, argument) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: argument
                };
              },
          function(first, rest) { return buildBinaryPredicate(first, rest); },
          { type: "other", description: "limit" },
          function(limit) { return { type: 'Limit', value: limit } },
          { type: "other", description: "predicate" },
          { type: "other", description: "now" },
          { type: "other", description: "literal" },
          { type: "other", description: "elements" },
          function(element) {
                  return optionalList(element);
                },
          function(first, rest) { return Array.prototype.concat.apply(first, rest); },
          { type: "other", description: "list" },
          function() {
                return {
                  type: 'ListExpression',
                  elements: []
                }
              },
          function(elements) {
                return {
                  type: 'ListExpression',
                  elements: elements
                }
              },
          function(name) { return { type: 'FunctionIdentifier', name: name.name }; },
          { type: "other", description: "function call" },
          function(callee) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: []
              };
            },
          function(callee, elements) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: elements
              };
            },
          { type: "other", description: "aggregate invocations" },
          function(callee, argument, partition) {
              return {
                type: 'AggregateInvocation',
                callee: callee,
                partition: partition,
                argument: argument
              };
            },
          function(callee) {
              return {
                type: 'AggregateInvocation',
                callee: callee,
                partition: undefined,
                argument: argument
              };
            },
          { type: "other", description: "time type name" },
          { type: "other", description: "time" },
          function(typeName, expression) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: [expression]
              };
            },
          function(expression) { return expression; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          function() {
              return { type: "Literal", dataType: 'integer', value: 0 };
            },
          function() {
              return { type: "Literal", dataType: 'integer', value: parseInt(text()) };
            },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function() {
                return { type: "Literal", dataType: 'float', value: parseFloat(text()) };
              },
          function() {
                return { type: "Literal", dataType: 'integer', value: parseFloat(text()) };
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "0x",
          { type: "literal", value: "0x", description: "\"0x\"" },
          function(digits) {
                return { type: "Literal", dataType: 'integer', value: parseInt(digits, 16) };
               },
          { type: "any", description: "any character" },
          /^[A-Za-z_]/,
          { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          { type: "other", description: "identifier" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          function(name) { return name; },
          { type: "other", description: "number" },
          function(literal) {
                return literal;
              },
          { type: "other", description: "numeric constant" },
          function() {
              return {type: "Literal", dataType: 'number', value: 'Infinity' };
            },
          function() {
              return {type: "Literal", dataType: 'number', value: 'NaN' };
            },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          { type: "other", description: "identifier with brackets" },
          function(chars) {
                return {
                  type: "Identifier",
                  name: chars.join("")
                };
              },
          function() { return text(); },
          function(sequence) { return sequence; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          { type: "other", description: "string" },
          function(chars) {
                return { type: "Literal", dataType: 'string', value: chars.join("") };
              },
          function() { return ""; },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          { type: "other", description: "comment" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "",
          { type: "other", description: "null" },
          function() { return { type: "Literal", dataType: 'null', value: null }; },
          { type: "other", description: "boolean" },
          function() { return { type: "Literal", dataType: 'boolean', value: true  }; },
          function() { return { type: "Literal", dataType: 'boolean', value: false }; },
          { type: "other", description: "reserved word" },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          { type: "other", description: "shift operator" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          { type: "other", description: "comparison" },
          { type: "other", description: "equality operator" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\xA0",
          { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
          "\uFEFF",
          { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          { type: "other", description: "end of line" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\u2028",
          { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
          "\u2029",
          { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
          { type: "other", description: "postfix keyword" },
          function(argument, operator) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'postfix'
                };
              },
          function(left, operator, right) {
                return {
                  type: 'BinaryPredicate',
                  operator: operator,
                  left: left,
                  right: right
                };
              },
          function(left, operator, negation, right) {
              return {
                type: 'NotExpression',
                operator: negation,
                value: {
                  type: 'BinaryPredicate',
                  operator: operator,
                  left: left,
                  right: right
                }
              };
            },
          function(left, operator, right) {
              return {
                type: 'BinaryPredicate',
                operator: joinWords(operator),
                left: left,
                right: right
              };
            },
          function(left, operator) {
              return {
                type: 'BinaryPredicate',
                operator: joinWords(operator),
                left: left,
                right: elements
              };
            },
          function(left, negation, operator, right) {
              return {
                type: 'NotExpression',
                operator: negation,
                value: {
                  type: 'BinaryPredicate',
                  operator: joinWords(operator),
                  left: left,
                  right: right
                }
              };
            },
          function(left, negation, operator) {
              return {
                type: 'NotExpression',
                operator: negation,
                value: {
                  type: 'BinaryPredicate',
                  operator: joinWords(operator),
                  left: left,
                  right: elements
                }
              };
            },
          function(value, low, high) {
                return {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                };
              },
          function(value, operator, low, high) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                  }
                };
              },
          { type: "other", description: "text comparison" },
          function(value, operator, like, escapeChar) {
                return {
                  type: 'LikePredicate',
                  operator: joinWords(operator),
                  left: value,
                  right: like,
                  escapeChar: escapeChar
                };
              },
          function(value, operator, like) {
                return {
                  type: 'LikePredicate',
                  operator: joinWords(operator),
                  left: value,
                  right: like
                };
              },
          function(value, negation, operator, like, escapeChar) {
                return {
                  type: 'NotExpression',
                  operator: negation,
                  value: {
                    type: 'LikePredicate',
                    operator: joinWords(operator),
                    left: value,
                    right: like,
                    escapeChar: escapeChar
                  }
                };
              },
          function(value, negation, operator, like) {
                return {
                  type: 'NotExpression',
                  operator: negation,
                  value: {
                    type: 'LikePredicate',
                    operator: joinWords(operator),
                    left: value,
                    right: like
                  }
                };
              },
          { type: "other", description: "regex expression" },
          function(value, operator, matcher) {
                return {
                  type: 'RegexPredicate',
                  operator: joinWords(operator),
                  left: value,
                  right: matcher
                };
              },
          function(value, negation, operator, matcher) {
                return {
                  type: 'NotExpression',
                  operator: negation,
                  value: {
                    type: 'RegexPredicate',
                    operator: joinWords(operator),
                    left: value,
                    right: matcher
                  }
                };
              },
          function(property) { return { name: property }; },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type:     'MemberAccess',
                    object:   result,
                    name:     element.name
                  };
                });
              },
          { type: "other", description: "prefix operator" },
          function(operator, argument) {
              return {
                type: 'UnaryExpression',
                operator: operator,
                argument: argument,
                fixity: 'prefix'
              };
            },
          { type: "other", description: "multiplicative operator" },
          /^[A-Za-z0-9_:]/,
          { type: "class", value: "[A-Za-z0-9_:]", description: "[A-Za-z0-9_:]" },
          function(str) { return str.join(''); },
          function(c) { return { column: c[2], graph_namespace: c[1] }; },
          function(c) { return { column: c }; },
          function(gcn) { return gcn[1]; },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "array",
          { type: "literal", value: "ARRAY", description: "\"ARRAY\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "boolean",
          { type: "literal", value: "BOOLEAN", description: "\"BOOLEAN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "date",
          { type: "literal", value: "DATE", description: "\"DATE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "false",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "ilike",
          { type: "literal", value: "ILIKE", description: "\"ILIKE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "infinity",
          { type: "literal", value: "INFINITY", description: "\"INFINITY\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "integer",
          { type: "literal", value: "INTEGER", description: "\"INTEGER\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "memberof",
          { type: "literal", value: "MEMBEROF", description: "\"MEMBEROF\"" },
          "nan",
          { type: "literal", value: "NaN", description: "\"NaN\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "number",
          { type: "literal", value: "NUMBER", description: "\"NUMBER\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "per",
          { type: "literal", value: "PER", description: "\"PER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "similar",
          { type: "literal", value: "SIMILAR", description: "\"SIMILAR\"" },
          "string",
          { type: "literal", value: "STRING", description: "\"STRING\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "time",
          { type: "literal", value: "TIME", description: "\"TIME\"" },
          "timestamp",
          { type: "literal", value: "TIMESTAMP", description: "\"TIMESTAMP\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "true",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("70"),
          peg$decode("87\u0115*M \"7\xB5*G \"7\xFA*A \"7\xE9*; \"7\xFB*5 \"7\xAD*/ \"7\xC3*) \"7\u011A*# \"7\u011B9*\" 3 "),
          peg$decode("8! #7!+&$,#&7!\"\"\" \"+\x8B$!7j+7$7?+-%7k+#%'#%$## \"$\"# \"\"# \"*V \"!7j+K$7?+A%7`+7%7?+-%7k+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \" $+#%'\"%$\"# \"\"# \"9*\" 3!"),
          peg$decode("8!7\xB9+\x8D$7\x8E+\x83%7j+y%7\x8E+o%7.+e%7\x8E+[%7\xAE+Q%7\x8E+G%7\"+=%7\x8E+3%7k+)%4+6&+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3%"),
          peg$decode("8!!7\u0128+e$7\x8E+[%7.+Q%7\x8E+G%7\u0119+=%7\x8E+3%7.+)%4'6('\"$ %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"+\xE9$ #!7\x8E+o$7\u0128+e%7\x8E+[%7.+Q%7\x8E+G%7\u0119+=%7\x8E+3%7.+)%4(6((\"$ %$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",z&!7\x8E+o$7\u0128+e%7\x8E+[%7.+Q%7\x8E+G%7\u0119+=%7\x8E+3%7.+)%4(6((\"$ %$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6)\"\"! %$\"# \"\"# \"9*\" 3'"),
          peg$decode("8!7\xB8+e$7\x8E+[%7.+Q%7\x8E+G%7$+=%7\x8E+3%7\xCF+)%4'6+'\"$\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u013E \"!7\xB8+P$7\x8E+F%7$+<%7\x8E+2%7\xCF+(%4%6,%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*\u0100 \"!7\xB8+\x8E$7\x8E+\x84%7.+z%7\x8E+p%7$+f%7\x8E+\\%7\xCE+R%7\x8E+H%7.+>%7\x8E+4%7\xCF+*%4+6-+#(&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\x84 \"!7\xB8+y$7\x8E+o%7$+e%7\x8E+[%7\xCE+Q%7\x8E+G%7.+=%7\x8E+3%7\xCF+)%4)6.)\"&\"%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3*"),
          peg$decode("7\xE1*# \"7\xF4"),
          peg$decode("8!7&+U$!87F9*$$\"\" 0\"# \"+=%7\x8E+3%7.+)%4$61$\"# %$$# \"$## \"$\"# \"\"# \"9*\" 3/"),
          peg$decode("!!7\xDD+e$7\x8E+[%7.+Q%7\x8E+G%7\u0119+=%7\x8E+3%7.+)%4'62'\"$ %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"+\u0111$ #!7\x8E+\x83$7\xCE+y%7\x8E+o%7\xDD+e%7\x8E+[%7.+Q%7\x8E+G%7\u0119+=%7\x8E+3%7.+)%4*62*\"$ %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",\x8E&!7\x8E+\x83$7\xCE+y%7\x8E+o%7\xDD+e%7\x8E+[%7.+Q%7\x8E+G%7\u0119+=%7\x8E+3%7.+)%4*62*\"$ %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6)\"\"! %$\"# \"\"# \""),
          peg$decode("8!7(+<$7\x8E+2%7\xCF+(%4#64#!\"%$## \"$\"# \"\"# \"*p \"!7(+e$7\x8E+[%7\xCE+Q%7\x8E+G%7.+=%7\x8E+3%7\xCF+)%4'65'\"&\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 33"),
          peg$decode("8!7\xF8+=$7\x8E+3%7*+)%4#67#\"\" %$## \"$\"# \"\"# \"*# \"7\x899*\" 36"),
          peg$decode("!7*+\x8D$ #!7\x8E+A$7\xAC+7%7\x8E+-%7*+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\xAC+7%7\x8E+-%7*+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"68\"\"! %$\"# \"\"# \""),
          peg$decode("!7++\x8D$ #!7\x8E+A$7\xFF+7%7\x8E+-%7++#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\xFF+7%7\x8E+-%7++#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"68\"\"! %$\"# \"\"# \""),
          peg$decode("8!7\xF2+<$7\x8E+2%7.+(%4#6:#! %$## \"$\"# \"\"# \"9*\" 39"),
          peg$decode("7%*/ \"7)*) \"7'*# \"7,"),
          peg$decode("87.9*\" 3;"),
          peg$decode("7-*# \"7/"),
          peg$decode("87\xA2*) \"7\xA3*# \"7\xA49*\" 3<"),
          peg$decode("87I*A \"7J*; \"7P*5 \"7P*/ \"7\x80*) \"7\x81*# \"719*\" 3="),
          peg$decode("8!!7.+' 4!6?!! %+\x97$ #!7\x8E+F$7`+<%7\x8E+2%7.+(%4$6?$! %$$# \"$## \"$\"# \"\"# \",Q&!7\x8E+F$7`+<%7\x8E+2%7.+(%4$6?$! %$$# \"$## \"$\"# \"\"# \"\"+)%4\"6@\"\"! %$\"# \"\"# \"9*\" 3>"),
          peg$decode("8!7j+;$7\x8E+1%7k+'%4#6B# %$## \"$\"# \"\"# \"*\xAD \"!7j+P$7\x8E+F%73+<%7\x8E+2%7k+(%4%6C%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*o \"!7j+d$7\x8E+Z%73+P%7\x8E+F%7`+<%7\x8E+2%7k+(%4'6C'!$%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3A"),
          peg$decode("!!87\x829*$$\"\" 0\"# \"+2$7G+(%4\"6D\"! %$\"# \"\"# \""),
          peg$decode("8!75+P$7\x8E+F%7j+<%7\x8E+2%7k+(%4%6F%!$%$%# \"$$# \"$## \"$\"# \"\"# \"*p \"!75+e$7\x8E+[%7j+Q%7\x8E+G%73+=%7\x8E+3%7k+)%4'6G'\"&\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3E"),
          peg$decode("8!75+z$7\x8E+p%7\xFC+f%7\x8E+\\%7.+R%7\x8E+H%7\u0102+>%7\x8E+4%7.+*%4)6I)#($ %$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*[ \"!75+P$7\x8E+F%7\xFC+<%7\x8E+2%7.+(%4%6J%!$%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3H"),
          peg$decode("87\xC3*) \"7\u011A*# \"7\u011B9*\" 3K"),
          peg$decode("8!78+=$7\x8E+3%7.+)%4#6M#\"\" %$## \"$\"# \"\"# \"9*\" 3L"),
          peg$decode("7L* \"7#*y \"79*s \"76*m \"7H*g \"72*a \"!7j+P$7\x8E+F%7/+<%7\x8E+2%7k+(%4%6N%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*# \"74"),
          peg$decode("0O\"\"1!3P"),
          peg$decode("0Q\"\"1!3R"),
          peg$decode("!.S\"\"2S3T+& 4!6U! %*D \"!7<+9$ #7;,#&7;\"+'%4\"6V\" %$\"# \"\"# \""),
          peg$decode("/W\"\"1!3X"),
          peg$decode("!0Y\"\"1!3Z*# \" $+<$ #7;+&$,#&7;\"\"\" \"+#%'\"%$\"# \"\"# \""),
          peg$decode("!7>+-$7?+#%'\"%$\"# \"\"# \""),
          peg$decode("!7=+S$7_+I% #7;,#&7;\"+7%7@*# \" $+'%4$6[$ %$$# \"$## \"$\"# \"\"# \"*\x80 \"!7_+P$ #7;+&$,#&7;\"\"\" \"+7%7@*# \" $+'%4#6[# %$## \"$\"# \"\"# \"*B \"!7=+7$7@*# \" $+'%4\"6\\\" %$\"# \"\"# \""),
          peg$decode("0]\"\"1!3^"),
          peg$decode("!/_\"\"1\"3`+G$! #7B+&$,#&7B\"\"\" \"+! (%+(%4\"6a\"! %$\"# \"\"# \""),
          peg$decode("-\"\"1!3b"),
          peg$decode("0c\"\"1!3d"),
          peg$decode("7E*) \"7a*# \"7;"),
          peg$decode("8!7E+;$ #7F,#&7F\"+)%4\"6f\"\"! %$\"# \"\"# \"9*\" 3e"),
          peg$decode("!!87\x829*$$\"\" 0\"# \"+2$7G+(%4\"6g\"! %$\"# \"\"# \""),
          peg$decode("8!7C+F$!87E*# \"7;9*$$\"\" 0\"# \"+(%4\"6i\"!!%$\"# \"\"# \"*Q \"!7A+F$!87E*# \"7;9*$$\"\" 0\"# \"+(%4\"6i\"!!%$\"# \"\"# \"9*\" 3h"),
          peg$decode("8!7\xE4+& 4!6k! %*. \"!7\xF5+& 4!6l! %9*\" 3j"),
          peg$decode(".m\"\"2m3n"),
          peg$decode("8!7l+D$ #7M,#&7M\"+2%7m+(%4#6p#!!%$## \"$\"# \"\"# \"9*\" 3o"),
          peg$decode("!!87m*) \"7K*# \"7\x8C9*$$\"\" 0\"# \"+1$7D+'%4\"6q\" %$\"# \"\"# \"*C \"!7K+2$7T+(%4\"6r\"! %$\"# \"\"# \"*# \"7S"),
          peg$decode(".s\"\"2s3t"),
          peg$decode(".u\"\"2u3v"),
          peg$decode("8!7N+D$ #7Q,#&7Q\"+2%7N+(%4#6x#!!%$## \"$\"# \"\"# \"*O \"!7O+D$ #7R,#&7R\"+2%7O+(%4#6x#!!%$## \"$\"# \"\"# \"9*\" 3w"),
          peg$decode("!!87N*) \"7K*# \"7\x8C9*$$\"\" 0\"# \"+1$7D+'%4\"6q\" %$\"# \"\"# \"*C \"!7K+2$7T+(%4\"6r\"! %$\"# \"\"# \"*# \"7S"),
          peg$decode("!!87O*) \"7K*# \"7\x8C9*$$\"\" 0\"# \"+1$7D+'%4\"6q\" %$\"# \"\"# \"*C \"!7K+2$7T+(%4\"6r\"! %$\"# \"\"# \"*# \"7S"),
          peg$decode("!7K+1$7\x8D+'%4\"6y\" %$\"# \"\"# \""),
          peg$decode("7U*\\ \"!.S\"\"2S3T+?$!87;9*$$\"\" 0\"# \"+'%4\"6z\" %$\"# \"\"# \"*) \"7Y*# \"7Z"),
          peg$decode("7V*# \"7W"),
          peg$decode("7O*\xB3 \"7N*\xAD \"7K*\xA7 \"!.{\"\"2{3|+& 4!6}! %*\x90 \"!.~\"\"2~3+& 4!6\x80! %*y \"!.\x81\"\"2\x813\x82+& 4!6\x83! %*b \"!.\x84\"\"2\x843\x85+& 4!6\x86! %*K \"!.\x87\"\"2\x873\x88+& 4!6\x89! %*4 \"!.\x8A\"\"2\x8A3\x8B+& 4!6\x8C! %"),
          peg$decode("!!87X*# \"7\x8C9*$$\"\" 0\"# \"+1$7D+'%4\"6q\" %$\"# \"\"# \""),
          peg$decode("7V*; \"7;*5 \".\x8D\"\"2\x8D3\x8E*) \".\x8F\"\"2\x8F3\x90"),
          peg$decode("!.\x8D\"\"2\x8D3\x8E+M$!!7B+-$7B+#%'\"%$\"# \"\"# \"+! (%+(%4\"6\x91\"! %$\"# \"\"# \""),
          peg$decode("!.\x8F\"\"2\x8F3\x90+a$!!7B+A$7B+7%7B+-%7B+#%'$%$$# \"$## \"$\"# \"\"# \"+! (%+(%4\"6\x91\"! %$\"# \"\"# \""),
          peg$decode("87]*# \"7\\9*\" 3\x92"),
          peg$decode("!7z+{$ #!!87\x8C9*$$\"\" 0\"# \"+-$7D+#%'\"%$\"# \"\"# \",F&!!87\x8C9*$$\"\" 0\"# \"+-$7D+#%'\"%$\"# \"\"# \"\"+#%'\"%$\"# \"\"# \""),
          peg$decode("!7{+\x85$ #!!87|9*$$\"\" 0\"# \"+-$7D+#%'\"%$\"# \"\"# \",F&!!87|9*$$\"\" 0\"# \"+-$7D+#%'\"%$\"# \"\"# \"\"+-%7|+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("!7{+\x91$ #!!87|*# \"7\x8C9*$$\"\" 0\"# \"+-$7D+#%'\"%$\"# \"\"# \",L&!!87|*# \"7\x8C9*$$\"\" 0\"# \"+-$7D+#%'\"%$\"# \"\"# \"\"+-%7|+#%'#%$## \"$\"# \"\"# \""),
          peg$decode(".\x93\"\"2\x933\x94"),
          peg$decode(".\x95\"\"2\x953\x96"),
          peg$decode(".\x97\"\"2\x973\x98"),
          peg$decode(".\x99\"\"2\x993\x9A"),
          peg$decode(".\x9B\"\"2\x9B3\x9C"),
          peg$decode(".\x9D\"\"2\x9D3\x9E"),
          peg$decode(".\x9F\"\"2\x9F3\xA0"),
          peg$decode(".\xA1\"\"2\xA13\xA2"),
          peg$decode(".\xA3\"\"2\xA33\xA4"),
          peg$decode(".\xA5\"\"2\xA53\xA6"),
          peg$decode(".\xA7\"\"2\xA73\xA8"),
          peg$decode(".\xA9\"\"2\xA93\xAA"),
          peg$decode(".\xAB\"\"2\xAB3\xAC"),
          peg$decode(".\xAD\"\"2\xAD3\xAE"),
          peg$decode(".\xAF\"\"2\xAF3\xB0"),
          peg$decode(".\xB1\"\"2\xB13\xB2"),
          peg$decode(".\xB3\"\"2\xB33\xB4"),
          peg$decode(".\xB5\"\"2\xB53\xB6"),
          peg$decode(".\xB7\"\"2\xB73\xB8"),
          peg$decode(".\xB9\"\"2\xB93\xBA"),
          peg$decode(".\xBB\"\"2\xBB3\xBC"),
          peg$decode(".\xBD\"\"2\xBD3\xBE"),
          peg$decode(".\xBF\"\"2\xBF3\xC0"),
          peg$decode(".\xC1\"\"2\xC13\xC2"),
          peg$decode(".\xA1\"\"2\xA13\xA2"),
          peg$decode(".\xC3\"\"2\xC33\xC4"),
          peg$decode(" #0\xC5\"\"1!3\xC6,)&0\xC5\"\"1!3\xC6\""),
          peg$decode(".\xC7\"\"2\xC73\xC8*# \"7c"),
          peg$decode(".\xC9\"\"2\xC93\xCA"),
          peg$decode(".\xCB\"\"2\xCB3\xCC"),
          peg$decode("! #-\"\"1!3b,(&-\"\"1!3b\"+A$!8.\xCB\"\"2\xCB3\xCC9+$$\"# 0\"\" \"+#%'\"%$\"# \"\"# \""),
          peg$decode(" \xCD"),
          peg$decode("!7\xAC+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0470 \"!7\xAE+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0447 \"!7\xB3+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u041E \"!7\xB4+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u03F5 \"!7\xB8+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u03CC \"!7\xB9+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u03A3 \"!7\xCE+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u037A \"!7\xCF+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0351 \"!7\xD0+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0328 \"!7\xD3+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u02FF \"!7\xD9+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u02D6 \"!7\xDD+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u02AD \"!7\xE1+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0284 \"!7\xEC+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u025B \"!7\xED+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0232 \"!7\xF1+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0209 \"!7\xF4+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u01E0 \"!7\xF8+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u01B7 \"!7\xF9+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u018E \"!7\xFC+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0165 \"!7\xFF+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u013C \"!7\u0102+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\u0113 \"!7\u0109+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\xEA \"!7\u0114+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\xC1 \"!7\u0119+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*\x98 \"!7\u011C+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*o \"!7\u0128+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"*F \"!7\u0129+;$!87F9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \""),
          peg$decode("8!7\xFA+& 4!6\xCF! %9*\" 3\xCE"),
          peg$decode("8!7\u011F+& 4!6\xD1! %*. \"!7\xD6+& 4!6\xD2! %9*\" 3\xD0"),
          peg$decode("87*/ \"7\x80*) \"7\x81*# \"7J9*\" 3\xD3"),
          peg$decode("7e*# \"7d"),
          peg$decode("!7\x9D+\x8D$ #!7\x8E+A$7\x83+7%7\x8E+-%7\x9D+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\x83+7%7\x8E+-%7\x9D+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xD4\"\"! %$\"# \"\"# \""),
          peg$decode("8.\xD6\"\"2\xD63\xD7*) \".\xD8\"\"2\xD83\xD99*\" 3\xD5"),
          peg$decode("!7\x84+\x8D$ #!7\x8E+A$7\x85+7%7\x8E+-%7\x84+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\x85+7%7\x8E+-%7\x84+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xD4\"\"! %$\"# \"\"# \""),
          peg$decode("87q*\x81 \"7r*{ \"!!7o+;$!87o9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"+! (%*L \"!!7p+;$!87p9*$$\"\" 0\"# \"+#%'\"%$\"# \"\"# \"+! (%9*\" 3\xDA"),
          peg$decode("!7\x86+\x8D$ #!7\x8E+A$7\x87+7%7\x8E+-%7\x86+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\x87+7%7\x8E+-%7\x86+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"68\"\"! %$\"# \"\"# \"*# \"7\x96"),
          peg$decode("!7\x88+\x8D$ #!7\x8E+A$7\x8A+7%7\x8E+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\x8A+7%7\x8E+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"68\"\"! %$\"# \"\"# \""),
          peg$decode("87u*/ \"7t*) \"7s*# \"7v9*\" 3\xDB"),
          peg$decode("8.\xDD\"\"2\xDD3\xDE*Y \".\xDF\"\"2\xDF3\xE0*M \".\xE1\"\"2\xE13\xE2*A \".\xE3\"\"2\xE33\xE4*5 \".\xE5\"\"2\xE53\xE6*) \".\xE7\"\"2\xE73\xE89*\" 3\xDC"),
          peg$decode("80\xEA\"\"1!3\xEB9*\" 3\xE9"),
          peg$decode("8.\xC3\"\"2\xC33\xC4*M \".\xED\"\"2\xED3\xEE*A \".\xEF\"\"2\xEF3\xF0*5 \".\xF1\"\"2\xF13\xF2*) \".\xF3\"\"2\xF33\xF49*\" 3\xEC"),
          peg$decode(" #7\x8B*) \"7\x8D*# \"7[,/&7\x8B*) \"7\x8D*# \"7[\""),
          peg$decode(" #7\x8B*# \"7^,)&7\x8B*# \"7^\""),
          peg$decode("87\xED*# \"7\xF99*\" 3\xF5"),
          peg$decode("!7\x99+=$7\x8E+3%7\x90+)%4#6\xF6#\"\" %$## \"$\"# \"\"# \""),
          peg$decode("!7\x99+R$7\x8E+H%7\xEC+>%7\x8E+4%7\x9C+*%4%6\xF7%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*r \"!7\x99+g$7\x8E+]%7\xEC+S%7\x8E+I%7\xF8+?%7\x8E+5%7\x9C++%4'6\xF8'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("!7\x99+R$7\x8E+H%7\xE1+>%7\x8E+4%7.+*%4%6\xF9%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*\u01E7 \"!7\x99+\xC2$7\x8E+\xB8%7\xE1+\xAE%7\x8E+\xA4%7j+\x9A% #!73+7$7`+-%7\x8E+#%'#%$## \"$\"# \"\"# \"+E$,B&!73+7$7`+-%7\x8E+#%'#%$## \"$\"# \"\"# \"\"\"\" \"*# \" $+=%7\x8E+3%7k+)%4(6\xFA(\"'%%$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0137 \"!7\x99+g$7\x8E+]%7\xF8+S%7\x8E+I%7\xE1+?%7\x8E+5%7.++%4'6\xFB'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\xE2 \"!7\x99+\xD7$7\x8E+\xCD%7\xF8+\xC3%7\x8E+\xB9%7\xE1+\xAF%7\x8E+\xA5%7j+\x9B% #!73+7$7`+-%7\x8E+#%'#%$## \"$\"# \"\"# \"+E$,B&!73+7$7`+-%7\x8E+#%'#%$## \"$\"# \"\"# \"\"\"\" \"*# \" $+>%7\x8E+4%7k+*%4*6\xFC*#)'%%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("!7\x99+z$7\x8E+p%7\xB4+f%7\x8E+\\%7\x99+R%7\x8E+H%7\xAC+>%7\x8E+4%7\x99+*%4)6\xFD)#($ %$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\x9A \"!7\x99+\x8F$7\x8E+\x85%7\xF8+{%7\x8E+q%7\xB4+g%7\x8E+]%7\x99+S%7\x8E+I%7\xAC+?%7\x8E+5%7\x99++%4+6\xFE+$*($ %$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("87\xF1*# \"7\xDF9*\" 3\xFF"),
          peg$decode("8!7\x99+{$7\x8E+q%7\x95+g%7\x8E+]%7\x99+S%7\x8E+I%7\xD0+?%7\x8E+5%7P++%4)6\u0100)$(&$ %$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0130 \"!7\x99+R$7\x8E+H%7\x95+>%7\x8E+4%7\x99+*%4%6\u0101%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*\xF0 \"!7\x99+\x90$7\x8E+\x86%7\xF8+|%7\x8E+r%7\x95+h%7\x8E+^%7\x99+T%7\x8E+J%7\xD0+@%7\x8E+6%7P+,%4+6\u0102+%*(&$ %$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*r \"!7\x99+g$7\x8E+]%7\xF8+S%7\x8E+I%7\x95+?%7\x8E+5%7\x99++%4'6\u0103'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xFF"),
          peg$decode("7\u0109*B \"!7\u0114+7$7\x8E+-%7\u011C+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("8!7\x99+R$7\x8E+H%7\x97+>%7\x8E+4%7\x99+*%4%6\u0105%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*r \"!7\x99+g$7\x8E+]%7\xF8+S%7\x8E+I%7\x97+?%7\x8E+5%7\x99++%4'6\u0106'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0104"),
          peg$decode("!7:+\xBF$ #!7\x8E+Z$7l+P%7\x8E+F%7.+<%7\x8E+2%7m+(%4&6\u0107&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",e&!7\x8E+Z$7l+P%7\x8E+F%7.+<%7\x8E+2%7m+(%4&6\u0107&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u0108\"\"! %$\"# \"\"# \""),
          peg$decode("7\x96*A \"7\x98*; \"7\x94*5 \"7\x93*/ \"7\x91*) \"7\x92*# \"7\x99"),
          peg$decode("87d*) \"7e*# \"7i9*\" 3\u0109"),
          peg$decode("!7\x9B+=$7\x8E+3%7\x9A+)%4#6\u010A#\"\" %$## \"$\"# \"\"# \"*# \"7\x9A"),
          peg$decode("!7\x9C+\x8D$ #!7\x8E+A$7\x9E+7%7\x8E+-%7\x9C+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8E+A$7\x9E+7%7\x8E+-%7\x9C+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xD4\"\"! %$\"# \"\"# \""),
          peg$decode("87f*) \"7g*# \"7h9*\" 3\u010B"),
          peg$decode("! #0\u010C\"\"1!3\u010D+,$,)&0\u010C\"\"1!3\u010D\"\"\" \"+' 4!6\u010E!! %"),
          peg$decode("!!!7H+7$7a+-%7\x9F+#%'#%$## \"$\"# \"\"# \"+' 4!6\u010F!! %*/ \"!7\x9F+' 4!6\u0110!! %+' 4!6\u0111!! %"),
          peg$decode("!.\u0112\"\"2\u01123\u0113+-$7H+#%'\"%$\"# \"\"# \""),
          peg$decode(".\u0114\"\"2\u01143\u0115"),
          peg$decode(".\u0114\"\"2\u01143\u0115"),
          peg$decode(".\u0114\"\"2\u01143\u0115"),
          peg$decode("/\u0116\"\"1%3\u0117"),
          peg$decode("/\u0118\"\"1&3\u0119"),
          peg$decode("/\u011A\"\"1#3\u011B"),
          peg$decode("/\u011C\"\"1%3\u011D"),
          peg$decode("/\u011E\"\"1#3\u011F"),
          peg$decode("/\u0120\"\"1%3\u0121"),
          peg$decode("/\u0122\"\"1'3\u0123"),
          peg$decode("/\u0124\"\"1#3\u0125"),
          peg$decode("/\u0126\"\"1%3\u0127"),
          peg$decode("/\u0128\"\"1\"3\u0129"),
          peg$decode("/\u012A\"\"1#3\u012B"),
          peg$decode("/\u012C\"\"1&3\u012D"),
          peg$decode("/\u012E\"\"1-3\u012F"),
          peg$decode("/\u0130\"\"1&3\u0131"),
          peg$decode("/\u0132\"\"1%3\u0133"),
          peg$decode("/\u0134\"\"1'3\u0135"),
          peg$decode("/\u0136\"\"1'3\u0137"),
          peg$decode("/\u0138\"\"1\"3\u0139"),
          peg$decode("/\u013A\"\"1'3\u013B"),
          peg$decode("/\u013C\"\"1$3\u013D"),
          peg$decode("/\u013E\"\"1$3\u013F"),
          peg$decode("/\u0140\"\"1%3\u0141"),
          peg$decode("/\u0142\"\"1'3\u0143"),
          peg$decode("/\u0144\"\"1&3\u0145"),
          peg$decode("/\u0146\"\"1&3\u0147"),
          peg$decode("/\u0148\"\"1(3\u0149"),
          peg$decode("/\u014A\"\"1*3\u014B"),
          peg$decode("!7\x8E+3$/\u014C\"\"1&3\u014D+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u014E\"\"1%3\u014F"),
          peg$decode("/\u0150\"\"1(3\u0151"),
          peg$decode("/\u0152\"\"1$3\u0153"),
          peg$decode("/\u0154\"\"1'3\u0155"),
          peg$decode("/\u0156\"\"1*3\u0157"),
          peg$decode("/\u0158\"\"1(3\u0159"),
          peg$decode("!7\x8E+3$/\u015A\"\"1&3\u015B+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u015C\"\"1$3\u015D"),
          peg$decode("/\u015E\"\"1&3\u015F"),
          peg$decode("/\u0160\"\"1(3\u0161"),
          peg$decode("/\u0162\"\"1$3\u0163"),
          peg$decode("/W\"\"1!3\u0164"),
          peg$decode("/\u0165\"\"1$3\u0166"),
          peg$decode("/\u0167\"\"1$3\u0168"),
          peg$decode("/\u0169\"\"1#3\u016A"),
          peg$decode("/\u016B\"\"1&3\u016C"),
          peg$decode("/\u016D\"\"1&3\u016E"),
          peg$decode("/\u016F\"\"1)3\u0170"),
          peg$decode("/\u0171\"\"1&3\u0172"),
          peg$decode("!7\x8E+3$/\u0173\"\"1'3\u0174+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0175\"\"1$3\u0176"),
          peg$decode("/\u0177\"\"1%3\u0178"),
          peg$decode("/\u0179\"\"1#3\u017A"),
          peg$decode("/\u017B\"\"1'3\u017C"),
          peg$decode("/\u017D\"\"1$3\u017E"),
          peg$decode("/\u017F\"\"1$3\u0180"),
          peg$decode("/\u0181\"\"1%3\u0182"),
          peg$decode("/\u0183\"\"1&3\u0184"),
          peg$decode("/\u0185\"\"1\"3\u0186"),
          peg$decode("/\u0187\"\"1&3\u0188"),
          peg$decode("/\u0189\"\"1%3\u018A"),
          peg$decode("/\u018B\"\"1)3\u018C"),
          peg$decode("/\u018D\"\"1\"3\u018E"),
          peg$decode("/\u018F\"\"1%3\u0190"),
          peg$decode("/\u0191\"\"1'3\u0192"),
          peg$decode("/\u0193\"\"1(3\u0194"),
          peg$decode("/\u0195\"\"1)3\u0196"),
          peg$decode("/\u0197\"\"1%3\u0198"),
          peg$decode("!7\x8E+3$/\u0199\"\"1&3\u019A+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u019B\"\"1'3\u019C"),
          peg$decode("/\u019D\"\"1'3\u019E"),
          peg$decode("/\u019F\"\"1)3\u01A0"),
          peg$decode("/\u01A1\"\"1$3\u01A2"),
          peg$decode("/\u01A3\"\"1\"3\u01A4"),
          peg$decode("/\u01A5\"\"1&3\u01A6"),
          peg$decode("/\u01A7\"\"1$3\u01A8"),
          peg$decode("/\u01A9\"\"1#3\u01AA"),
          peg$decode("/\u01AB\"\"1$3\u01AC"),
          peg$decode("/\u01AD\"\"1$3\u01AE"),
          peg$decode("/\u01AF\"\"1%3\u01B0"),
          peg$decode("/\u01B1\"\"1%3\u01B2"),
          peg$decode("/\u01B3\"\"1(3\u01B4"),
          peg$decode("/\u01B5\"\"1#3\u01B6"),
          peg$decode("/\u01B7\"\"1'3\u01B8"),
          peg$decode("/\u01B9\"\"1\"3\u01BA"),
          peg$decode("/\u01BB\"\"1#3\u01BC"),
          peg$decode("/\u01BD\"\"1'3\u01BE"),
          peg$decode("/\u01BF\"\"1$3\u01C0"),
          peg$decode("/\u01C1\"\"1&3\u01C2"),
          peg$decode("/\u01C3\"\"1\"3\u01C4"),
          peg$decode("/\u01C5\"\"1&3\u01C6"),
          peg$decode("/\u01C7\"\"1\"3\u01C8"),
          peg$decode("/\u01C9\"\"1\"3\u01CA"),
          peg$decode("/\u01CB\"\"1%3\u01CC"),
          peg$decode("/\u01CD\"\"1%3\u01CE"),
          peg$decode("/\u01CF\"\"1#3\u01D0"),
          peg$decode("/\u01D1\"\"1$3\u01D2"),
          peg$decode("/\u01D3\"\"1&3\u01D4"),
          peg$decode("/\u01D5\"\"1'3\u01D6"),
          peg$decode("/\u01D7\"\"1%3\u01D8"),
          peg$decode("/\u01D9\"\"1%3\u01DA"),
          peg$decode("/\u01DB\"\"1*3\u01DC"),
          peg$decode("/\u01DD\"\"1&3\u01DE"),
          peg$decode("/\u01DF\"\"1'3\u01E0"),
          peg$decode("/\u01E1\"\"1'3\u01E2"),
          peg$decode("/\u01E3\"\"1&3\u01E4"),
          peg$decode("!7\x8E+3$/\u01E5\"\"1'3\u01E6+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01E7\"\"1(3\u01E8"),
          peg$decode("/\u01E9\"\"1(3\u01EA"),
          peg$decode("/\u01EB\"\"1#3\u01EC"),
          peg$decode("/\u01ED\"\"1)3\u01EE"),
          peg$decode("!7\x8E+3$/\u01EF\"\"1&3\u01F0+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01F1\"\"1#3\u01F2"),
          peg$decode("/\u01F3\"\"1'3\u01F4"),
          peg$decode("/\u01F5\"\"1&3\u01F6"),
          peg$decode("/\u01F7\"\"1%3\u01F8"),
          peg$decode("/\u01F9\"\"1$3\u01FA"),
          peg$decode("/\u01FB\"\"1)3\u01FC"),
          peg$decode("/\u01FD\"\"1$3\u01FE"),
          peg$decode("/\u01FF\"\"1$3\u0200"),
          peg$decode("/\u0201\"\"1)3\u0202"),
          peg$decode("/\u0203\"\"1\"3\u0204"),
          peg$decode("/\u0205\"\"1+3\u0206"),
          peg$decode("/\u0207\"\"1'3\u0208"),
          peg$decode("/\u0209\"\"1$3\u020A"),
          peg$decode("/\u020B\"\"1%3\u020C"),
          peg$decode("/\u020D\"\"1&3\u020E"),
          peg$decode("!7\x8E+3$/\u020F\"\"1&3\u0210+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0211\"\"1%3\u0212"),
          peg$decode("/\u0213\"\"1&3\u0214"),
          peg$decode("/\u0215\"\"1&3\u0216"),
          peg$decode("/\u0217\"\"1$3\u0218"),
          peg$decode("/\u0219\"\"1'3\u021A"),
          peg$decode("/\u021B\"\"1$3\u021C"),
          peg$decode("/\u021D\"\"1%3\u021E")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 266 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      //var unroll = options.util.makeUnroll(line, column, offset, SyntaxError)
      //var ast    = options.util.makeAST(line, column, offset, options)

      // Header/utility functions for grammar match bodies.
      //

      function joinWords() {
        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          return arguments[0];
        }
        var args = Array.prototype.slice.call(arguments);
        return args.join('');
      }

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryPredicate(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryPredicate",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
