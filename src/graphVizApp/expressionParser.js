module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "type name" },
          { type: "other", description: "type" },
          peg$FAILED,
          [],
          null,
          { type: "other", description: "cast" },
          function(value, type_name) {
              return {
                type: 'CastExpression',
                value: value,
                type_name: type_name
              };
            },
          { type: "other", description: "cases" },
          function(condition, result) {
                  return {
                    type: 'CaseBranch',
                    condition: condition,
                    result: result
                  };
                },
          function(first, rest) { return [first].concat(rest); },
          { type: "other", description: "case" },
          function(value, cases) {
                return {
                  type: 'CaseExpression',
                  value: value,
                  cases: cases,
                  elseClause: undefined
                };
              },
          function(cases) {
                return {
                  type: 'CaseExpression',
                  value: undefined,
                  cases: cases,
                  elseClause: undefined
                };
              },
          function(value, cases, elseClause) {
                return {
                  type: 'CaseExpression',
                  value: value,
                  cases: cases,
                  elseClause: elseClause
                };
              },
          function(cases, elseClause) {
                return {
                  type: 'CaseExpression',
                  value: undefined,
                  cases: cases,
                  elseClause: elseClause
                };
              },
          function(condition, result) {
                return {
                  type: 'CaseBranch',
                  condition: condition,
                  result: result
                };
              },
          { type: "other", description: "conditional" },
          function(cases) {
                return {
                  type: 'ConditionalExpression',
                  cases: cases,
                  elseClause: undefined
                };
              },
          function(cases, elseClause) {
                return {
                  type: 'ConditionalExpression',
                  cases: cases,
                  elseClause: elseClause
                };
              },
          { type: "other", description: "not" },
          function(operator, argument) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: argument
                };
              },
          function(first, rest) { return buildBinaryPredicate(first, rest); },
          { type: "other", description: "limit" },
          function(limit) { return { type: 'Limit', value: limit } },
          { type: "other", description: "predicate" },
          { type: "other", description: "now" },
          { type: "other", description: "literal" },
          { type: "other", description: "elements" },
          function(element) {
                  return optionalList(element);
                },
          function(first, rest) { return Array.prototype.concat.apply(first, rest); },
          { type: "other", description: "list" },
          function() {
                return {
                  type: 'ListExpression',
                  elements: []
                }
              },
          function(elements) {
                return {
                  type: 'ListExpression',
                  elements: elements
                }
              },
          void 0,
          function(name) { return { type: 'FunctionIdentifier', name: name.name }; },
          { type: "other", description: "function call" },
          function(callee) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: []
              };
            },
          function(callee, elements) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: elements
              };
            },
          { type: "other", description: "time type name" },
          { type: "other", description: "time" },
          function(typeName, expression) {
              return {
                type: 'FunctionCall',
                callee: callee,
                arguments: [expression]
              };
            },
          function(expression) { return expression; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          function() {
              return { type: "Literal", dataType: 'integer', value: 0 };
            },
          function() {
              return { type: "Literal", dataType: 'integer', value: parseInt(text()) };
            },
          "e",
          { type: "literal", value: "e", description: "\"e\"" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function() {
                return { type: "Literal", dataType: 'float', value: parseFloat(text()) };
              },
          function() {
                return { type: "Literal", dataType: 'integer', value: parseFloat(text()) };
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "0x",
          { type: "literal", value: "0x", description: "\"0x\"" },
          function(digits) {
                return { type: "Literal", dataType: 'integer', value: parseInt(digits, 16) };
               },
          { type: "any", description: "any character" },
          /^[A-Za-z_]/,
          { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          { type: "other", description: "identifier" },
          function(first, rest) {
                return {
                  type: "Identifier",
                  name: first + rest.join("")
                };
              },
          function(name) { return name; },
          { type: "other", description: "number" },
          function(literal) {
                return literal;
              },
          { type: "other", description: "numeric constant" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          { type: "other", description: "identifier with brackets" },
          function(chars) {
                return {
                  type: "Identifier",
                  name: chars.join("")
                };
              },
          function() { return text(); },
          function(sequence) { return sequence; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          { type: "other", description: "string" },
          function(chars) {
                return { type: "Literal", dataType: 'string', value: chars.join("") };
              },
          function() { return ""; },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          { type: "other", description: "comment" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "--",
          { type: "literal", value: "--", description: "\"--\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "~",
          { type: "literal", value: "~", description: "\"~\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<>",
          { type: "literal", value: "<>", description: "\"<>\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          /^[^\n]/,
          { type: "class", value: "[^\\n]", description: "[^\\n]" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          "",
          { type: "other", description: "null" },
          function() { return { type: "Literal", dataType: 'null', value: null }; },
          { type: "other", description: "boolean" },
          function() { return { type: "Literal", dataType: 'boolean', value: true  }; },
          function() { return { type: "Literal", dataType: 'boolean', value: false }; },
          { type: "other", description: "reserved word" },
          function(first, rest) { return buildBinaryExpression(first, rest); },
          { type: "other", description: "shift operator" },
          "<<",
          { type: "literal", value: "<<", description: "\"<<\"" },
          ">>",
          { type: "literal", value: ">>", description: "\">>\"" },
          { type: "other", description: "comparison" },
          { type: "other", description: "equality operator" },
          { type: "other", description: "whitespace" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          "\x0B",
          { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
          "\f",
          { type: "literal", value: "\f", description: "\"\\f\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\xA0",
          { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
          "\uFEFF",
          { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          { type: "other", description: "end of line" },
          "\r\n",
          { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
          "\r",
          { type: "literal", value: "\r", description: "\"\\r\"" },
          "\u2028",
          { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
          "\u2029",
          { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
          { type: "other", description: "postfix keyword" },
          function(argument, operator) {
                return {
                  type: 'UnaryExpression',
                  operator: operator,
                  argument: argument,
                  fixity: 'postfix'
                };
              },
          function(left, operator, right) {
                return {
                  type: 'BinaryPredicate',
                  operator: operator,
                  left: left,
                  right: right
                };
              },
          function(left, operator, negation, right) {
              return {
                type: 'NotExpression',
                operator: negation,
                value: {
                  type: 'BinaryPredicate',
                  operator: operator,
                  left: left,
                  right: right
                }
              };
            },
          function(left, operator, right) {
              return {
                type: 'BinaryPredicate',
                operator: joinWords(operator),
                left: left,
                right: right
              };
            },
          function(left, operator) {
              return {
                type: 'BinaryPredicate',
                operator: joinWords(operator),
                left: left,
                right: elements
              };
            },
          function(value, low, high) {
                return {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                };
              },
          function(value, operator, low, high) {
                return {
                  type: 'NotExpression',
                  operator: operator,
                  value: {
                    type: 'BetweenPredicate',
                    value: value,
                    start: low,
                    stop:  high
                  }
                };
              },
          { type: "other", description: "text comparison" },
          function(value, operator, like, escapeChar) {
                return {
                  type: 'LikePredicate',
                  operator: joinWords(operator),
                  left: value,
                  right: like,
                  escapeChar: escapeChar
                };
              },
          function(value, operator, like) {
                return {
                  type: 'LikePredicate',
                  operator: joinWords(operator),
                  left: value,
                  right: like
                };
              },
          function(value, negation, operator, like, escapeChar) {
                return {
                  type: 'NotExpression',
                  operator: negation,
                  value: {
                    type: 'LikePredicate',
                    operator: joinWords(operator),
                    left: value,
                    right: like,
                    escapeChar: escapeChar
                  }
                };
              },
          function(value, negation, operator, like) {
                return {
                  type: 'NotExpression',
                  operator: negation,
                  value: {
                    type: 'LikePredicate',
                    operator: joinWords(operator),
                    left: value,
                    right: like
                  }
                };
              },
          { type: "other", description: "regex expression" },
          function(value, operator, matcher) {
                return {
                  type: 'RegexPredicate',
                  operator: joinWords(operator),
                  left: value,
                  right: matcher
                };
              },
          function(value, negation, operator, matcher) {
                return {
                  type: 'NotExpression',
                  operator: negation,
                  value: {
                    type: 'RegexPredicate',
                    operator: joinWords(operator),
                    left: value,
                    right: matcher
                  }
                };
              },
          function(property) { return { name: property }; },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type:     'MemberAccess',
                    object:   result,
                    name:     element.name
                  };
                });
              },
          { type: "other", description: "prefix operator" },
          function(operator, argument) {
              return {
                type: 'UnaryExpression',
                operator: operator,
                argument: argument,
                fixity: 'prefix'
              };
            },
          { type: "other", description: "multiplicative operator" },
          /^[A-Za-z0-9_:]/,
          { type: "class", value: "[A-Za-z0-9_:]", description: "[A-Za-z0-9_:]" },
          function(str) { return str.join(''); },
          function(c) { return { column: c[2], graph_namespace: c[1] }; },
          function(c) { return { column: c }; },
          function(gcn) { return gcn[1]; },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "now",
          { type: "literal", value: "now", description: "\"now\"" },
          "abort",
          { type: "literal", value: "ABORT", description: "\"ABORT\"" },
          "action",
          { type: "literal", value: "ACTION", description: "\"ACTION\"" },
          "add",
          { type: "literal", value: "ADD", description: "\"ADD\"" },
          "after",
          { type: "literal", value: "AFTER", description: "\"AFTER\"" },
          "all",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "alter",
          { type: "literal", value: "ALTER", description: "\"ALTER\"" },
          "analyze",
          { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
          "and",
          { type: "literal", value: "AND", description: "\"AND\"" },
          "array",
          { type: "literal", value: "ARRAY", description: "\"ARRAY\"" },
          "as",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "asc",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "attach",
          { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
          "autoincrement",
          { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
          "before",
          { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
          "begin",
          { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
          "between",
          { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
          "boolean",
          { type: "literal", value: "BOOLEAN", description: "\"BOOLEAN\"" },
          "by",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "cascade",
          { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
          "case",
          { type: "literal", value: "CASE", description: "\"CASE\"" },
          "cast",
          { type: "literal", value: "CAST", description: "\"CAST\"" },
          "check",
          { type: "literal", value: "CHECK", description: "\"CHECK\"" },
          "collate",
          { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
          "column",
          { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
          "commit",
          { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
          "conflict",
          { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
          "constraint",
          { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
          "create",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "cross",
          { type: "literal", value: "CROSS", description: "\"CROSS\"" },
          "database",
          { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
          "date",
          { type: "literal", value: "DATE", description: "\"DATE\"" },
          "default",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "deferrable",
          { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
          "deferred",
          { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
          "delete",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "desc",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "detach",
          { type: "literal", value: "DETACH", description: "\"DETACH\"" },
          "distinct",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "drop",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          { type: "literal", value: "E", description: "\"E\"" },
          "each",
          { type: "literal", value: "EACH", description: "\"EACH\"" },
          "else",
          { type: "literal", value: "ELSE", description: "\"ELSE\"" },
          "end",
          { type: "literal", value: "END", description: "\"END\"" },
          "escape",
          { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
          "except",
          { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
          "exclusive",
          { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
          "exists",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "explain",
          { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
          "fail",
          { type: "literal", value: "FAIL", description: "\"FAIL\"" },
          "false",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "for",
          { type: "literal", value: "FOR", description: "\"FOR\"" },
          "foreign",
          { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
          "from",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "glob",
          { type: "literal", value: "GLOB", description: "\"GLOB\"" },
          "group",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "having",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          "if",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "ignore",
          { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
          "ilike",
          { type: "literal", value: "ILIKE", description: "\"ILIKE\"" },
          "immediate",
          { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
          "in",
          { type: "literal", value: "IN", description: "\"IN\"" },
          "index",
          { type: "literal", value: "INDEX", description: "\"INDEX\"" },
          "indexed",
          { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
          "infinity",
          { type: "literal", value: "INFINITY", description: "\"INFINITY\"" },
          "initially",
          { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
          "inner",
          { type: "literal", value: "INNER", description: "\"INNER\"" },
          "insert",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "instead",
          { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
          "integer",
          { type: "literal", value: "INTEGER", description: "\"INTEGER\"" },
          "intersect",
          { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
          "into",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "is",
          { type: "literal", value: "IS", description: "\"IS\"" },
          "isnull",
          { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
          "join",
          { type: "literal", value: "JOIN", description: "\"JOIN\"" },
          "key",
          { type: "literal", value: "KEY", description: "\"KEY\"" },
          "left",
          { type: "literal", value: "LEFT", description: "\"LEFT\"" },
          "like",
          { type: "literal", value: "LIKE", description: "\"LIKE\"" },
          "limit",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "match",
          { type: "literal", value: "MATCH", description: "\"MATCH\"" },
          "nan",
          { type: "literal", value: "NaN", description: "\"NaN\"" },
          "natural",
          { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
          "no",
          { type: "literal", value: "NO", description: "\"NO\"" },
          "not",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "notnull",
          { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
          "null",
          { type: "literal", value: "NULL", description: "\"NULL\"" },
          "number",
          { type: "literal", value: "NUMBER", description: "\"NUMBER\"" },
          "of",
          { type: "literal", value: "OF", description: "\"OF\"" },
          "offset",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "on",
          { type: "literal", value: "ON", description: "\"ON\"" },
          "or",
          { type: "literal", value: "OR", description: "\"OR\"" },
          "order",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "outer",
          { type: "literal", value: "OUTER", description: "\"OUTER\"" },
          "plan",
          { type: "literal", value: "PLAN", description: "\"PLAN\"" },
          "pragma",
          { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
          "primary",
          { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
          "query",
          { type: "literal", value: "QUERY", description: "\"QUERY\"" },
          "raise",
          { type: "literal", value: "RAISE", description: "\"RAISE\"" },
          "references",
          { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
          "regexp",
          { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
          "reindex",
          { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
          "release",
          { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
          "rename",
          { type: "literal", value: "RENAME", description: "\"RENAME\"" },
          "replace",
          { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
          "restrict",
          { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
          "rollback",
          { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
          "row",
          { type: "literal", value: "ROW", description: "\"ROW\"" },
          "savepoint",
          { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
          "select",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "set",
          { type: "literal", value: "SET", description: "\"SET\"" },
          "similar",
          { type: "literal", value: "SIMILAR", description: "\"SIMILAR\"" },
          "string",
          { type: "literal", value: "STRING", description: "\"STRING\"" },
          "table",
          { type: "literal", value: "TABLE", description: "\"TABLE\"" },
          "temp",
          { type: "literal", value: "TEMP", description: "\"TEMP\"" },
          "temporary",
          { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
          "then",
          { type: "literal", value: "THEN", description: "\"THEN\"" },
          "time",
          { type: "literal", value: "TIME", description: "\"TIME\"" },
          "timestamp",
          { type: "literal", value: "TIMESTAMP", description: "\"TIMESTAMP\"" },
          "to",
          { type: "literal", value: "TO", description: "\"TO\"" },
          "transaction",
          { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
          "trigger",
          { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
          "true",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "union",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "unique",
          { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
          "update",
          { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
          "using",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "vacuum",
          { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
          "values",
          { type: "literal", value: "VALUES", description: "\"VALUES\"" },
          "view",
          { type: "literal", value: "VIEW", description: "\"VIEW\"" },
          "virtual",
          { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
          "when",
          { type: "literal", value: "WHEN", description: "\"WHEN\"" },
          "where",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" }
        ],

        peg$bytecode = [
          peg$decode("7."),
          peg$decode("87\u0111*M \"7\xB3*G \"7\xF7*A \"7\xE7*; \"7\xF8*5 \"7\xAB*/ \"7\xC1*) \"7\u0116*# \"7\u01179*\" 3 "),
          peg$decode("8! #7!+&$,#&7!\"\"\" \"+\x8B$!7g+7$7<+-%7h+#%'#%$## \"$\"# \"\"# \"*V \"!7g+K$7<+A%7]+7%7<+-%7h+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \" $+#%'\"%$\"# \"\"# \"9*\" 3!"),
          peg$decode("8!7\xB7+\x8D$7\x8B+\x83%7g+y%7\x8B+o%7,+e%7\x8B+[%7\xAC+Q%7\x8B+G%7\"+=%7\x8B+3%7h+)%4+6&+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3%"),
          peg$decode("8!!7\u0124+e$7\x8B+[%7,+Q%7\x8B+G%7\u0115+=%7\x8B+3%7,+)%4'6('\"$ %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"+\xE9$ #!7\x8B+o$7\u0124+e%7\x8B+[%7,+Q%7\x8B+G%7\u0115+=%7\x8B+3%7,+)%4(6((\"$ %$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",z&!7\x8B+o$7\u0124+e%7\x8B+[%7,+Q%7\x8B+G%7\u0115+=%7\x8B+3%7,+)%4(6((\"$ %$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6)\"\"! %$\"# \"\"# \"9*\" 3'"),
          peg$decode("8!7\xB6+e$7\x8B+[%7,+Q%7\x8B+G%7$+=%7\x8B+3%7\xCD+)%4'6+'\"$\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u013E \"!7\xB6+P$7\x8B+F%7$+<%7\x8B+2%7\xCD+(%4%6,%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*\u0100 \"!7\xB6+\x8E$7\x8B+\x84%7,+z%7\x8B+p%7$+f%7\x8B+\\%7\xCC+R%7\x8B+H%7,+>%7\x8B+4%7\xCD+*%4+6-+#(&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\x84 \"!7\xB6+y$7\x8B+o%7$+e%7\x8B+[%7\xCC+Q%7\x8B+G%7,+=%7\x8B+3%7\xCD+)%4)6.)\"&\"%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3*"),
          peg$decode("!!7\xDB+e$7\x8B+[%7,+Q%7\x8B+G%7\u0115+=%7\x8B+3%7,+)%4'6/'\"$ %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"+\u0111$ #!7\x8B+\x83$7\xCC+y%7\x8B+o%7\xDB+e%7\x8B+[%7,+Q%7\x8B+G%7\u0115+=%7\x8B+3%7,+)%4*6/*\"$ %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",\x8E&!7\x8B+\x83$7\xCC+y%7\x8B+o%7\xDB+e%7\x8B+[%7,+Q%7\x8B+G%7\u0115+=%7\x8B+3%7,+)%4*6/*\"$ %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6)\"\"! %$\"# \"\"# \""),
          peg$decode("8!7&+<$7\x8B+2%7\xCD+(%4#61#!\"%$## \"$\"# \"\"# \"*p \"!7&+e$7\x8B+[%7\xCC+Q%7\x8B+G%7,+=%7\x8B+3%7\xCD+)%4'62'\"&\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 30"),
          peg$decode("8!7\xF5+=$7\x8B+3%7(+)%4#64#\"\" %$## \"$\"# \"\"# \"*# \"7\x869*\" 33"),
          peg$decode("!7(+\x8D$ #!7\x8B+A$7\xAA+7%7\x8B+-%7(+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\xAA+7%7\x8B+-%7(+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"65\"\"! %$\"# \"\"# \""),
          peg$decode("!7)+\x8D$ #!7\x8B+A$7\xFC+7%7\x8B+-%7)+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\xFC+7%7\x8B+-%7)+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"65\"\"! %$\"# \"\"# \""),
          peg$decode("8!7\xF0+<$7\x8B+2%7,+(%4#67#! %$## \"$\"# \"\"# \"9*\" 36"),
          peg$decode("7%*) \"7'*# \"7*"),
          peg$decode("87,9*\" 38"),
          peg$decode("7+*# \"7-"),
          peg$decode("87\xA0*) \"7\xA1*# \"7\xA29*\" 39"),
          peg$decode("87F*A \"7G*; \"7M*5 \"7M*/ \"7}*) \"7~*# \"7/9*\" 3:"),
          peg$decode("8!!7,+' 4!6<!! %+\x97$ #!7\x8B+F$7]+<%7\x8B+2%7,+(%4$6<$! %$$# \"$## \"$\"# \"\"# \",Q&!7\x8B+F$7]+<%7\x8B+2%7,+(%4$6<$! %$$# \"$## \"$\"# \"\"# \"\"+)%4\"6=\"\"! %$\"# \"\"# \"9*\" 3;"),
          peg$decode("8!7g+;$7\x8B+1%7h+'%4#6?# %$## \"$\"# \"\"# \"*\xAD \"!7g+P$7\x8B+F%71+<%7\x8B+2%7h+(%4%6@%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*o \"!7g+d$7\x8B+Z%71+P%7\x8B+F%7]+<%7\x8B+2%7h+(%4'6@'!$%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3>"),
          peg$decode("!!879*$$\"\" A\"# \"+2$7D+(%4\"6B\"! %$\"# \"\"# \""),
          peg$decode("8!73+P$7\x8B+F%7g+<%7\x8B+2%7h+(%4%6D%!$%$%# \"$$# \"$## \"$\"# \"\"# \"*p \"!73+e$7\x8B+[%7g+Q%7\x8B+G%71+=%7\x8B+3%7h+)%4'6E'\"&\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3C"),
          peg$decode("87\xC1*) \"7\u0116*# \"7\u01179*\" 3F"),
          peg$decode("8!75+=$7\x8B+3%7,+)%4#6H#\"\" %$## \"$\"# \"\"# \"9*\" 3G"),
          peg$decode("7I* \"7#*y \"76*s \"74*m \"7E*g \"70*a \"!7g+P$7\x8B+F%7-+<%7\x8B+2%7h+(%4%6I%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*# \"72"),
          peg$decode("0J\"\"1!3K"),
          peg$decode("0L\"\"1!3M"),
          peg$decode("!.N\"\"2N3O+& 4!6P! %*D \"!79+9$ #78,#&78\"+'%4\"6Q\" %$\"# \"\"# \""),
          peg$decode("/R\"\"1!3S"),
          peg$decode("!0T\"\"1!3U*# \" $+<$ #78+&$,#&78\"\"\" \"+#%'\"%$\"# \"\"# \""),
          peg$decode("!7;+-$7<+#%'\"%$\"# \"\"# \""),
          peg$decode("!7:+S$7\\+I% #78,#&78\"+7%7=*# \" $+'%4$6V$ %$$# \"$## \"$\"# \"\"# \"*\x80 \"!7\\+P$ #78+&$,#&78\"\"\" \"+7%7=*# \" $+'%4#6V# %$## \"$\"# \"\"# \"*B \"!7:+7$7=*# \" $+'%4\"6W\" %$\"# \"\"# \""),
          peg$decode("0X\"\"1!3Y"),
          peg$decode("!/Z\"\"1\"3[+G$! #7?+&$,#&7?\"\"\" \"+! (%+(%4\"6\\\"! %$\"# \"\"# \""),
          peg$decode("-\"\"1!3]"),
          peg$decode("0^\"\"1!3_"),
          peg$decode("7B*) \"7^*# \"78"),
          peg$decode("8!7B+;$ #7C,#&7C\"+)%4\"6a\"\"! %$\"# \"\"# \"9*\" 3`"),
          peg$decode("!!879*$$\"\" A\"# \"+2$7D+(%4\"6b\"! %$\"# \"\"# \""),
          peg$decode("8!7@+F$!87B*# \"789*$$\"\" A\"# \"+(%4\"6d\"!!%$\"# \"\"# \"*Q \"!7>+F$!87B*# \"789*$$\"\" A\"# \"+(%4\"6d\"!!%$\"# \"\"# \"9*\" 3c"),
          peg$decode("87\xE2*# \"7\xF29*\" 3e"),
          peg$decode(".f\"\"2f3g"),
          peg$decode("8!7i+D$ #7J,#&7J\"+2%7j+(%4#6i#!!%$## \"$\"# \"\"# \"9*\" 3h"),
          peg$decode("!!87j*) \"7H*# \"7\x899*$$\"\" A\"# \"+1$7A+'%4\"6j\" %$\"# \"\"# \"*C \"!7H+2$7Q+(%4\"6k\"! %$\"# \"\"# \"*# \"7P"),
          peg$decode(".l\"\"2l3m"),
          peg$decode(".n\"\"2n3o"),
          peg$decode("8!7K+D$ #7N,#&7N\"+2%7K+(%4#6q#!!%$## \"$\"# \"\"# \"*O \"!7L+D$ #7O,#&7O\"+2%7L+(%4#6q#!!%$## \"$\"# \"\"# \"9*\" 3p"),
          peg$decode("!!87K*) \"7H*# \"7\x899*$$\"\" A\"# \"+1$7A+'%4\"6j\" %$\"# \"\"# \"*C \"!7H+2$7Q+(%4\"6k\"! %$\"# \"\"# \"*# \"7P"),
          peg$decode("!!87L*) \"7H*# \"7\x899*$$\"\" A\"# \"+1$7A+'%4\"6j\" %$\"# \"\"# \"*C \"!7H+2$7Q+(%4\"6k\"! %$\"# \"\"# \"*# \"7P"),
          peg$decode("!7H+1$7\x8A+'%4\"6r\" %$\"# \"\"# \""),
          peg$decode("7R*\\ \"!.N\"\"2N3O+?$!8789*$$\"\" A\"# \"+'%4\"6s\" %$\"# \"\"# \"*) \"7V*# \"7W"),
          peg$decode("7S*# \"7T"),
          peg$decode("7L*\xB3 \"7K*\xAD \"7H*\xA7 \"!.t\"\"2t3u+& 4!6v! %*\x90 \"!.w\"\"2w3x+& 4!6y! %*y \"!.z\"\"2z3{+& 4!6|! %*b \"!.}\"\"2}3~+& 4!6! %*K \"!.\x80\"\"2\x803\x81+& 4!6\x82! %*4 \"!.\x83\"\"2\x833\x84+& 4!6\x85! %"),
          peg$decode("!!87U*# \"7\x899*$$\"\" A\"# \"+1$7A+'%4\"6j\" %$\"# \"\"# \""),
          peg$decode("7S*; \"78*5 \".\x86\"\"2\x863\x87*) \".\x88\"\"2\x883\x89"),
          peg$decode("!.\x86\"\"2\x863\x87+M$!!7?+-$7?+#%'\"%$\"# \"\"# \"+! (%+(%4\"6\x8A\"! %$\"# \"\"# \""),
          peg$decode("!.\x88\"\"2\x883\x89+a$!!7?+A$7?+7%7?+-%7?+#%'$%$$# \"$## \"$\"# \"\"# \"+! (%+(%4\"6\x8A\"! %$\"# \"\"# \""),
          peg$decode("87Z*# \"7Y9*\" 3\x8B"),
          peg$decode("!7w+{$ #!!87\x899*$$\"\" A\"# \"+-$7A+#%'\"%$\"# \"\"# \",F&!!87\x899*$$\"\" A\"# \"+-$7A+#%'\"%$\"# \"\"# \"\"+#%'\"%$\"# \"\"# \""),
          peg$decode("!7x+\x85$ #!!87y9*$$\"\" A\"# \"+-$7A+#%'\"%$\"# \"\"# \",F&!!87y9*$$\"\" A\"# \"+-$7A+#%'\"%$\"# \"\"# \"\"+-%7y+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("!7x+\x91$ #!!87y*# \"7\x899*$$\"\" A\"# \"+-$7A+#%'\"%$\"# \"\"# \",L&!!87y*# \"7\x899*$$\"\" A\"# \"+-$7A+#%'\"%$\"# \"\"# \"\"+-%7y+#%'#%$## \"$\"# \"\"# \""),
          peg$decode(".\x8C\"\"2\x8C3\x8D"),
          peg$decode(".\x8E\"\"2\x8E3\x8F"),
          peg$decode(".\x90\"\"2\x903\x91"),
          peg$decode(".\x92\"\"2\x923\x93"),
          peg$decode(".\x94\"\"2\x943\x95"),
          peg$decode(".\x96\"\"2\x963\x97"),
          peg$decode(".\x98\"\"2\x983\x99"),
          peg$decode(".\x9A\"\"2\x9A3\x9B"),
          peg$decode(".\x9C\"\"2\x9C3\x9D"),
          peg$decode(".\x9E\"\"2\x9E3\x9F"),
          peg$decode(".\xA0\"\"2\xA03\xA1"),
          peg$decode(".\xA2\"\"2\xA23\xA3"),
          peg$decode(".\xA4\"\"2\xA43\xA5"),
          peg$decode(".\xA6\"\"2\xA63\xA7"),
          peg$decode(".\xA8\"\"2\xA83\xA9"),
          peg$decode(".\xAA\"\"2\xAA3\xAB"),
          peg$decode(".\xAC\"\"2\xAC3\xAD"),
          peg$decode(".\xAE\"\"2\xAE3\xAF"),
          peg$decode(".\xB0\"\"2\xB03\xB1"),
          peg$decode(".\xB2\"\"2\xB23\xB3"),
          peg$decode(".\xB4\"\"2\xB43\xB5"),
          peg$decode(".\xB6\"\"2\xB63\xB7"),
          peg$decode(".\xB8\"\"2\xB83\xB9"),
          peg$decode(".\xBA\"\"2\xBA3\xBB"),
          peg$decode(".\x9A\"\"2\x9A3\x9B"),
          peg$decode(".\xBC\"\"2\xBC3\xBD"),
          peg$decode(" #0\xBE\"\"1!3\xBF,)&0\xBE\"\"1!3\xBF\""),
          peg$decode(".\xC0\"\"2\xC03\xC1*# \"7`"),
          peg$decode(".\xC2\"\"2\xC23\xC3"),
          peg$decode(".\xC4\"\"2\xC43\xC5"),
          peg$decode("! #-\"\"1!3],(&-\"\"1!3]\"+A$!8.\xC4\"\"2\xC43\xC59+$$\"# A\"\" \"+#%'\"%$\"# \"\"# \""),
          peg$decode(" \xC6"),
          peg$decode("!7\xAA+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u03F5 \"!7\xAC+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u03CC \"!7\xB1+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u03A3 \"!7\xB2+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u037A \"!7\xB6+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0351 \"!7\xB7+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0328 \"!7\xCC+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u02FF \"!7\xCD+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u02D6 \"!7\xCE+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u02AD \"!7\xD1+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0284 \"!7\xD7+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u025B \"!7\xDB+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0232 \"!7\xDF+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0209 \"!7\xEA+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u01E0 \"!7\xEB+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u01B7 \"!7\xEF+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u018E \"!7\xF5+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0165 \"!7\xF6+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u013C \"!7\xFC+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\u0113 \"!7\u0105+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\xEA \"!7\u0110+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\xC1 \"!7\u0115+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*\x98 \"!7\u0118+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*o \"!7\u0124+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"*F \"!7\u0125+;$!87C9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \""),
          peg$decode("8!7\xF7+& 4!6\xC8! %9*\" 3\xC7"),
          peg$decode("8!7\u011B+& 4!6\xCA! %*. \"!7\xD4+& 4!6\xCB! %9*\" 3\xC9"),
          peg$decode("87|*) \"7}*# \"7~9*\" 3\xCC"),
          peg$decode("7b*# \"7a"),
          peg$decode("!7\x9B+\x8D$ #!7\x8B+A$7\x80+7%7\x8B+-%7\x9B+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\x80+7%7\x8B+-%7\x9B+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xCD\"\"! %$\"# \"\"# \""),
          peg$decode("8.\xCF\"\"2\xCF3\xD0*) \".\xD1\"\"2\xD13\xD29*\" 3\xCE"),
          peg$decode("!7\x81+\x8D$ #!7\x8B+A$7\x82+7%7\x8B+-%7\x81+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\x82+7%7\x8B+-%7\x81+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xCD\"\"! %$\"# \"\"# \""),
          peg$decode("87n*\x81 \"7o*{ \"!!7l+;$!87l9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"+! (%*L \"!!7m+;$!87m9*$$\"\" A\"# \"+#%'\"%$\"# \"\"# \"+! (%9*\" 3\xD3"),
          peg$decode("!7\x83+\x8D$ #!7\x8B+A$7\x84+7%7\x8B+-%7\x83+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\x84+7%7\x8B+-%7\x83+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"65\"\"! %$\"# \"\"# \"*# \"7\x94"),
          peg$decode("!7\x85+\x8D$ #!7\x8B+A$7\x87+7%7\x8B+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\x87+7%7\x8B+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"65\"\"! %$\"# \"\"# \""),
          peg$decode("87r*/ \"7q*) \"7p*# \"7s9*\" 3\xD4"),
          peg$decode("8.\xD6\"\"2\xD63\xD7*Y \".\xD8\"\"2\xD83\xD9*M \".\xDA\"\"2\xDA3\xDB*A \".\xDC\"\"2\xDC3\xDD*5 \".\xDE\"\"2\xDE3\xDF*) \".\xE0\"\"2\xE03\xE19*\" 3\xD5"),
          peg$decode("80\xE3\"\"1!3\xE49*\" 3\xE2"),
          peg$decode("8.\xBC\"\"2\xBC3\xBD*M \".\xE6\"\"2\xE63\xE7*A \".\xE8\"\"2\xE83\xE9*5 \".\xEA\"\"2\xEA3\xEB*) \".\xEC\"\"2\xEC3\xED9*\" 3\xE5"),
          peg$decode(" #7\x88*) \"7\x8A*# \"7X,/&7\x88*) \"7\x8A*# \"7X\""),
          peg$decode(" #7\x88*# \"7[,)&7\x88*# \"7[\""),
          peg$decode("87\xEB*# \"7\xF69*\" 3\xEE"),
          peg$decode("!7\x97+=$7\x8B+3%7\x8D+)%4#6\xEF#\"\" %$## \"$\"# \"\"# \""),
          peg$decode("!7\x97+R$7\x8B+H%7\xEA+>%7\x8B+4%7\x9A+*%4%6\xF0%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*r \"!7\x97+g$7\x8B+]%7\xEA+S%7\x8B+I%7\xF5+?%7\x8B+5%7\x9A++%4'6\xF1'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("7\xDF*B \"!7\xF5+7$7\x8B+-%7\xDF+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("!7\x97+R$7\x8B+H%7\x90+>%7\x8B+4%7,+*%4%6\xF2%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*\xCD \"!7\x97+\xC2$7\x8B+\xB8%7\x90+\xAE%7\x8B+\xA4%7g+\x9A% #!71+7$7]+-%7\x8B+#%'#%$## \"$\"# \"\"# \"+E$,B&!71+7$7]+-%7\x8B+#%'#%$## \"$\"# \"\"# \"\"\"\" \"*# \" $+=%7\x8B+3%7h+)%4(6\xF3(\"'%%$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("!7\x97+z$7\x8B+p%7\xB2+f%7\x8B+\\%7\x97+R%7\x8B+H%7\xAA+>%7\x8B+4%7\x97+*%4)6\xF4)#($ %$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\x9A \"!7\x97+\x8F$7\x8B+\x85%7\xF5+{%7\x8B+q%7\xB2+g%7\x8B+]%7\x97+S%7\x8B+I%7\xAA+?%7\x8B+5%7\x97++%4+6\xF5+$*($ %$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \""),
          peg$decode("87\xEF*# \"7\xDD9*\" 3\xF6"),
          peg$decode("8!7\x97+q$7\x8B+g%7\x93+]%7\x8B+S%7\x97+I%7\x8B+?%7\xCE+5%7M++%4(6\xF7($'%# %$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0126 \"!7\x97+R$7\x8B+H%7\x93+>%7\x8B+4%7\x97+*%4%6\xF8%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*\xE6 \"!7\x97+\x86$7\x8B+|%7\xF5+r%7\x8B+h%7\x93+^%7\x8B+T%7\x97+J%7\x8B+@%7\xCE+6%7M+,%4*6\xF9*%)'%# %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*r \"!7\x97+g$7\x8B+]%7\xF5+S%7\x8B+I%7\x93+?%7\x8B+5%7\x97++%4'6\xFA'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xF6"),
          peg$decode("7\u0105*B \"!7\u0110+7$7\x8B+-%7\u0118+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("8!7\x97+R$7\x8B+H%7\x95+>%7\x8B+4%7\x97+*%4%6\xFC%#$\" %$%# \"$$# \"$## \"$\"# \"\"# \"*r \"!7\x97+g$7\x8B+]%7\xF5+S%7\x8B+I%7\x95+?%7\x8B+5%7\x97++%4'6\xFD'$&$\" %$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xFB"),
          peg$decode("!77+\xBF$ #!7\x8B+Z$7i+P%7\x8B+F%7,+<%7\x8B+2%7j+(%4&6\xFE&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",e&!7\x8B+Z$7i+P%7\x8B+F%7,+<%7\x8B+2%7j+(%4&6\xFE&!\"%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xFF\"\"! %$\"# \"\"# \""),
          peg$decode("7\x94*A \"7\x96*; \"7\x92*5 \"7\x91*/ \"7\x8E*) \"7\x8F*# \"7\x97"),
          peg$decode("87a*) \"7b*# \"7f9*\" 3\u0100"),
          peg$decode("!7\x99+=$7\x8B+3%7\x98+)%4#6\u0101#\"\" %$## \"$\"# \"\"# \"*# \"7\x98"),
          peg$decode("!7\x9A+\x8D$ #!7\x8B+A$7\x9C+7%7\x8B+-%7\x9A+#%'$%$$# \"$## \"$\"# \"\"# \",L&!7\x8B+A$7\x9C+7%7\x8B+-%7\x9A+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\xCD\"\"! %$\"# \"\"# \""),
          peg$decode("87c*) \"7d*# \"7e9*\" 3\u0102"),
          peg$decode("! #0\u0103\"\"1!3\u0104+,$,)&0\u0103\"\"1!3\u0104\"\"\" \"+' 4!6\u0105!! %"),
          peg$decode("!!!7E+7$7^+-%7\x9D+#%'#%$## \"$\"# \"\"# \"+' 4!6\u0106!! %*/ \"!7\x9D+' 4!6\u0107!! %+' 4!6\u0108!! %"),
          peg$decode("!.\u0109\"\"2\u01093\u010A+-$7E+#%'\"%$\"# \"\"# \""),
          peg$decode(".\u010B\"\"2\u010B3\u010C"),
          peg$decode(".\u010B\"\"2\u010B3\u010C"),
          peg$decode(".\u010B\"\"2\u010B3\u010C"),
          peg$decode("/\u010D\"\"1%3\u010E"),
          peg$decode("/\u010F\"\"1&3\u0110"),
          peg$decode("/\u0111\"\"1#3\u0112"),
          peg$decode("/\u0113\"\"1%3\u0114"),
          peg$decode("/\u0115\"\"1#3\u0116"),
          peg$decode("/\u0117\"\"1%3\u0118"),
          peg$decode("/\u0119\"\"1'3\u011A"),
          peg$decode("/\u011B\"\"1#3\u011C"),
          peg$decode("/\u011D\"\"1%3\u011E"),
          peg$decode("/\u011F\"\"1\"3\u0120"),
          peg$decode("/\u0121\"\"1#3\u0122"),
          peg$decode("/\u0123\"\"1&3\u0124"),
          peg$decode("/\u0125\"\"1-3\u0126"),
          peg$decode("/\u0127\"\"1&3\u0128"),
          peg$decode("/\u0129\"\"1%3\u012A"),
          peg$decode("/\u012B\"\"1'3\u012C"),
          peg$decode("/\u012D\"\"1'3\u012E"),
          peg$decode("/\u012F\"\"1\"3\u0130"),
          peg$decode("/\u0131\"\"1'3\u0132"),
          peg$decode("/\u0133\"\"1$3\u0134"),
          peg$decode("/\u0135\"\"1$3\u0136"),
          peg$decode("/\u0137\"\"1%3\u0138"),
          peg$decode("/\u0139\"\"1'3\u013A"),
          peg$decode("/\u013B\"\"1&3\u013C"),
          peg$decode("/\u013D\"\"1&3\u013E"),
          peg$decode("/\u013F\"\"1(3\u0140"),
          peg$decode("/\u0141\"\"1*3\u0142"),
          peg$decode("!7\x8B+3$/\u0143\"\"1&3\u0144+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0145\"\"1%3\u0146"),
          peg$decode("/\u0147\"\"1(3\u0148"),
          peg$decode("/\u0149\"\"1$3\u014A"),
          peg$decode("/\u014B\"\"1'3\u014C"),
          peg$decode("/\u014D\"\"1*3\u014E"),
          peg$decode("/\u014F\"\"1(3\u0150"),
          peg$decode("!7\x8B+3$/\u0151\"\"1&3\u0152+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0153\"\"1$3\u0154"),
          peg$decode("/\u0155\"\"1&3\u0156"),
          peg$decode("/\u0157\"\"1(3\u0158"),
          peg$decode("/\u0159\"\"1$3\u015A"),
          peg$decode("/R\"\"1!3\u015B"),
          peg$decode("/\u015C\"\"1$3\u015D"),
          peg$decode("/\u015E\"\"1$3\u015F"),
          peg$decode("/\u0160\"\"1#3\u0161"),
          peg$decode("/\u0162\"\"1&3\u0163"),
          peg$decode("/\u0164\"\"1&3\u0165"),
          peg$decode("/\u0166\"\"1)3\u0167"),
          peg$decode("/\u0168\"\"1&3\u0169"),
          peg$decode("!7\x8B+3$/\u016A\"\"1'3\u016B+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u016C\"\"1$3\u016D"),
          peg$decode("/\u016E\"\"1%3\u016F"),
          peg$decode("/\u0170\"\"1#3\u0171"),
          peg$decode("/\u0172\"\"1'3\u0173"),
          peg$decode("/\u0174\"\"1$3\u0175"),
          peg$decode("/\u0176\"\"1$3\u0177"),
          peg$decode("/\u0178\"\"1%3\u0179"),
          peg$decode("/\u017A\"\"1&3\u017B"),
          peg$decode("/\u017C\"\"1\"3\u017D"),
          peg$decode("/\u017E\"\"1&3\u017F"),
          peg$decode("/\u0180\"\"1%3\u0181"),
          peg$decode("/\u0182\"\"1)3\u0183"),
          peg$decode("/\u0184\"\"1\"3\u0185"),
          peg$decode("/\u0186\"\"1%3\u0187"),
          peg$decode("/\u0188\"\"1'3\u0189"),
          peg$decode("/\u018A\"\"1(3\u018B"),
          peg$decode("/\u018C\"\"1)3\u018D"),
          peg$decode("/\u018E\"\"1%3\u018F"),
          peg$decode("!7\x8B+3$/\u0190\"\"1&3\u0191+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0192\"\"1'3\u0193"),
          peg$decode("/\u0194\"\"1'3\u0195"),
          peg$decode("/\u0196\"\"1)3\u0197"),
          peg$decode("/\u0198\"\"1$3\u0199"),
          peg$decode("/\u019A\"\"1\"3\u019B"),
          peg$decode("/\u019C\"\"1&3\u019D"),
          peg$decode("/\u019E\"\"1$3\u019F"),
          peg$decode("/\u01A0\"\"1#3\u01A1"),
          peg$decode("/\u01A2\"\"1$3\u01A3"),
          peg$decode("/\u01A4\"\"1$3\u01A5"),
          peg$decode("/\u01A6\"\"1%3\u01A7"),
          peg$decode("/\u01A8\"\"1%3\u01A9"),
          peg$decode("/\u01AA\"\"1#3\u01AB"),
          peg$decode("/\u01AC\"\"1'3\u01AD"),
          peg$decode("/\u01AE\"\"1\"3\u01AF"),
          peg$decode("/\u01B0\"\"1#3\u01B1"),
          peg$decode("/\u01B2\"\"1'3\u01B3"),
          peg$decode("/\u01B4\"\"1$3\u01B5"),
          peg$decode("/\u01B6\"\"1&3\u01B7"),
          peg$decode("/\u01B8\"\"1\"3\u01B9"),
          peg$decode("/\u01BA\"\"1&3\u01BB"),
          peg$decode("/\u01BC\"\"1\"3\u01BD"),
          peg$decode("/\u01BE\"\"1\"3\u01BF"),
          peg$decode("/\u01C0\"\"1%3\u01C1"),
          peg$decode("/\u01C2\"\"1%3\u01C3"),
          peg$decode("/\u01C4\"\"1$3\u01C5"),
          peg$decode("/\u01C6\"\"1&3\u01C7"),
          peg$decode("/\u01C8\"\"1'3\u01C9"),
          peg$decode("/\u01CA\"\"1%3\u01CB"),
          peg$decode("/\u01CC\"\"1%3\u01CD"),
          peg$decode("/\u01CE\"\"1*3\u01CF"),
          peg$decode("/\u01D0\"\"1&3\u01D1"),
          peg$decode("/\u01D2\"\"1'3\u01D3"),
          peg$decode("/\u01D4\"\"1'3\u01D5"),
          peg$decode("/\u01D6\"\"1&3\u01D7"),
          peg$decode("!7\x8B+3$/\u01D8\"\"1'3\u01D9+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01DA\"\"1(3\u01DB"),
          peg$decode("/\u01DC\"\"1(3\u01DD"),
          peg$decode("/\u01DE\"\"1#3\u01DF"),
          peg$decode("/\u01E0\"\"1)3\u01E1"),
          peg$decode("!7\x8B+3$/\u01E2\"\"1&3\u01E3+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u01E4\"\"1#3\u01E5"),
          peg$decode("/\u01E6\"\"1'3\u01E7"),
          peg$decode("/\u01E8\"\"1&3\u01E9"),
          peg$decode("/\u01EA\"\"1%3\u01EB"),
          peg$decode("/\u01EC\"\"1$3\u01ED"),
          peg$decode("/\u01EE\"\"1)3\u01EF"),
          peg$decode("/\u01F0\"\"1$3\u01F1"),
          peg$decode("/\u01F2\"\"1$3\u01F3"),
          peg$decode("/\u01F4\"\"1)3\u01F5"),
          peg$decode("/\u01F6\"\"1\"3\u01F7"),
          peg$decode("/\u01F8\"\"1+3\u01F9"),
          peg$decode("/\u01FA\"\"1'3\u01FB"),
          peg$decode("/\u01FC\"\"1$3\u01FD"),
          peg$decode("/\u01FE\"\"1%3\u01FF"),
          peg$decode("/\u0200\"\"1&3\u0201"),
          peg$decode("!7\x8B+3$/\u0202\"\"1&3\u0203+#%'\"%$\"# \"\"# \""),
          peg$decode("/\u0204\"\"1%3\u0205"),
          peg$decode("/\u0206\"\"1&3\u0207"),
          peg$decode("/\u0208\"\"1&3\u0209"),
          peg$decode("/\u020A\"\"1$3\u020B"),
          peg$decode("/\u020C\"\"1'3\u020D"),
          peg$decode("/\u020E\"\"1$3\u020F"),
          peg$decode("/\u0210\"\"1%3\u0211")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 262 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      //var unroll = options.util.makeUnroll(line, column, offset, SyntaxError)
      //var ast    = options.util.makeAST(line, column, offset, options)

      // Header/utility functions for grammar match bodies.
      //

      function joinWords(arguments) {
        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          return arguments[0];
        }
        var args = Array.prototype.slice.call(arguments);
        return args.join('');
      }

      function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
          result[i] = list[i][index];
        }

        return result;
      }

      function buildList(first, rest, index) {
        return [first].concat(extractList(rest, index));
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }

      function buildBinaryPredicate(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryPredicate",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function buildBinaryExpression(first, rest) {
        return buildTree(first, rest, function(result, element) {
          return {
            type:     "BinaryExpression",
            operator: element[1],
            left:     result,
            right:    element[3]
          };
        });
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();