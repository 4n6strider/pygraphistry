from pymongo import MongoClient
from datetime import datetime
import subprocess
import socket
import time
import os
import signal

import logging
import sys

logger = logging.getLogger()
logger.setLevel(logging.INFO)

ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s :: %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

def monitor(db):
    """
    This monitors GPU usage using nvidia-smi and updates it in the gpu_monitor
    table.
    """
    collection = db['gpu_monitor']

    # Get host IP
    ip = socket.gethostbyname(socket.getfqdn())

    # Remove all old entries from this IP
    collection.remove({"ip": ip})

    # Get GPU data from nvidia-smi
    p = subprocess.Popen(["nvidia-smi", 
                        "--query-compute-apps=used_gpu_memory,name,pid",
                        "--format=csv,noheader"], stdout=subprocess.PIPE)
    gpu_data = p.communicate()[0].split('\n')

    # Update db for each process talking to the GPU
    for process in gpu_data:
        logger.info(process)
        process = process.replace(' ', '').split(',')
        if process == ['']:
            continue

        gpu_memory_used = process[0]
        name = process[1]
        pid = process[2]

        doc = {
                'ip': ip,
                'gpu_memory_used': gpu_memory_used,
                'name': name,
                'pid': pid
            }

        collection.insert(doc)

def reap(db):
    """
    This reaps all dead processes by checking the node_monitor table for outdated rows,
    The rows should be updated every ten seconds by each node process itself.
    """
    # Select all checkins older than 30 seconds
    collection = db['node_monitor']

    old = collection.find({"updated": {"$lt": datetime.now()}})

    for doc in old:
        pid = doc['pid']
        ip = doc['ip']
        port = doc['port']
        os.kill(pid, signal.SIGKILL)
        logger.info("killing {0}".format(pid))
        collection.remove({"_id": doc['id']})
        logger.info(query)

while 1:
    # Connect to central db
    conn = MongoClient('mongodb://graphistry:graphtheplanet@ds047030.mongolab.com:47030/graphistry')
    db = conn.graphistry
    db.node_monitor.ensure_index( [("port", ASCENDING), ("ip", ASCENDING), ("pid", ASCENDING)], unique=True )
    monitor(db)
    reap(db)
    conn.close()

    time.sleep(10)