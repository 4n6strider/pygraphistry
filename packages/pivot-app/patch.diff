From 663281515596bf00ae4d8feb4eaceffac4727579 Mon Sep 17 00:00:00 2001
From: Paden Tomasello <paden@graphistry.com>
Date: Wed, 27 Jul 2016 15:04:51 -0700
Subject: [PATCH] Change file name

---
 src/shared/searchSplunkObservable.js | 80 ------------------------------------
 src/shared/services/searchSplunk.js  | 80 ++++++++++++++++++++++++++++++++++++
 2 files changed, 80 insertions(+), 80 deletions(-)
 delete mode 100644 src/shared/searchSplunkObservable.js
 create mode 100644 src/shared/services/searchSplunk.js

diff --git a/src/shared/searchSplunkObservable.js b/src/shared/searchSplunkObservable.js
deleted file mode 100644
index 2d70b47..0000000
--- a/src/shared/searchSplunkObservable.js
+++ /dev/null
@@ -1,80 +0,0 @@
-var splunkjs = require('splunk-sdk');
-import { Observable } from 'rxjs';
-
-var service = new splunkjs.Service({username: "admin", password: "changeme"});
-
-service.login(function(err, success) {
-    if (err) {
-        throw err;
-    }
-});
-
-function searchSplunk(searchQuery, callback) {
-    // Search everything and return the first 100 results
-
-    // Set the search parameters
-    var searchParams = {
-      exec_mode: "blocking",
-      earliest_time: "2012-06-20T16:27:43.000-07:00"
-    };
-
-    // A blocking search returns the job's SID when the search is done
-    console.log("Wait for the search to finish...");
-
-    // Run a blocking search and get back a job
-    var output;
-
-    var serviceObservable = Observable.bindNodeCallback(service.search.bind(service));
-    var serviceResult = serviceObservable(
-      searchQuery,
-      searchParams
-    );
-
-
-    return serviceResult.flatMap(
-        function(job) {
-            var fetchJob = Observable.bindNodeCallback(job.fetch.bind(job));
-            var jobObservable = fetchJob();
-            return jobObservable;
-        },
-        function(job, jobFetchResult) {
-            return job
-        }
-    ).flatMap(
-        function(job) {
-              console.log("Search job properties\n---------------------");
-              console.log("Search job ID:         " + job.sid);
-              console.log("The number of events:  " + job.properties().eventCount); 
-              console.log("The number of results: " + job.properties().resultCount);
-              console.log("Search duration:       " + job.properties().runDuration + " seconds");
-              console.log("This job expires in:   " + job.properties().ttl + " seconds");
-            var getResults = Observable.bindNodeCallback(job.results.bind(job), 
-                function(results, job) {
-                return ({results, job});
-            });
-            var jobResults = getResults({});
-            return jobResults;
-        }
-    ).map(
-        function({results, job}) {
-            var fields = results.fields;
-            var rows = results.rows;
-            output = new Array(rows.length);
-            var values;
-            for(var i = 0; i < rows.length; i++) {
-              output[i] = {};
-              values = rows[i];
-              for(var j = 0; j < values.length; j++) {
-                var field = fields[j];
-                var value = values[j];
-                output[i][field] = value;
-              }
-            }
-            return output
-        }
-    )
-}
-
-module.exports = {
-    searchSplunk: searchSplunk
-}
diff --git a/src/shared/services/searchSplunk.js b/src/shared/services/searchSplunk.js
new file mode 100644
index 0000000..2d70b47
--- /dev/null
+++ b/src/shared/services/searchSplunk.js
@@ -0,0 +1,80 @@
+var splunkjs = require('splunk-sdk');
+import { Observable } from 'rxjs';
+
+var service = new splunkjs.Service({username: "admin", password: "changeme"});
+
+service.login(function(err, success) {
+    if (err) {
+        throw err;
+    }
+});
+
+function searchSplunk(searchQuery, callback) {
+    // Search everything and return the first 100 results
+
+    // Set the search parameters
+    var searchParams = {
+      exec_mode: "blocking",
+      earliest_time: "2012-06-20T16:27:43.000-07:00"
+    };
+
+    // A blocking search returns the job's SID when the search is done
+    console.log("Wait for the search to finish...");
+
+    // Run a blocking search and get back a job
+    var output;
+
+    var serviceObservable = Observable.bindNodeCallback(service.search.bind(service));
+    var serviceResult = serviceObservable(
+      searchQuery,
+      searchParams
+    );
+
+
+    return serviceResult.flatMap(
+        function(job) {
+            var fetchJob = Observable.bindNodeCallback(job.fetch.bind(job));
+            var jobObservable = fetchJob();
+            return jobObservable;
+        },
+        function(job, jobFetchResult) {
+            return job
+        }
+    ).flatMap(
+        function(job) {
+              console.log("Search job properties\n---------------------");
+              console.log("Search job ID:         " + job.sid);
+              console.log("The number of events:  " + job.properties().eventCount); 
+              console.log("The number of results: " + job.properties().resultCount);
+              console.log("Search duration:       " + job.properties().runDuration + " seconds");
+              console.log("This job expires in:   " + job.properties().ttl + " seconds");
+            var getResults = Observable.bindNodeCallback(job.results.bind(job), 
+                function(results, job) {
+                return ({results, job});
+            });
+            var jobResults = getResults({});
+            return jobResults;
+        }
+    ).map(
+        function({results, job}) {
+            var fields = results.fields;
+            var rows = results.rows;
+            output = new Array(rows.length);
+            var values;
+            for(var i = 0; i < rows.length; i++) {
+              output[i] = {};
+              values = rows[i];
+              for(var j = 0; j < values.length; j++) {
+                var field = fields[j];
+                var value = values[j];
+                output[i][field] = value;
+              }
+            }
+            return output
+        }
+    )
+}
+
+module.exports = {
+    searchSplunk: searchSplunk
+}
-- 
2.6.4

